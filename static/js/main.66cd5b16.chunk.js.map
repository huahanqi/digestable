{"version":3,"sources":["contexts/simplify-context.js","contexts/visualization-context.js","digestable/clustering/kmeans.js","digestable/compute-relation-web-worker.js","digestable/digestable.js","digestable/clustering/clusterQuantiles.js","digestable/clustering/clusterGap.js","digestable/clustering/groupCategories.js","components/table-wrapper/Footer.js","components/table-wrapper/table-wrapper.js","hooks/use-scroll-hook.js","components/controls/controlPanel.js","components/controls/simplifyControls.js","components/controls/visualizationControls.js","app.js","index.js"],"names":["methods","name","type","transform","initialState","apply","columnType","method","amount","transformBase","unique","rows","unselect","reducer","state","action","Math","min","Error","SimplifyContext","createContext","SimplifyProvider","children","useReducer","dispatch","Provider","value","modes","categoryScalingOptions","mode","showLinks","categoryScaling","calculatingRelations","VisualizationContext","VisualizationProvider","calcMeanCentroid","dataSet","start","end","features","length","n","mean","i","push","j","getRandomCentroidsNaiveSharding","dataset","k","numSamples","step","floor","centroids","getRandomCentroids","index","max","centroidsIndex","random","indexOf","centroid","compareCentroids","a","b","shouldStop","oldCentroids","iterations","sameCount","getDistanceSQ","diffs","reduce","r","e","getLabels","labels","c","points","indeces","closestCentroidIndex","prevDistance","distance","getPointsMean","pointList","totalPoints","means","point","val","recalculateCentroids","newCentroid","newCentroidList","centroidGroup","Worker_fn","Worker","digestable","table","d3","linkSvg","allData","data","columns","relations","clustering","applySimplification","simplificationMethod","simplificationAmount","simplificationRows","visualizationMode","isCalculating","missingValues","isMissing","d","includes","dispatcher","dispatcher_calcRel","displayRowNum","isFullData","selection","each","this","selectAll","join","enter","append","attr","inputData","map","group","unshift","filter","column","forEach","values","uniqueValues","Array","from","add","Set","validValues","numeric","isNaN","numbers","sort","isId","extent","maxDigits","significantDigits","counts","getCounts","count","clearSorting","clearClustering","createColumns","v","initialIndex","isCluster","cluster","pinned","expanded","processData","sortTable","drawTable","Object","entries","log10","log","String","split","n1","n2","abs","d1","d2","clusterColumn","find","v1","v2","sortData","maxCount","clusters","transformValues","base","valueScale","domain","range","pow","removeNull","nullIndex","nullCluster","slice","applyNull","concat","scale","clusterQuantiles","reverse","useNaiveSharding","converged","kmeans","numRows","gaps","gap","clusterGap","console","clusterNumeric","groupCategories","clusterCategorical","size","row","valid","median","q1","q2","warn","sortColumn","px","paddingX","py","paddingY","showSortButtons","info","th","select","div","nameDiv","text","on","evt","sortByColumn","style","clusterByColumn","call","html","classed","width","node","clientWidth","height","svg","xScale","rangeRound","bins","bin","yScale","rect","x0","x1","s","tippy","nodes","colorScale","bandwidth","drawHeader","top","others","topString","othersString","expandedData","insert","maxSize","td","valueDiv","idx","isPinned","isExpanded","isExpanded_target","w2","w1","source","target","drawBody","applyVisualizationMode","clientHeight","highlight","drawLinks","window","computeRelationWorker","postMessage","onmessage","re","cols","offsetWidth","aspect","offset","getBoundingClientRect","x","left","right","pos","x2","y","xi","yi","line","curve","opacityScale","widthScale","magnitude","_","arguments","updateLinks","onCalcRel","loadMore","rowNum","parseInt","loadMoreData","fullDataLength","Footer","addrowNum","setAddRowNum","refreshDisplayRowNum","useState","displayRowNumAct","setDisplayRowNumAct","padding","display","justifyContent","position","zIndex","backgroundColor","Form","onSubmit","preventDefault","Row","Col","xs","Text","fontSize","Button","disabled","Control","onChange","TableWrapper","useContext","simplifyDispatch","visualizationDispatch","divRef","useRef","digestableRef","OuterDivRef","setIsFullData","onScroll","callback","scrollType","ticking","current","scrollLeft","requestAnimationFrame","scrollTop","useScrollHook","useEffect","datum","ref","overflow","Header","Card","Body","Subtitle","ControlPanel","title","subtitle","className","Stack","Group","Label","Check","Select","Range","SimplifyControls","label","id","checked","FloatingLabel","variant","onClick","VisualizationControls","onShowLinksChange","marginBottom","option","Brand","Navbar","datasets","url","App","setDataset","setData","loading","setLoading","loadData","csvData","URLSearchParams","location","search","get","bg","src","alt","as","sm","accept","file","files","URL","createObjectURL","Container","fluid","Spinner","animation","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66cd5b16.chunk.js","sourcesContent":["import React, { createContext, useReducer } from 'react';\n\nconst methods = [\n  { name: 'quantiles', type: 'rows' },\n  { name: 'kmeans', type: 'rows' },\n  { name: 'gap', type: 'rows', transform: true },\n  //  { name: 'threshold', type: 'amount' }\n];\n\nconst initialState = {\n  apply: false,\n  columnType: 'numeric',\n  methods: methods,\n  method: methods[0],\n  amount: 0.5,\n  transformBase: 1,\n  unique: 0,\n  rows: 10,\n  unselect: false,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setApply':\n      return {\n        ...state,\n        apply: action.apply,\n      };\n\n    case 'setMethod':\n      return {\n        ...state,\n        method: action.method,\n      };\n\n    case 'setAmount':\n      return {\n        ...state,\n        amount: action.amount,\n      };\n\n    case 'setTransformBase':\n      return {\n        ...state,\n        transformBase: action.transformBase,\n      };\n\n    case 'setColumnInfo':\n      return {\n        ...state,\n        columnType: action.columnType,\n        unique: action.unique,\n        rows: Math.min(state.rows, action.unique),\n      };\n\n    case 'setRows':\n      return {\n        ...state,\n        rows: action.rows,\n      };\n\n    case 'setUnselect':\n      return {\n        ...state,\n        unselect: action.unselect,\n      };\n\n    default:\n      throw new Error('Invalid simplify context action: ' + action.type);\n  }\n};\n\nexport const SimplifyContext = createContext(initialState);\n\nexport const SimplifyProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <SimplifyContext.Provider value={[state, dispatch]}>\n      {children}\n    </SimplifyContext.Provider>\n  );\n};\n","import React, { createContext, useReducer } from 'react';\n\nconst modes = ['text', 'visualizations', 'both', 'interactive'];\n\nconst categoryScalingOptions = ['row', 'column'];\n\nconst initialState = {\n  modes: modes,\n  mode: modes[0],\n  showLinks: false,\n  categoryScalingOptions: categoryScalingOptions,\n  categoryScaling: categoryScalingOptions[0],\n  calculatingRelations: true,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setMode':\n      return {\n        ...state,\n        mode: action.mode,\n      };\n\n    case 'setShowLinks':\n      return {\n        ...state,\n        showLinks: action.showLinks,\n      };\n\n    case 'setCategoryScaling':\n      return {\n        ...state,\n        categoryScaling: action.categoryScaling,\n      };\n\n    case 'setCalculatingRelations':\n      return {\n        ...state,\n        calculatingRelations: action.calculatingRelations,\n      };\n\n    default:\n      throw new Error('Invalid visualization context action: ' + action.type);\n  }\n};\n\nexport const VisualizationContext = createContext(initialState);\n\nexport const VisualizationProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <VisualizationContext.Provider value={[state, dispatch]}>\n      {children}\n    </VisualizationContext.Provider>\n  );\n};\n","// Adapted from https://medium.com/geekculture/implementing-k-means-clustering-from-scratch-in-javascript-13d71fbcb31e\n\nconst MAX_ITERATIONS = 50;\n\nfunction randomBetween(min, max) {\n  return Math.floor(\n    Math.random() * (max - min) + min\n  );\n}\n\nfunction calcMeanCentroid(dataSet, start, end) {\n  const features = dataSet[0].length;\n  const n = end - start;\n  let mean = [];\n  for (let i = 0; i < features; i++) {\n    mean.push(0);\n  }\n  for (let i = start; i < end; i++) {\n    for (let j = 0; j < features; j++) {\n      mean[j] = mean[j] + dataSet[i][j] / n;\n    }\n  }\n  return mean;\n}\n\nfunction getRandomCentroidsNaiveSharding(dataset, k) {\n  // implementation of a variation of naive sharding centroid initialization method\n  // (not using sums or sorting, just dividing into k shards and calc mean)\n  // https://www.kdnuggets.com/2017/03/naive-sharding-centroid-initialization-method.html\n  const numSamples = dataset.length;\n  // Divide dataset into k shards:\n  const step = Math.floor(numSamples / k);\n  const centroids = [];\n  for (let i = 0; i < k; i++) {\n    const start = step * i;\n    let end = step * (i + 1);\n    if (i + 1 === k) {\n      end = numSamples;\n    }\n    centroids.push(calcMeanCentroid(dataset, start, end));\n  }\n  return centroids;\n}\n\nfunction getRandomCentroids(dataset, k) {\n  // selects random points as centroids from the dataset\n  const numSamples = dataset.length;\n  const centroidsIndex = [];\n  let index;\n  while (centroidsIndex.length < k) {\n    index = randomBetween(0, numSamples);\n    if (centroidsIndex.indexOf(index) === -1) {\n      centroidsIndex.push(index);\n    }\n  }\n  const centroids = [];\n  for (let i = 0; i < centroidsIndex.length; i++) {\n    const centroid = [...dataset[centroidsIndex[i]]];\n    centroids.push(centroid);\n  }\n  return centroids;\n}\n\nfunction compareCentroids(a, b) {\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction shouldStop(oldCentroids, centroids, iterations) {\n  if (iterations > MAX_ITERATIONS) {\n    return true;\n  }\n  if (!oldCentroids || !oldCentroids.length) {\n    return false;\n  }\n  let sameCount = true;\n  for (let i = 0; i < centroids.length; i++) {\n    if (!compareCentroids(centroids[i], oldCentroids[i])) {\n      sameCount = false;\n    }\n  }\n  return sameCount;\n}\n\n// Calculate Squared Euclidean Distance\nfunction getDistanceSQ(a, b) {\n  const diffs = [];\n  for (let i = 0; i < a.length; i++) {\n    diffs.push(a[i] - b[i]);\n  }\n  return diffs.reduce((r, e) => (r + (e * e)), 0);\n}\n\n// Returns a label for each piece of data in the dataset. \nfunction getLabels(dataSet, centroids) {\n  // prep data structure:\n  const labels = {};\n  for (let c = 0; c < centroids.length; c++) {\n    labels[c] = {\n      points: [],\n      indeces: [],\n      centroid: centroids[c],\n    };\n  }\n  // For each element in the dataset, choose the closest centroid. \n  // Make that centroid the element's label.\n  for (let i = 0; i < dataSet.length; i++) {\n    const a = dataSet[i];\n    let closestCentroid, closestCentroidIndex, prevDistance;\n    for (let j = 0; j < centroids.length; j++) {\n      let centroid = centroids[j];\n      if (j === 0) {\n        closestCentroid = centroid;\n        closestCentroidIndex = j;\n        prevDistance = getDistanceSQ(a, closestCentroid);\n      } else {\n        // get distance:\n        const distance = getDistanceSQ(a, centroid);\n        if (distance < prevDistance) {\n          prevDistance = distance;\n          closestCentroid = centroid;\n          closestCentroidIndex = j;\n        }\n      }\n    }\n\n    labels[closestCentroidIndex].points.push(a);\n    labels[closestCentroidIndex].indeces.push(i);\n  }\n  return labels;\n}\n\nfunction getPointsMean(pointList) {\n  const totalPoints = pointList.length;\n  const means = [];\n  for (let j = 0; j < pointList[0].length; j++) {\n    means.push(0);\n  }\n  for (let i = 0; i < pointList.length; i++) {\n    const point = pointList[i];\n    for (let j = 0; j < point.length; j++) {\n      const val = point[j];\n      means[j] = means[j] + val / totalPoints;\n    }\n  }\n  return means;\n}\n\nfunction recalculateCentroids(dataSet, labels, k) {\n  // Each centroid is the geometric mean of the points that\n  // have that centroid's label. Important: If a centroid is empty (no points have\n  // that centroid's label) you should randomly re-initialize it.\n  let newCentroid;\n  const newCentroidList = [];\n  for (const k in labels) {\n    const centroidGroup = labels[k];\n    if (centroidGroup.points.length > 0) {\n      // find mean:\n      newCentroid = getPointsMean(centroidGroup.points);\n    } else {\n      // get new random centroid\n      newCentroid = getRandomCentroids(dataSet, 1)[0];\n    }\n    newCentroidList.push(newCentroid);\n  }\n  return newCentroidList;\n}\n\nexport function kmeans(dataset, k, useNaiveSharding = true) {\n  if (dataset.length && dataset[0].length && dataset.length >= k) {\n    // Initialize book keeping variables\n    let iterations = 0;\n    let oldCentroids, labels, centroids;\n\n    // Initialize centroids randomly\n    if (useNaiveSharding) {\n      centroids = getRandomCentroidsNaiveSharding(dataset, k);\n    } else {\n      centroids = getRandomCentroids(dataset, k);\n    }\n\n    // Run the main k-means algorithm\n    while (!shouldStop(oldCentroids, centroids, iterations)) {\n      // Save old centroids for convergence test.\n      oldCentroids = [...centroids];\n      iterations++;\n\n      // Assign labels to each datapoint based on centroids\n      labels = getLabels(dataset, centroids);\n      centroids = recalculateCentroids(dataset, labels, k);\n    }\n\n    const clusters = [];\n    for (let i = 0; i < k; i++) {\n      clusters.push(labels[i]);\n    }\n    const results = {\n      clusters: clusters,\n      centroids: centroids,\n      iterations: iterations,\n      converged: iterations <= MAX_ITERATIONS,\n    };\n    return results;\n  } else {\n    throw new Error('Invalid dataset');\n  }\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/compute-relation-web-worker.dc856299.worker.js\");\n}\n","import * as d3 from 'd3';\nimport {\n  clusterQuantiles,\n  kmeans,\n  clusterGap,\n  groupCategories,\n} from './clustering';\nimport './digestable.css';\n// import worker for relation calculation\n/* eslint-disable import/no-webpack-loader-syntax */\nimport Worker from 'worker-loader!./compute-relation-web-worker.js';\n\n// import tippy for nicer tooltip\nimport tippy from 'tippy.js';\nimport 'tippy.js/dist/tippy.css';\n\nexport const digestable = () => {\n  // The table\n  let table = d3.select(),\n    linkSvg = d3.select(),\n    // Data\n    allData = [],\n    data = [],\n    columns = [],\n    relations = [],\n    clustering = false,\n    // Parameters\n    applySimplification = false,\n    simplificationMethod = 'threshold',\n    simplificationAmount = 0.9,\n    simplificationRows = 20,\n    transformBase = 1,\n    visualizationMode = 'text',\n    showLinks = false,\n    // web-worker para\n    isCalculating = false,\n    categoryScaling = 'row',\n    paddingX = 5,\n    paddingY = 0,\n    // Missing data\n    missingValues = ['', 'NA', 'na'],\n    isMissing = (d) => missingValues.includes(d),\n    // Event dispatcher\n    dispatcher = d3.dispatch('clusterByColumn'),\n    dispatcher_calcRel = d3.dispatch('CalculateRelations'),\n    // load more data parameters\n    displayRowNum = 100,\n    isFullData = false;\n\n  function digestable(selection) {\n    selection.each(function(d) {\n      // Create SVG for links\n      linkSvg = d3\n        .select(this)\n        .selectAll('.linkSvg')\n        .data([[]])\n        .join((enter) => enter.append('svg').attr('class', 'linkSvg'));\n\n      // Create skeletal table\n      table = d3\n        .select(this)\n        .selectAll('table')\n        .data([[]])\n        .join((enter) => {\n          const table = enter.append('table');\n\n          table.append('thead').append('tr');\n          table.append('tbody');\n\n          return table;\n        });\n\n      createColumns(d);\n      createData(d);\n      processData();\n      sortTable();\n      drawTable();\n    });\n  }\n\n  // Helper functions\n  const textVisibility = () =>\n    visualizationMode === 'text' || visualizationMode === 'both'\n      ? 'visible'\n      : 'hidden';\n  const visVisibility = () =>\n    visualizationMode !== 'text' ? 'visible' : 'hidden';\n\n  const getCounts = (uniqueValues, values) =>\n    Object.entries(\n      values.reduce(\n        (counts, value) => {\n          counts[value]++;\n          return counts;\n        },\n        uniqueValues.reduce((counts, value) => {\n          counts[value] = 0;\n          return counts;\n        }, {})\n      )\n    )\n      .map(([key, value]) => ({\n        value: key,\n        count: value,\n      }))\n      .sort((a, b) => d3.descending(a.count, b.count));\n\n  const significantDigits = (n) => {\n    const log10 = Math.log(10);\n\n    // Split decimal\n    let [n1, n2] = String(n).split('.');\n\n    // Handle left of decimal\n    n1 = Math.abs(n1);\n    const d1 = Math.floor(Math.log(n) / log10) + 1;\n\n    // Handle right of decimal\n    const d2 = n2\n      ? n1 > 0\n        ? n2.length\n        : Math.floor(Math.log(+n) / log10) + 1\n      : 0;\n\n    return Math.max(d1 + d2, 1);\n  };\n\n  function clearSorting() {\n    columns.forEach((d) => (d.sort = null));\n  }\n\n  function clearClustering() {\n    columns.forEach((d) => (d.cluster = null));\n  }\n\n  function createColumns(inputData) {\n    columns = inputData.columns.map((d) => ({\n      name: d,\n    }));\n    const group = { name: 'group', type: 'group' };\n    columns.unshift(group);\n    //console.log(columns);\n    // Determine column types and set column info\n    columns\n      .filter((column) => column.type !== 'group')\n      .forEach((column) => {\n        const { name } = column;\n        const values = inputData.map((d) => d[name]);\n        const uniqueValues = Array.from(\n          values.reduce((values, d) => values.add(d), new Set())\n        );\n        const validValues = uniqueValues.filter((value) => !isMissing(value));\n        const numeric = validValues.reduce(\n          (numeric, value) => numeric && !isNaN(value),\n          true\n        );\n        const numbers = numeric ? validValues.map((d) => +d) : null;\n\n        column.uniqueValues = uniqueValues;\n\n        if (numeric) {\n          if (numbers.length === inputData.length) {\n            // Heuristic to check for integer ID type\n            numbers.sort((a, b) => d3.ascending(a, b));\n\n            const isId = numbers.reduce(\n              (isId, d, i, a) => isId && (i === 0 || d === a[i - 1] + 1),\n              true\n            );\n\n            column.type = isId ? 'id' : 'numeric';\n          } else if (\n            numbers.length === 2 &&\n            numbers.includes(0) &&\n            numbers.includes(1)\n          ) {\n            // Treat binary as categorical\n            column.type = 'categorical';\n          } else {\n            column.type = 'numeric';\n          }\n        } else if (uniqueValues.length === inputData.length) {\n          column.type = 'id';\n        } else {\n          column.type = 'categorical';\n        }\n\n        if (column.type === 'numeric') {\n          column.values = values.filter((value) => !isMissing(value));\n          column.extent = d3.extent(numbers);\n          column.maxDigits = d3.max(numbers, significantDigits);\n        } else if (column.type === 'categorical') {\n          column.type = 'categorical';\n          column.counts = getCounts(uniqueValues, values).sort(\n            (a, b) => b.count - a.count\n          );\n          column.uniqueValues = column.counts.map(({ value }) => value);\n        }\n      });\n\n    clearSorting();\n    clearClustering();\n  }\n\n  function createData(inputData) {\n    allData = inputData.map((d, i) => {\n      const v = { ...d };\n\n      // Convert missing and numeric data\n      columns.forEach(({ type, name }) => {\n        const value = v[name];\n\n        if (isMissing(value)) {\n          v[name] = null;\n        } else if (type === 'numeric') {\n          v[name] = +value;\n        }\n      });\n\n      return {\n        initialIndex: i,\n        isCluster: false,\n        cluster: null,\n        pinned: false,\n        expanded: false,\n        values: v,\n      };\n    });\n  }\n\n  // function computeRelations() {\n  //   // Compute relations\n  //   relations = columns.reduce((relations, column1, i, a) => {\n  //     const v1 = allData.map((d) => d.values[column1.name]);\n\n  //     for (let j = i + 1; j < a.length; j++) {\n  //       const column2 = a[j];\n  //       const v2 = allData.map((d) => d.values[column2.name]);\n\n  //       const value =\n  //         column1.type === 'id' || column2.type === 'id'\n  //           ? 0\n  //           : column1.type === 'categorical' && column2.type === 'categorical'\n  //           ? cramersV(v1, v2)\n  //           : column1.type === 'categorical' && column2.type === 'numeric'\n  //           ? categoricalRegression(v1, v2)\n  //           : column1.type === 'numeric' && column2.type === 'categorical'\n  //           ? categoricalRegression(v2, v1)\n  //           : correlation(v1, v2);\n\n  //       relations.push({\n  //         source: column1,\n  //         target: column2,\n  //         value: value,\n  //         magnitude: Math.abs(value),\n  //       });\n  //     }\n\n  //     return relations;\n  //   }, []);\n\n  //   relations.sort((a, b) => d3.ascending(a.magnitude, b.magnitude));\n  // }\n\n  function sortByColumn(column) {\n    const sort = column.sort === 'descending' ? 'ascending' : 'descending';\n\n    clearSorting();\n\n    column.sort = sort;\n  }\n\n  function clusterByColumn(column) {\n    const cluster =\n      column.cluster === null\n        ? 'descending'\n        : column.cluster === 'descending'\n        ? 'ascending'\n        : null;\n\n    clearClustering();\n    clearSorting();\n\n    column.cluster = cluster;\n  }\n\n  function sortData() {\n    const clusterColumn = columns.find(({ cluster }) => cluster);\n\n    const sort = clusterColumn ? clusterColumn.cluster : 'ascending';\n\n    allData.sort((a, b) => {\n      const v1 = clusterColumn ? a.values[clusterColumn.name] : a.initialIndex;\n      const v2 = clusterColumn ? b.values[clusterColumn.name] : b.initialIndex;\n\n      return v1 === v2\n        ? 0\n        : v1 === null\n        ? 1\n        : v2 === null\n        ? -1\n        : d3[sort](v1, v2);\n    });\n  }\n\n  function processData() {\n    sortData();\n\n    // Clear expanded\n    allData.forEach((d) => (d.expanded = false));\n\n    const clusterColumn = columns.find(({ cluster }) => cluster);\n\n    // Initialize categorical and id column counts\n    columns\n      .filter(({ type }) => type !== 'numeric')\n      .forEach((column) => (column.maxCount = 1));\n\n    clustering =\n      applySimplification && clusterColumn && clusterColumn.type !== 'id';\n\n    if (clustering) {\n      const { name, type, cluster: sort } = clusterColumn;\n\n      const values = allData.map((d) => d.values[name]);\n\n      const clusters = (type === 'numeric'\n        ? clusterNumeric(values, sort)\n        : clusterCategorical(values)\n      ).filter((cluster) => cluster.length > 0);\n\n      data = clusters.map((cluster) => {\n        const size = cluster.length;\n\n        // No cluster if only 1\n        if (size === 1) {\n          allData[cluster[0]].cluster = null;\n\n          return allData[cluster[0]];\n        }\n\n        // Create row object\n        const row = {\n          isCluster: true,\n          indeces: cluster,\n          size: size,\n          values: {},\n        };\n\n        // Set cluster object for each item\n        cluster.forEach((i) => (allData[i].cluster = row));\n\n        // Compute info based on column type\n        columns.forEach((column) => {\n          const { name, type, uniqueValues } = column;\n\n          if (type === 'numeric') {\n            const values = cluster.map((i) => allData[i].values[name]);\n\n            if (values.length > 0) {\n              const validValues = values.filter((d) => d !== null);\n\n              row.values[name] =\n                validValues.length > 0\n                  ? {\n                      valid: true,\n                      values: values,\n                      validValues: validValues,\n                      min: d3.min(validValues),\n                      max: d3.max(validValues),\n                      median: d3.median(validValues),\n                      q1: d3.quantile(validValues, 0.25),\n                      q2: d3.quantile(validValues, 0.75),\n                    }\n                  : {\n                      valid: false,\n                      values: values,\n                    };\n            } else {\n              row.values[name] = null;\n            }\n          } else if (type === 'categorical') {\n            const values = cluster.map((i) => allData[i].values[name]);\n\n            if (values.length > 0) {\n              const counts = getCounts(uniqueValues, values);\n\n              column.maxCount = Math.max(column.maxCount, counts[0].count);\n\n              row.values[name] = {\n                counts: counts,\n              };\n            } else {\n              row.values[name] = null;\n            }\n          } else if (type === 'id') {\n            const values = cluster.map((i) => allData[i].values[name]);\n\n            if (values.length > 0) {\n              const counts = values.map((value) => ({\n                value: value,\n                count: 1,\n              }));\n\n              row.values[name] = {\n                counts: counts,\n              };\n            } else {\n              row.values[name] = null;\n            }\n          } else if (type === 'group') {\n            //console.log('group');\n          } else {\n            console.warn('Unknown column type: ' + type);\n          }\n        });\n\n        return row;\n      });\n    } else {\n      if (displayRowNum < [...allData].length) {\n        data = [...allData].slice(0, displayRowNum);\n      } else {\n        data = [...allData];\n        isFullData = true;\n      }\n    }\n\n    function clusterNumeric(values, sort) {\n      const transformValues = (values) => {\n        const base = sort === 'ascending' ? 1 / transformBase : transformBase;\n\n        const valueScale = d3\n          .scaleLinear()\n          .domain(d3.extent(values))\n          .range([0, 1]);\n\n        return values.map((d) => Math.pow(valueScale(d), base));\n      };\n\n      const removeNull = (values) => {\n        // Find first null. Always sorted to the end.\n        const nullIndex = values.indexOf(null);\n        const nullCluster =\n          nullIndex > -1 ? d3.range(nullIndex, values.length) : null;\n        const validValues =\n          nullIndex > -1 ? values.slice(0, nullIndex) : values;\n        const rows = nullCluster ? simplificationRows - 1 : simplificationRows;\n\n        return [validValues, nullCluster, rows];\n      };\n\n      const applyNull = (clusters, nullCluster) => {\n        return nullCluster ? clusters.concat([nullCluster]) : clusters;\n      };\n\n      switch (simplificationMethod) {\n        case 'quantiles': {\n          const [validValues, nullCluster, rows] = removeNull(values);\n          const clusters = clusterQuantiles(validValues, rows);\n          if (sort === 'descending') clusters.reverse();\n\n          return applyNull(clusters, nullCluster);\n        }\n\n        case 'kmeans': {\n          const [validValues, nullCluster, rows] = removeNull(values);\n          const { clusters } = kmeans(\n            validValues.map((d) => [d]),\n            rows\n          );\n          clusters.sort((a, b) => d3[sort](a.centroid[0], b.centroid[0]));\n\n          return applyNull(\n            clusters.map((cluster) => cluster.indeces),\n            nullCluster\n          );\n        }\n\n        case 'gap': {\n          const [validValues, nullCluster, rows] = removeNull(values);\n          const clusters = clusterGap(transformValues(validValues), rows);\n\n          return applyNull(clusters, nullCluster);\n        }\n\n        default:\n          console.log(`Unknown simplification method: ${simplificationMethod}`);\n      }\n    }\n\n    function clusterCategorical(values) {\n      return groupCategories(values);\n    }\n  }\n\n  function sortTable() {\n    const sortColumn = columns.find(({ sort }) => sort !== null);\n\n    if (!sortColumn) return;\n\n    const { name, type, sort, cluster } = sortColumn;\n\n    data.sort((a, b) => {\n      switch (type) {\n        case 'numeric': {\n          const v1 = a.isCluster ? a.values[name].median : a.values[name];\n          const v2 = b.isCluster ? b.values[name].median : b.values[name];\n\n          return v1 === v2\n            ? 0\n            : v1 === null\n            ? 1\n            : v2 === null\n            ? -1\n            : d3[sort](v1, v2);\n        }\n\n        case 'categorical': {\n          if (cluster) {\n            const v1 = a.isCluster\n              ? a.values[name].counts[0].count\n              : a.values[name]\n              ? 1\n              : null;\n            const v2 = b.isCluster\n              ? b.values[name].counts[0].count\n              : b.values[name]\n              ? 1\n              : null;\n\n            return v1 === v2\n              ? 0\n              : v1 === null\n              ? 1\n              : v2 === null\n              ? -1\n              : d3[sort](v1, v2);\n          } else {\n            const v1 = a.isCluster\n              ? a.values[name].counts[0].count / a.size\n              : a.values[name];\n            const v2 = b.isCluster\n              ? b.values[name].counts[0].count / b.size\n              : b.values[name];\n\n            return v1 === v2\n              ? 0\n              : v1 === null\n              ? 1\n              : v2 === null\n              ? -1\n              : d3[sort](v1, v2);\n          }\n        }\n\n        case 'id': {\n          const v1 = a.isCluster\n            ? a.values[name].counts[0].value\n            : a.values[name];\n          const v2 = b.isCluster\n            ? b.values[name].counts[0].value\n            : b.values[name];\n\n          return v1 === v2\n            ? 0\n            : v1 === null\n            ? 1\n            : v2 === null\n            ? -1\n            : d3[sort](v1, v2);\n        }\n\n        default:\n          console.log(`Unknown column type ${type}`);\n          return 0;\n      }\n    });\n  }\n\n  function drawTable() {\n    const px = paddingX + 'px';\n    const py = paddingY + 'px';\n\n    const clusterIcon = (cluster) =>\n      cluster === 'ascending' ? '⊻' : cluster === 'descending' ? '⊼' : '≡';\n    //cluster === 'ascending' ? '⇟' :\n    //cluster === 'descending' ? '⇞' :\n    //'≡'\n\n    const sortIcon = (sort) => (sort === 'ascending' ? '⇣' : '⇡');\n\n    const clusterColumn = columns.find(({ cluster }) => cluster);\n    const showSortButtons =\n      applySimplification &&\n      clusterColumn &&\n      clusterColumn.type === 'categorical';\n\n    // Reset svg widths for proper column width sizing\n    table.selectAll('svg').attr('width', 0);\n\n    drawHeader();\n    drawBody();\n    applyVisualizationMode();\n    highlight();\n    drawLinks();\n\n    function drawHeader() {\n      const info = (column) => {\n        switch (column.type) {\n          case 'numeric': {\n            // Display range and median for clusters\n            const min = column.extent[0];\n            const max = column.extent[1];\n\n            return min === max\n              ? min\n              : `<div class='range'><div>${min}</div><div class='dash'><hr /></div><div>${max}</div>`;\n          }\n\n          case 'categorical': {\n            return `<div>${column.uniqueValues.length} categories</div>`;\n          }\n\n          case 'id': {\n            return `<div>${column.uniqueValues.length} unique values<div>`;\n          }\n\n          default:\n            return null;\n        }\n      };\n\n      // Header elements\n      const th = table\n        .select('thead')\n        .select('tr')\n        .selectAll('th')\n        .data(columns, (d) => d.name)\n        .join((enter) => {\n          const th = enter.append('th');\n          // enter.each(function(column) {\n          //   if (column.type === 'group') {\n          //     d3.select(this)\n          //       .select('th')\n          //       .style('visibility', 'hidden');\n          //   }\n          // });\n          const div = th.each(function(column) {\n            d3.select(this)\n              .selectAll('.headerDiv')\n              .data(column.type === 'group' ? [] : [column])\n              .join((enter) => {\n                const div = enter.append('div').attr('class', 'headerDiv');\n                //console.log(div);\n                const nameDiv = div.append('div').attr('class', 'nameDiv');\n                nameDiv.append('div').text((d) => d.name);\n                nameDiv\n                  .append('button')\n                  .attr('class', 'headerButton sortButton')\n                  .on('click', (evt, d) => {\n                    sortByColumn(d);\n                    sortTable();\n                    drawTable();\n                  });\n\n                nameDiv\n                  .append('button')\n                  .attr('class', 'headerButton clusterButton')\n                  .style('font-weight', 'bold')\n                  .on('click', (evt, d) => {\n                    clusterByColumn(d);\n                    processData();\n                    sortTable();\n                    drawTable();\n\n                    dispatcher.call('clusterByColumn', this, d);\n                  });\n\n                div\n                  .append('div')\n                  .attr('class', 'info')\n                  .html(info);\n\n                div.each(function(column) {\n                  d3.select(this)\n                    .selectAll('.visDiv')\n                    .data(column.type === 'id' ? [] : [column])\n                    .join((enter) => {\n                      const div = enter.append('div').attr('class', 'visDiv');\n\n                      div.append('svg');\n\n                      return div;\n                    });\n                });\n\n                th.append('div').attr('class', 'highlight');\n\n                return div;\n              });\n          });\n          //console.log(div);\n\n          //const div = th.append('div').attr('class', 'headerDiv');\n\n          //const nameDiv = div.append('div').attr('class', 'nameDiv');\n\n          //nameDiv.append('div').text((d) => d.name);\n\n          // nameDiv\n          //   .append('button')\n          //   .attr('class', 'headerButton sortButton')\n          //   .on('click', (evt, d) => {\n          //     sortByColumn(d);\n          //     sortTable();\n          //     drawTable();\n          //   });\n\n          // nameDiv\n          //   .append('button')\n          //   .attr('class', 'headerButton clusterButton')\n          //   .style('font-weight', 'bold')\n          //   .on('click', (evt, d) => {\n          //     clusterByColumn(d);\n          //     processData();\n          //     sortTable();\n          //     drawTable();\n\n          //     dispatcher.call('clusterByColumn', this, d);\n          //   });\n\n          // div\n          //   .append('div')\n          //   .attr('class', 'info')\n          //   .html(info);\n\n          // div.each(function(column) {\n          //   d3.select(this)\n          //     .selectAll('.visDiv')\n          //     .data(column.type === 'id' ? [] : [column])\n          //     .join((enter) => {\n          //       const div = enter.append('div').attr('class', 'visDiv');\n\n          //       div.append('svg');\n\n          //       return div;\n          //     });\n          // });\n\n          // th.append('div').attr('class', 'highlight');\n\n          return th;\n        })\n        .classed('active', (d) => d.cluster !== null)\n        .style('padding-left', px)\n        .style('padding-right', px)\n        .style('padding-top', py)\n        .style('padding-bottom', py);\n\n      // Update buttons\n      th.select('.clusterButton')\n        .classed('active', (d) => d.cluster !== null)\n        .text((d) => clusterIcon(d.cluster));\n\n      th.select('.sortButton')\n        .classed('active', (d) => d.sort !== null)\n        .style('visibility', (d) => (showSortButtons ? null : 'hidden'))\n        .text((d) => sortIcon(d.sort));\n\n      // Separate out the visualization update so we have an accurate width after rendering textual elements\n      table\n        .select('thead')\n        .selectAll('tr')\n        .each(function() {\n          d3.select(this)\n            .selectAll('th')\n            .each(function(column) {\n              if (column.type === 'group') {\n                var width = 5;\n              } else {\n                width = d3\n                  .select(this)\n                  .select('.nameDiv')\n                  .node().clientWidth;\n              }\n              const height = 10;\n\n              // Visualization\n              switch (column.type) {\n                case 'numeric': {\n                  const svg = d3\n                    .select(this)\n                    .select('.visDiv svg')\n                    .attr('width', width)\n                    .attr('height', height);\n\n                  const xScale = d3\n                    .scaleLinear()\n                    .domain(column.extent)\n                    .rangeRound([0, width]);\n\n                  const bin = d3.bin().domain(xScale.domain());\n\n                  const bins = bin(column.values);\n\n                  const yScale = d3\n                    .scaleLinear()\n                    .domain([0, d3.max(bins, (d) => d.length)])\n                    .range([height, 0]);\n\n                  // Histogram\n                  svg\n                    .selectAll('rect')\n                    .data(bins)\n                    .join((enter) => {\n                      const rect = enter.append('rect').style('fill', '#aaa');\n\n                      rect.append('title');\n\n                      return rect;\n                    })\n                    .attr('x', (d) => xScale(d.x0))\n                    .attr('y', (d) => yScale(d.length))\n                    .attr('width', (d) => xScale(d.x1) - xScale(d.x0) - 1)\n                    .attr('height', (d) => yScale(0) - yScale(d.length))\n                    //.select('title')\n                    //.text((d) => `${d.x0}-${d.x1}: ${d.length}`);\n                    .attr(\n                      'data-tippy-content',\n                      (d) => `${d.x0}-${d.x1}: ${d.length}`\n                    )\n                    .call((s) => tippy(s.nodes()));\n\n                  break;\n                }\n\n                case 'categorical': {\n                  const svg = d3\n                    .select(this)\n                    .select('.visDiv svg')\n                    .attr('width', width)\n                    .attr('height', height);\n\n                  const colorScale = d3\n                    .scaleOrdinal()\n                    .domain(column.uniqueValues)\n                    .range(d3.schemeTableau10);\n\n                  const xScale = d3\n                    .scaleBand()\n                    .domain(column.uniqueValues)\n                    .range([0, width]);\n\n                  const yScale = d3\n                    .scaleLinear()\n                    .domain([0, d3.max(column.counts, (d) => d.count)])\n                    .range([height, 0]);\n\n                  // Bars\n                  svg\n                    .selectAll('rect')\n                    .data(column.counts)\n                    .join((enter) => {\n                      const rect = enter.append('rect');\n                      rect.append('title');\n                      return rect;\n                    })\n                    .attr('x', (d) => xScale(d.value))\n                    .attr('y', (d) => yScale(d.count))\n                    .attr('width', xScale.bandwidth())\n                    .attr('height', (d) => yScale(0) - yScale(d.count))\n                    .attr('fill', (d) => colorScale(d.value))\n                    //.select('title')\n                    //.text((d) => `${d.value}: ${d.count}`);\n                    .attr('data-tippy-content', (d) => `${d.value}: ${d.count}`)\n                    .call((s) => tippy(s.nodes()));\n\n                  break;\n                }\n\n                case 'id':\n                  d3.select(this)\n                    .select('.visDiv svg')\n                    .attr('width', width)\n                    .attr('height', height);\n\n                  break;\n\n                case 'group': {\n                  d3.select(this)\n                    .select('.visDiv svg')\n                    .attr('width', width)\n                    .attr('height', height);\n\n                  break;\n                }\n                default:\n                  console.log(`Unknown column type ${column.type}`);\n              }\n            });\n        });\n    }\n\n    function drawBody() {\n      const text = (type, v, isCluster, maxDigits) => {\n        switch (type) {\n          case 'numeric': {\n            if (v !== null && isCluster && v.valid) {\n              // Display range and median for clusters\n              const median = d3.format(`.${maxDigits}r`)(v.median);\n\n              return v.min === v.max\n                ? median\n                : `<div class='range'><div class='extrema'>${v.min}</div><div>${median}</div><div class='extrema'>${v.max}<div>`;\n            } else {\n              return v === null || isCluster ? '' : v;\n            }\n          }\n\n          case 'categorical': {\n            if (v !== null && isCluster) {\n              // Display top category and number of other categories\n              const top = v.counts[0];\n              const others = v.counts.slice(1).filter((d) => d.count > 0);\n              const s = others.map((d) => `${d.value} (${d.count})`).join(', ');\n\n              const topString =\n                `<div>${top.value}` +\n                (top.count > 1 ? ` (${top.count})</div>` : '<div>');\n\n              const othersString =\n                others.length === 1\n                  ? `<div class='others' title=\"${s}\">and 1 other category</div>`\n                  : others.length > 1\n                  ? `<div class='others' title=\"${s}\">and ${others.length} other categories</div>`\n                  : `<div class='others none'>dummy text</div>`;\n\n              return `<div class='categories'>${topString}${othersString}</div>`;\n            } else {\n              return v === null ? '' : v;\n            }\n          }\n\n          case 'id': {\n            if (v !== null && isCluster) {\n              // Display first id and number of other ids\n              const top = v.counts[0];\n              const others = v.counts.slice(1).filter((d) => d.count > 0);\n              const s = others.map((d) => d.value).join(', ');\n\n              const topString = `<div>${top.value}<div>`;\n\n              const othersString =\n                others.length === 1\n                  ? `<div class='others' title=\"${s}\">and 1 other</div>`\n                  : others.length > 1\n                  ? `<div class='others' title=\"${s}\">and ${others.length} others</div>`\n                  : '';\n\n              return `<div class='categories'>${topString}${othersString}</div>`;\n            } else {\n              return v === null ? '' : v;\n            }\n          }\n\n          case 'cluster': {\n            return `<div class='clusterSize'>n = ${v}</div>`;\n          }\n\n          case 'group': {\n            return `<div class='group' align=\"center\">${v}</div>`;\n          }\n\n          default:\n            return null;\n        }\n      };\n\n      // Insert pinned and expanded rows\n      const expandedData = [];\n\n      const sortColumn = columns.find(({ sort }) => sort !== null);\n      const clusterColumn = columns.find(({ cluster }) => cluster !== null);\n\n      data.forEach((row) => {\n        expandedData.push(row);\n\n        if (row.isCluster) {\n          const insert = row.indeces\n            .map((i) => allData[i])\n            .filter((d) => d.pinned || d.expanded);\n\n          const name = sortColumn ? sortColumn.name : clusterColumn.name;\n          const sort = sortColumn ? sortColumn.sort : clusterColumn.cluster;\n\n          insert.sort((a, b) => {\n            const v1 = a.values[name];\n            const v2 = b.values[name];\n\n            return v1 === null && v2 === null\n              ? 0\n              : v1 === null\n              ? 1\n              : v2 === null\n              ? -1\n              : d3[sort](v1, v2);\n          });\n\n          expandedData.push(...insert);\n        }\n      });\n\n      const maxSize = d3.max(data, (d) => (d.isCluster ? d.size : 1));\n\n      table\n        .select('tbody')\n        .selectAll('tr')\n        .data(expandedData)\n        .join('tr')\n        //.style('cursor', d => d.isCluster ? allData[d.indeces[0]].expanded ? 'zoom-out' : 'zoom-in': 'pointer')\n        .style('cursor', 'pointer')\n        .each(function(d, row) {\n          d3.select(this)\n            .selectAll('td')\n            .data(columns, (d) => d.name)\n            .join((enter) => {\n              const td = enter.append('td');\n\n              const div = td.append('div').attr('class', 'cellDiv');\n\n              const valueDiv = div.append('div').attr('class', 'valueDiv');\n\n              valueDiv\n                .append('div')\n                .attr('class', 'textDiv')\n                .classed('notId', (d) => d.type !== 'id')\n                .style('text-align', (d) =>\n                  d.type === 'numeric' ? 'center' : 'left'\n                );\n\n              valueDiv.append('div').attr('class', 'visDiv');\n\n              return td;\n            })\n            .classed('active', (d) => d.cluster !== null)\n            .style('padding-left', px)\n            .style('padding-right', px)\n            .style('padding-top', py)\n            .style('padding-bottom', py)\n            .each(function(column, idx) {\n              // Text\n\n              const v = d.values[column.name];\n\n              const td = d3\n                .select(this)\n                .classed('expanded', d.expanded)\n                .classed('pinned', d.pinned);\n\n              // clearer grouping indication for pinned rows\n              const isPinned = d3.select(this).classed('pinned');\n              const isExpanded = d3.select(this).classed('expanded');\n              if (\n                applySimplification &&\n                idx === 1 &&\n                (isExpanded || isPinned)\n              ) {\n                td.select('.valueDiv .textDiv').html(\n                  text(column.type, '&emsp;' + v, d.isCluster, column.maxDigits)\n                );\n              } else if (\n                applySimplification &&\n                idx === 0 &&\n                (isExpanded || isPinned)\n              ) {\n                if (isPinned) {\n                  td.select('.valueDiv').html(\n                    text(\n                      column.type,\n                      '\\u25C6\\uFE0E',\n                      d.isCluster,\n                      column.maxDigits\n                    ) // BLACK DIAMOND\n                  );\n                } else {\n                  td.select('.valueDiv').html(\n                    text(\n                      column.type,\n                      '\\u25C7\\uFE0E',\n                      d.isCluster,\n                      column.maxDigits\n                    ) // WHITE DIAMOND\n                  );\n                }\n              } else if (idx === 0) {\n                //console.log(allData);\n                //console.log(d);\n                // const val = td\n                //   .select('.valueDiv .group')\n                //   .nodes()\n                //   .map(function(d) {\n                //     return d.innerHTML;\n                //   });\n                //console.log(val);\n                //console.log(val[0] === '\\u25BC');\n                if (d.isCluster) {\n                  var isExpanded_target = false;\n                  d.indeces.forEach((i) => {\n                    isExpanded_target = allData[i].expanded;\n                  });\n                  if (isExpanded_target) {\n                    td.select('.valueDiv').html(\n                      text(\n                        column.type,\n                        '\\u25BC\\uFE0E',\n                        d.isCluster,\n                        column.maxDigits\n                      ) // BLACK DOWN-POINTING TRIANGLE\n                    );\n                  } else {\n                    td.select('.valueDiv').html(\n                      text(\n                        column.type,\n                        '\\u25B6\\uFE0E',\n                        d.isCluster,\n                        column.maxDigits\n                      ) //BLACK RIGHT-POINTING TRIANGLE\n                    );\n                  }\n                } else {\n                  td.select('.valueDiv').html(\n                    text(\n                      column.type,\n                      '\\u25B6\\uFE0E',\n                      d.isCluster,\n                      column.maxDigits\n                    ) //BLACK RIGHT-POINTING TRIANGLE\n                  );\n                }\n              } else {\n                td.select('.valueDiv .textDiv').html(\n                  text(column.type, v, d.isCluster, column.maxDigits)\n                );\n              }\n\n              td.select('.cellDiv')\n                .selectAll('.clusterDiv')\n                .data(clustering && column.cluster !== null ? [v] : [])\n                .join((enter) => {\n                  const div = enter.append('div').attr('class', 'clusterDiv');\n\n                  div.append('div').attr('class', 'textDiv notId');\n\n                  div.append('div').attr('class', 'visDiv');\n\n                  return div;\n                })\n                .select('.textDiv')\n                .html(\n                  d.expanded ? '' : text('cluster', d.isCluster ? d.size : 1)\n                );\n            });\n        });\n\n      // Separate out the visualization update so we have an accurate width after rendering textual elements\n      table\n        .select('tbody')\n        .selectAll('tr')\n        .each(function(d, i) {\n          d3.select(this)\n            .selectAll('td')\n            .each(function(column) {\n              // Get column width\n              if (i === 0) {\n                column.width = d3\n                  .select(this)\n                  .select('.valueDiv')\n                  .node().clientWidth;\n              }\n\n              const v = d.values[column.name];\n\n              const height = 10;\n\n              // Visualization\n              switch (column.type) {\n                case 'numeric':\n                  d3.select(this)\n                    .select('.valueDiv .visDiv')\n                    .selectAll('svg')\n                    .data(v === null || (d.isCluster && !v.valid) ? [] : [v])\n                    .join('svg')\n                    .attr('width', column.width)\n                    .attr('height', height)\n                    .each(function(v) {\n                      const svg = d3.select(this);\n\n                      const height = 6;\n                      const y = height / 2;\n                      const r = height / 2;\n                      const w1 = r;\n                      const w2 = Math.max(Math.floor(w1 / 2), 1);\n\n                      const colorScale = d3\n                        .scaleLinear()\n                        .domain([\n                          column.extent[0],\n                          (column.extent[0] + column.extent[1]) / 2,\n                          column.extent[1],\n                        ])\n                        .range(['#2171b5', '#999', '#cb181d']);\n\n                      const xScale = d3\n                        .scaleLinear()\n                        .domain(column.extent)\n                        .range([r, column.width - r]);\n\n                      // Quartile line\n                      svg\n                        .selectAll('line')\n                        .data(\n                          d.isCluster\n                            ? [\n                                [v.min, v.max, v.median],\n                                [v.q1, v.q2, v.median],\n                              ]\n                            : []\n                        )\n                        .join((enter) =>\n                          enter\n                            .append('line')\n                            .style('margin', 0)\n                            .style('padding', 0)\n                            .style('stroke-linecap', 'round')\n                        )\n                        .attr('x1', (d) => xScale(d[0]))\n                        .attr('y1', y)\n                        .attr('x2', (d) => xScale(d[1]))\n                        .attr('y2', y)\n                        .style('stroke', (d) => colorScale(d[2]))\n                        .style('stroke-width', (d, i) => (i === 0 ? w2 : w1));\n\n                      // Median\n                      svg\n                        .selectAll('circle')\n                        .data(d.isCluster ? [v.median] : [v])\n                        .join('circle')\n                        .attr('cx', (d) => xScale(d))\n                        .attr('cy', y)\n                        .attr('r', r)\n                        .style('fill', (d) => colorScale(d));\n                    });\n\n                  break;\n\n                case 'categorical':\n                  d3.select(this)\n                    .select('.valueDiv .visDiv')\n                    .selectAll('svg')\n                    .data(v === null ? [] : [v])\n                    .join('svg')\n                    .attr('width', column.width)\n                    .attr('height', height)\n                    .each(function(v) {\n                      const svg = d3.select(this);\n\n                      const height = 10;\n\n                      const counts = v.counts\n                        ? v.counts\n                        : [\n                            {\n                              value: v,\n                              count: 1,\n                            },\n                          ];\n\n                      const colorScale = d3\n                        .scaleOrdinal()\n                        .domain(column.uniqueValues)\n                        .range(d3.schemeTableau10);\n\n                      const xScale = d3\n                        .scaleBand()\n                        .domain(column.uniqueValues)\n                        .range([0, column.width]);\n\n                      const yScale = d3\n                        .scaleLinear()\n                        .domain(\n                          categoryScaling === 'row'\n                            ? [0, d3.max(counts, (d) => d.count)]\n                            : [0, column.maxCount]\n                        )\n                        .range([height, 0]);\n\n                      // Bars\n                      svg\n                        .selectAll('rect')\n                        .data(counts)\n                        .join((enter) => {\n                          const rect = enter.append('rect');\n                          rect.append('title');\n                          return rect;\n                        })\n                        .attr('x', (d) => xScale(d.value))\n                        .attr('y', (d) => yScale(d.count))\n                        .attr('width', xScale.bandwidth())\n                        .attr('height', (d) => yScale(0) - yScale(d.count))\n                        .attr('fill', (d) => colorScale(d.value))\n                        // .select('title')\n                        // .text((d) => `${d.value}: ${d.count}`);\n                        .attr(\n                          'data-tippy-content',\n                          (d) => `${d.value}: ${d.count}`\n                        )\n                        .call((s) => tippy(s.nodes()));\n                    });\n\n                  break;\n\n                case 'id':\n                  break;\n\n                case 'group':\n                  break;\n\n                default:\n                  console.log(`Unknown column type ${column.type}`);\n              }\n\n              // Cluster size\n              const clusterWidth = 30;\n\n              d3.select(this)\n                .select('.clusterDiv .visDiv')\n                .selectAll('svg')\n                .data([d])\n                .join('svg')\n                .attr('width', clusterWidth)\n                .attr('height', height)\n                .each(function(d) {\n                  const svg = d3.select(this);\n\n                  const height = 5;\n\n                  const size = d.isCluster ? d.size : 1;\n\n                  const xScale = d3\n                    .scaleLinear()\n                    .domain([0, maxSize])\n                    .range([0, clusterWidth]);\n\n                  // Bar\n                  svg\n                    .selectAll('rect')\n                    .data(d.expanded ? [] : [d])\n                    .join('rect')\n                    .attr('width', xScale(size))\n                    .attr('height', height)\n                    .attr('fill', '#bbb');\n                });\n            })\n            .on('mouseover', function(evt, column) {\n              table\n                .selectAll('th')\n                .filter((d) => d === column)\n                .select('.highlight')\n                .style('visibility', null);\n\n              if (visualizationMode === 'interactive') {\n                table\n                  .selectAll('td')\n                  .filter((d) => d === column || d.cluster !== null)\n                  .selectAll('.textDiv.notId')\n                  .style('visibility', null);\n              }\n\n              linkSvg\n                .selectAll('path')\n                .style('visibility', (d) =>\n                  d.source === column || d.target === column ? null : 'hidden'\n                );\n            })\n            .on('mouseout', function(evt, column) {\n              table\n                .selectAll('th')\n                .filter((d) => d === column)\n                .select('.highlight')\n                .style('visibility', (d) =>\n                  d.cluster !== null ? null : 'hidden'\n                );\n\n              if (visualizationMode === 'interactive') {\n                table\n                  .selectAll('td')\n                  .filter((d) => d === column || d.cluster !== null)\n                  .selectAll('.textDiv.notId')\n                  .style('visibility', 'hidden');\n              }\n\n              linkSvg.selectAll('path').style('visibility', null);\n            });\n        })\n        .on('mouseover', function(evt, row) {\n          table\n            .select('tbody')\n            .selectAll('tr')\n            .filter((d) => d === row)\n            .selectAll('td')\n            .classed('mouseOver', true);\n        })\n        .on('mouseout', function(evt, row) {\n          table\n            .select('tbody')\n            .selectAll('tr')\n            .filter((d) => d === row)\n            .selectAll('td')\n            .classed('mouseOver', false);\n        })\n        .on('click', function(evt, row) {\n          //var isExpanded = false;\n          if (row.isCluster) {\n            row.indeces.forEach((i) => {\n              allData[i].expanded = !allData[i].expanded;\n            });\n            //console.log(row);\n            //row.isExpanded = allData[i].expanded;\n            //isExpanded = allData[row].expanded;\n            drawTable();\n            // for the triangle indicators\n            // if (isExpanded) {\n            //   table\n            //     .select('tbody')\n            //     .selectAll('tr')\n            //     .filter((d) => d === row)\n            //     .select('.valueDiv .group')\n            //     .text('▼');\n            // } else {\n            //   table\n            //     .select('tbody')\n            //     .selectAll('tr')\n            //     .filter((d) => d === row)\n            //     .select('.valueDiv .group')\n            //     .text('▶');\n            // }\n          } else {\n            row.pinned = !row.pinned;\n\n            if (row.pinned) {\n              // Already shown\n              d3.select(this)\n                .selectAll('td')\n                .classed('pinned', true);\n\n              drawTable();\n            } else {\n              // Need to hide\n              drawTable();\n            }\n          }\n        });\n    }\n\n    function highlight() {\n      // Update border\n      const height = table.node() ? table.node().clientHeight - 4 : 0;\n\n      table\n        .selectAll('th')\n        .select('.highlight')\n        .style('height', `${height}px`)\n        .style('visibility', (d) => (d.cluster !== null ? null : 'hidden'));\n    }\n  }\n\n  function drawLinks() {\n    if (!table.node()) return;\n\n    // linkSvg.style('display', showLinks ? null : 'none');\n    // if (!showLinks) return;\n\n    // computeRelations();\n\n    if (relations.length === 0 && !isCalculating) {\n      if (window.Worker) {\n        // instantiate worker\n        isCalculating = true;\n        const computeRelationWorker = new Worker();\n\n        // post data to worker\n        computeRelationWorker.postMessage({\n          relations,\n          columns,\n          allData,\n        });\n        // if received data from worker\n        computeRelationWorker.onmessage = function(e) {\n          if (e && e.data) {\n            const { relations: re, columns: cols } = e.data;\n            relations = re;\n            columns = cols;\n            //console.log('Message received from worker');\n            isCalculating = false;\n            dispatcher_calcRel.call('CalculateRelations', this, isCalculating);\n          }\n        };\n      } else {\n        console.log(\"Your browser doesn't support web worker\");\n      }\n    }\n\n    linkSvg.style('display', showLinks ? null : 'none');\n    if (!showLinks) return;\n\n    const width = table.node().offsetWidth;\n    const height = 200;\n    const aspect = width / height;\n\n    const offset = table.node().getBoundingClientRect().x;\n\n    table\n      .selectAll('th')\n      .nodes()\n      .forEach((d, i) => {\n        const { left, right } = d.getBoundingClientRect();\n\n        columns[i].pos = left + (right - left) / 2 - offset;\n      });\n\n    relations.forEach((d) => {\n      const x1 = d.source.pos;\n      const x2 = d.target.pos;\n\n      const y = height - (x2 - x1) / aspect;\n\n      const xi = d3.interpolateNumber(x1, x2);\n      const yi = d3.interpolateNumber(height, y);\n\n      d.points = [\n        { x: xi(0), y: yi(0) },\n        { x: xi(0.1), y: yi(0.5) },\n        { x: xi(0.5), y: yi(1) },\n        { x: xi(0.9), y: yi(0.5) },\n        { x: xi(1), y: yi(0) },\n      ];\n    });\n\n    const line = d3\n      .line()\n      .x((d) => d.x)\n      .y((d) => d.y)\n      .curve(d3.curveBasis);\n\n    const colorScale = d3.scaleSequential(d3.interpolateRdBu).domain([1, -1]);\n\n    const opacityScale = d3\n      .scaleLinear()\n      .domain([0, 1])\n      .range([0, 1]);\n\n    const widthScale = d3\n      .scaleLinear()\n      .domain([0, 1])\n      .range([0, 5]);\n\n    linkSvg\n      .attr('width', width)\n      .attr('height', height)\n      .selectAll('path')\n      .data(relations)\n      .join('path')\n      .attr('d', (d) => line(d.points))\n      .style('fill', 'none')\n      .style('stroke', (d) => colorScale(d.value))\n      .style('stroke-opacity', (d) => opacityScale(d.magnitude))\n      .style('stroke-width', (d) => widthScale(d.magnitude))\n      .style('stroke-linecap', 'round')\n      .append('title')\n      .text((d) => d.value);\n  }\n\n  function applyVisualizationMode() {\n    const td = table.selectAll('td');\n    td.selectAll('.textDiv.notId').style('visibility', textVisibility());\n    td.selectAll('svg').style('visibility', visVisibility());\n  }\n\n  digestable.applySimplification = function(_) {\n    if (!arguments.length) return applySimplification;\n    applySimplification = _;\n    const clusterColumn = columns.find(({ cluster }) => cluster !== null);\n    if (clusterColumn && clusterColumn.type !== 'id') {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  digestable.simplificationMethod = function(_) {\n    if (!arguments.length) return simplificationMethod;\n    simplificationMethod = _;\n    if (clustering) {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  digestable.simplificationAmount = function(_) {\n    if (!arguments.length) return simplificationAmount;\n    simplificationAmount = _;\n    if (clustering) {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  digestable.simplificationRows = function(_) {\n    if (!arguments.length) return simplificationRows;\n    simplificationRows = _;\n    if (clustering) {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  digestable.transformBase = function(_) {\n    if (!arguments.length) return transformBase;\n    transformBase = _;\n    if (clustering) {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  // unselect function\n  digestable.unselect = function() {\n    allData.forEach((row) => {\n      row.pinned = false;\n    });\n    drawTable();\n    return digestable;\n  };\n\n  digestable.visualizationMode = function(_) {\n    if (!arguments.length) return visualizationMode;\n    visualizationMode = _;\n    applyVisualizationMode();\n    return digestable;\n  };\n\n  digestable.showLinks = function(_) {\n    if (!arguments.length) return showLinks;\n    showLinks = _;\n    drawTable();\n    return digestable;\n  };\n\n  digestable.categoryScaling = function(_) {\n    if (!arguments.length) return categoryScaling;\n    categoryScaling = _;\n    drawTable();\n    return digestable;\n  };\n\n  digestable.updateLinks = function() {\n    drawLinks();\n    return digestable;\n  };\n\n  // For registering event callbacks\n  digestable.on = function() {\n    const value = dispatcher.on.apply(dispatcher, arguments);\n    return value === dispatcher ? digestable : value;\n  };\n\n  // For registering event callbacks\n  digestable.onCalcRel = function() {\n    const value = dispatcher_calcRel.on.apply(dispatcher_calcRel, arguments);\n    return value === dispatcher_calcRel ? digestable : value;\n  };\n\n  function loadMoreData(rowNum) {\n    displayRowNum += parseInt(rowNum);\n    //console.log(displayRowNum);\n    if (displayRowNum < [...allData].length) {\n      data = [...allData].slice(0, displayRowNum);\n    } else {\n      isFullData = true;\n      data = [...allData];\n    }\n    drawTable();\n  }\n\n  digestable.loadMore = function(rowNum) {\n    loadMoreData(rowNum);\n    //console.log('digestable test');\n    return digestable;\n  };\n\n  digestable.isFullData = function() {\n    return isFullData;\n  };\n\n  digestable.fullDataLength = function() {\n    return [...allData].length;\n  };\n\n  digestable.displayRowNum = function() {\n    return displayRowNum;\n  };\n\n  return digestable;\n};\n","import * as d3 from 'd3';\n\nexport const clusterQuantiles = (values, n) => {\n  const range = d3.range(n);\n\n  const scale = d3.scaleQuantile()\n    .domain(values)\n    .range(range);\n\n  return values.reduce((clusters, value, i) => {\n    clusters[scale(value)].push(i);\n    return clusters;\n  }, range.map(() => []));\n};","import * as d3 from 'd3';\n\nexport const clusterGap = (values, numRows) => {\n  const gaps = d3.pairs(values).map((d, i) => ({ value: Math.abs(d[1] - d[0]), index: i }));\n\n  gaps.sort((a, b) => {\n    return a.value === b.value ? d3.ascending(a.index, b.index) : d3.descending(a.value, b.value);\n  });\n\n  const clusters = gaps.slice(0, numRows - 1).map(gap => gap.index);\n\n  clusters.sort(d3.ascending);\n  clusters.unshift(-1);\n  clusters.push(values.length - 1);\n  \n  return d3.pairs(clusters).map(d => d3.range(d[0] + 1, d[1] + 1));\n};","export const groupCategories = values => {\n  return values.reduce((clusters, value, i, a) => {\n    if (i === 0) {\n      clusters.push([i]);\n    }\n    else {\n      if (value === a[i - 1]) {\n        clusters[clusters.length -1].push(i);\n      }\n      else {\n        clusters.push([i]);\n      }\n    }\n\n    return clusters;\n  }, []);\n}","import { Button, Form, Row, Col } from 'react-bootstrap';\nimport { useState } from 'react';\nconst Footer = ({\n  loadMore,\n  isFullData,\n  addrowNum,\n  setAddRowNum,\n  max,\n  displayRowNum,\n  refreshDisplayRowNum,\n}) => {\n  // handle form submit\n  const [displayRowNumAct, setDisplayRowNumAct] = useState(\n    displayRowNum || 100\n  );\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n    loadMore(addrowNum);\n    if (refreshDisplayRowNum() > max) {\n      setDisplayRowNumAct(max);\n    } else {\n      setDisplayRowNumAct(refreshDisplayRowNum());\n    }\n    setAddRowNum(100);\n  };\n  return (\n    <div\n      style={{\n        padding: '2rem',\n        display: 'flex',\n        justifyContent: 'center',\n        position: 'sticky',\n        left: '0',\n        zIndex: '3',\n        backgroundColor: 'white',\n      }}\n    >\n      <Form onSubmit={onFormSubmit}>\n        <Row>\n          <Col xs='auto'>\n            <Form.Text\n              style={{ position: 'relative', top: '.5rem', fontSize: '1rem' }}\n            >\n              Showing {displayRowNumAct} of {max} rows\n            </Form.Text>\n          </Col>\n          <Col xs='auto'>\n            <Button\n              disabled={isFullData}\n              // style={{\n              //   marginLeft: '1rem',\n              // }}\n              type='submit'\n            >\n              {isFullData ? 'End of Data' : `Load ${addrowNum} more rows`}\n            </Button>\n          </Col>\n          <Col xs='auto'>\n            <Form.Control\n              //style={{ width: '8rem' }}\n              type='number'\n              //placeholder='more rows'\n              min='1'\n              max={max}\n              value={addrowNum}\n              onChange={(e) => setAddRowNum(e.target.value)}\n              disabled={isFullData}\n            />\n          </Col>\n        </Row>\n      </Form>\n    </div>\n  );\n};\nexport default Footer;\n","import { useContext, useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { SimplifyContext, VisualizationContext } from '../../contexts';\nimport { useScrollHook } from '../../hooks';\nimport { digestable } from '../../digestable';\nimport Footer from './Footer';\n//import { index } from 'd3';\n\nexport const TableWrapper = ({ data }) => {\n  const [\n    { apply, method, amount, rows, transformBase, unselect },\n    simplifyDispatch,\n  ] = useContext(SimplifyContext);\n  const [\n    { mode, showLinks, categoryScaling },\n    visualizationDispatch,\n  ] = useContext(VisualizationContext);\n  const divRef = useRef();\n  const digestableRef = useRef();\n  const OuterDivRef = useRef();\n\n  // parameters for load more\n  const [isFullData, setIsFullData] = useState(false);\n  const [addrowNum, setAddRowNum] = useState(100);\n  // Scroll callback\n  const onScroll = useScrollHook(\n    () => {\n      if (digestableRef.current) {\n        digestableRef.current.updateLinks();\n      }\n    },\n    OuterDivRef,\n    'horizontal'\n  );\n\n  // Create visualization\n  useEffect(() => {\n    if (!digestableRef.current) {\n      digestableRef.current = digestable()\n        .applySimplification(apply)\n        .simplificationMethod(method.name)\n        .simplificationAmount(amount)\n        .simplificationRows(rows)\n        .transformBase(transformBase)\n        .visualizationMode(mode)\n        .categoryScaling(categoryScaling)\n        .on('clusterByColumn', (column) => {\n          simplifyDispatch({\n            type: 'setColumnInfo',\n            columnType: column.type,\n            unique: column.uniqueValues.length,\n          });\n        })\n        .onCalcRel('CalculateRelations', (isCalculating) => {\n          //console.log(isCalculating);\n          visualizationDispatch({\n            type: 'setCalculatingRelations',\n            calculatingRelations: isCalculating,\n          });\n        });\n    }\n  }, []);\n\n  // Update data\n  useEffect(() => {\n    d3.select(divRef.current)\n      .datum(data)\n      .call(digestableRef.current);\n    visualizationDispatch({\n      type: 'setCalculatingRelations',\n      calculatingRelations: true,\n    });\n  }, [data]);\n\n  // Simplify parameters\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.applySimplification(apply);\n    }\n  }, [apply]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.simplificationMethod(method.name);\n    }\n  }, [method]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.simplificationAmount(amount);\n    }\n  }, [amount]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.simplificationRows(rows);\n    }\n  }, [rows]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.transformBase(transformBase);\n    }\n  }, [transformBase]);\n\n  // unselect parameters\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.unselect();\n    }\n  }, [unselect]);\n\n  // Visualization parameters\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.visualizationMode(mode);\n    }\n  }, [mode]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.showLinks(showLinks);\n    }\n  }, [showLinks]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.categoryScaling(categoryScaling);\n    }\n  }, [categoryScaling]);\n\n  // if still calculate relations\n  // useEffect(() => {\n  //   if (digestableRef.current) {\n  //     visualizationDispatch({\n  //       type: 'setCalculatingRelations',\n  //       calculatingRelations: false,\n  //     });\n  //   }\n  // }, [calculatingRelations]);\n\n  //load-more parameter\n\n  // initial check\n  useEffect(() => {\n    if (digestableRef.current && digestableRef.current.isFullData()) {\n      setIsFullData(true);\n    }\n  }, []);\n\n  // click event\n  const loadMore = (addrowNum) => {\n    if (digestableRef.current) {\n      digestableRef.current.loadMore(addrowNum);\n      if (digestableRef.current.isFullData()) {\n        setIsFullData(true);\n      }\n    }\n  };\n\n  const max = digestableRef.current && digestableRef.current.fullDataLength();\n  const displayRowNum =\n    digestableRef.current && digestableRef.current.displayRowNum();\n\n  const refreshDisplayRowNum = () => {\n    if (digestableRef.current) {\n      return digestableRef.current.displayRowNum();\n    }\n  };\n  return (\n    <div\n      ref={OuterDivRef}\n      onScroll={onScroll}\n      style={{\n        height: '100%',\n        overflow: 'auto',\n      }}\n    >\n      <div ref={divRef}></div>\n      {apply || isFullData ? (\n        <div></div>\n      ) : (\n        <Footer\n          loadMore={loadMore}\n          isFullData={isFullData}\n          addrowNum={addrowNum}\n          setAddRowNum={setAddRowNum}\n          max={max}\n          displayRowNum={displayRowNum}\n          refreshDisplayRowNum={refreshDisplayRowNum}\n        />\n      )}\n    </div>\n  );\n};\n","import { useRef } from 'react';\n\nexport const useScrollHook = (callback, divRef, scrollType) => {\n  const x = useRef(0);\n  const y = useRef(0);\n  const ticking = useRef(false);\n\n  return () => {\n    if (!divRef.current) return;\n\n    switch (scrollType) {\n      case 'horizontal':\n        {\n          const left = divRef.current.scrollLeft;\n\n          if (left !== x.current) {\n            x.current = left;\n\n            if (!ticking.current) {\n              window.requestAnimationFrame(() => {\n                callback(left);\n\n                ticking.current = false;\n              });\n\n              ticking.current = true;\n            }\n          }\n        }\n        break;\n\n      case 'vertical':\n        {\n          const top = divRef.current.scrollTop;\n\n          if (top !== y.current) {\n            y.current = top;\n\n            if (!ticking.current) {\n              window.requestAnimationFrame(() => {\n                callback(top);\n\n                ticking.current = false;\n              });\n\n              ticking.current = true;\n            }\n          }\n        }\n        break;\n\n      case 'both':\n        {\n          const left = divRef.current.scrollLeft;\n          const top = divRef.current.scrollTop;\n\n          if (left !== x.current || top !== y.current) {\n            x.current = left;\n            y.current = top;\n\n            if (!ticking.current) {\n              window.requestAnimationFrame(() => {\n                callback(left, top);\n\n                ticking.current = false;\n              });\n\n              ticking.current = true;\n            }\n          }\n        }\n        break;\n\n      default:\n        console.log('Invalid scroll type');\n    }\n  };\n};\n","import { Card, Stack } from 'react-bootstrap';\n\nconst { Header, Body, Subtitle } = Card;\n\nexport const ControlPanel = ({ title, subtitle, children }) => {\n  return (\n    <Card>\n      <Header>{ title }</Header>\n      <Body>\n        { subtitle && \n          <Subtitle className='mb-2 text-muted'>\n            { subtitle}\n          </Subtitle>\n        }\n        <Stack gap={ 3 }>\n          { children }\n        </Stack>\n      </Body>\n    </Card>\n  );\n};\n","import { useContext } from 'react';\nimport { Form, FloatingLabel, Button } from 'react-bootstrap';\nimport { SimplifyContext } from '../../contexts';\nimport { ControlPanel } from './controlPanel';\n\nconst { Group, Label, Check, Select, Range, Control } = Form;\n\nexport const SimplifyControls = () => {\n  const [\n    {\n      apply,\n      columnType,\n      methods,\n      method,\n      amount,\n      transformBase,\n      unique,\n      rows,\n      unselect,\n    },\n    simplifyDispatch,\n  ] = useContext(SimplifyContext);\n\n  const onApplyChange = (evt) => {\n    simplifyDispatch({ type: 'setApply', apply: evt.target.checked });\n  };\n\n  const onMethodChange = (evt) => {\n    simplifyDispatch({\n      type: 'setMethod',\n      method: methods.find(({ name }) => name === evt.target.value),\n    });\n  };\n\n  const onAmountChange = (evt) => {\n    simplifyDispatch({ type: 'setAmount', amount: +evt.target.value / 100 });\n  };\n\n  const onRowsChange = (evt) => {\n    simplifyDispatch({ type: 'setRows', rows: +evt.target.value });\n  };\n\n  const onTransformBaseChange = (evt) => {\n    simplifyDispatch({\n      type: 'setTransformBase',\n      transformBase: +evt.target.value / 100,\n    });\n  };\n\n  const onUnselectChange = (evt) => {\n    simplifyDispatch({\n      type: 'setUnselect',\n      unselect: evt.target.value === 'true',\n    });\n  };\n\n  return (\n    <ControlPanel title='Simplification' subtitle={`${columnType} column`}>\n      <Group>\n        <Check\n          type='checkbox'\n          label='Apply'\n          id='apply-simplification-checkbox'\n          size='sm'\n          checked={apply}\n          disabled={columnType === 'id'}\n          onChange={onApplyChange}\n        />\n      </Group>\n      {columnType === 'numeric' && (\n        <>\n          <Group>\n            <Label>numeric column:</Label>\n            <FloatingLabel label='Method'>\n              <Select value={method.name} onChange={onMethodChange}>\n                {methods.map(({ name }, i) => (\n                  <option key={i} value={name}>\n                    {name}\n                  </option>\n                ))}\n              </Select>\n            </FloatingLabel>\n          </Group>\n          {method.type === 'amount' ? (\n            <Group>\n              <Label>Amount</Label>\n              <Range\n                min={0}\n                max={100}\n                step={1}\n                value={amount * 100}\n                onChange={onAmountChange}\n              />\n            </Group>\n          ) : (\n            <Group>\n              <Label>Number of rows</Label>\n              <Control\n                type='number'\n                min={1}\n                max={unique}\n                step={1}\n                value={rows}\n                onChange={onRowsChange}\n              />\n            </Group>\n          )}\n          {method.transform && (\n            <Group>\n              <Label>Depth weight</Label>\n              <Range\n                min={100}\n                max={400}\n                step={1}\n                value={transformBase * 100}\n                onChange={onTransformBaseChange}\n              />\n            </Group>\n          )}\n        </>\n      )}\n      <Group>\n        <Button\n          variant='outline-secondary'\n          size='sm'\n          value={!unselect}\n          onClick={onUnselectChange}\n        >\n          Unselect all rows\n        </Button>\n      </Group>\n    </ControlPanel>\n  );\n};\n","import { useContext } from 'react';\nimport { Form, FloatingLabel, Spinner, Row, Col } from 'react-bootstrap';\nimport { VisualizationContext } from '../../contexts';\nimport { ControlPanel } from './controlPanel';\n\nconst { Group, Select, Check } = Form;\n\nexport const VisualizationControls = () => {\n  const [\n    {\n      modes,\n      mode,\n      showLinks,\n      categoryScalingOptions,\n      categoryScaling,\n      calculatingRelations,\n    },\n    visualizationDispatch,\n  ] = useContext(VisualizationContext);\n\n  const onModeChange = (evt) => {\n    visualizationDispatch({ type: 'setMode', mode: evt.target.value });\n  };\n\n  const onShowLinksChange = (evt) => {\n    visualizationDispatch({\n      type: 'setShowLinks',\n      showLinks: evt.target.checked,\n    });\n  };\n\n  const onCategoryScalingChange = (evt) => {\n    visualizationDispatch({\n      type: 'setCategoryScaling',\n      categoryScaling: evt.target.value,\n    });\n  };\n\n  return (\n    <ControlPanel title='Visualization'>\n      <Group>\n        <FloatingLabel label='Mode'>\n          <Select value={mode} onChange={onModeChange}>\n            {modes.map((mode, i) => (\n              <option key={i} value={mode}>\n                {mode}\n              </option>\n            ))}\n          </Select>\n        </FloatingLabel>\n      </Group>\n      <Group>\n        {calculatingRelations ? (\n          <>\n            <Check\n              type='checkbox'\n              label='Show links'\n              id='show-links-checkbox'\n              size='sm'\n              checked={showLinks}\n              onChange={onShowLinksChange}\n              disabled={calculatingRelations}\n            />\n            {/* <Spinner\n                animation='border'\n                style={{\n                  width: '1.5rem',\n                  height: '1.5rem',\n                  position: 'relative',\n                  right: '20%',\n                }}\n              /> */}\n            <p className='text-muted small' style={{ marginBottom: '0rem' }}>\n              Calculating...\n            </p>\n          </>\n        ) : (\n          <Check\n            type='checkbox'\n            label='Show links'\n            id='show-links-checkbox'\n            size='sm'\n            checked={showLinks}\n            onChange={onShowLinksChange}\n            disabled={calculatingRelations}\n          />\n        )}\n      </Group>\n      <Group>\n        <FloatingLabel label='Category scaling'>\n          <Select value={categoryScaling} onChange={onCategoryScalingChange}>\n            {categoryScalingOptions.map((option, i) => (\n              <option key={i} value={option}>\n                {option}\n              </option>\n            ))}\n          </Select>\n        </FloatingLabel>\n      </Group>\n    </ControlPanel>\n  );\n};\n","import { useState } from 'react';\nimport {\n  Container,\n  Navbar,\n  Row,\n  Col,\n  Form,\n  Spinner,\n  Stack,\n} from 'react-bootstrap';\nimport * as d3 from 'd3';\nimport { SimplifyProvider, VisualizationProvider } from './contexts';\nimport { TableWrapper } from './components/table-wrapper';\nimport { SimplifyControls, VisualizationControls } from './components/controls';\n\nconst { Brand } = Navbar;\nconst { Group, Control, Select } = Form;\n\nconst datasets = [\n  { name: 'MT Cars', url: '/digestable/data/mtcars.csv' },\n  { name: 'NFL Combine 2017', url: '/digestable/data/NFL Combine 2017.csv' },\n  { name: 'Starbucks', url: '/digestable/data/starbucks.csv' },\n  { name: 'Electric Cars', url: '/digestable/data/ElectricCars.csv' },\n  { name: 'Stars', url: '/digestable/data/Stars.csv' },\n];\n\nexport const App = () => {\n  const [dataset, setDataset] = useState('');\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  // XXX: Add loading spinner\n  const loadData = async (url) => {\n    setData(null);\n    setLoading(true);\n\n    try {\n      const csvData = await d3.csv(url);\n\n      setData(csvData);\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onSelectChange = (evt) => {\n    const url = evt.target.value;\n\n    setDataset(url);\n    loadData(url);\n  };\n\n  const onFileSelect = (evt) => {\n    const file = evt.target.files.length === 1 ? evt.target.files[0] : null;\n\n    if (file) {\n      setDataset('');\n      loadData(URL.createObjectURL(file));\n    }\n  };\n  // Get the query string\n  const queryParams = new URLSearchParams(window.location.search);\n  const mode = queryParams.get('mode');\n\n  return (\n    <SimplifyProvider>\n      <VisualizationProvider>\n        <Navbar bg='dark' variant='dark'>\n          <Brand className='ms-2'>\n            <img\n              src='/digestable/digestable_512.png'\n              alt='digestable logo'\n              height='32px'\n              className='me-1'\n            />\n            <span className='text-align-bottom'>\n              diges<b>table</b>\n            </span>\n          </Brand>\n          <Form>\n            <Group as={Row} className='align-items-center'>\n              <Col>\n                <Select value={dataset} onChange={onSelectChange}>\n                  <option value='' disabled>\n                    Choose dataset\n                  </option>\n                  {datasets.map((dataset, i) => (\n                    <option key={i} value={dataset.url}>\n                      {dataset.name}\n                    </option>\n                  ))}\n                </Select>\n              </Col>\n              <Col sm='auto' className='text-center'>\n                <span className='text-light'>or</span>\n              </Col>\n              <Col>\n                <Control type='file' accept='.csv' onChange={onFileSelect} />\n              </Col>\n            </Group>\n          </Form>\n        </Navbar>\n        {data ? (\n          <Container fluid style={{ height: 'calc(100% - 100px)' }}>\n            <Row style={{ height: '100%' }}>\n              <Col xs={10} className='mt-3' style={{ height: '100%' }}>\n                <TableWrapper data={data} />\n              </Col>\n              <Col className='bg-dark'>\n                {mode === 'simple' ? (\n                  <Stack gap={3}></Stack>\n                ) : (\n                  <Stack gap={3}>\n                    <SimplifyControls />\n                    <VisualizationControls />\n                  </Stack>\n                )}\n              </Col>\n            </Row>\n          </Container>\n        ) : (\n          <Container>\n            <div className='m-4 text-center'>\n              {loading ? (\n                <>\n                  <h5>Loading...</h5>\n                  <Spinner animation='border' />\n                </>\n              ) : (\n                <h3>No data</h3>\n              )}\n            </div>\n          </Container>\n        )}\n      </VisualizationProvider>\n    </SimplifyProvider>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './app';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}