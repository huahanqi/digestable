{"version":3,"sources":["contexts/simplify-context.js","contexts/visualization-context.js","digestable/clustering/kmeans.js","digestable/clustering/clusterGap.js","digestable/relations/correlation.js","digestable/relations/utils.js","digestable/relations/cramersV.js","digestable/relations/categoricalRegression.js","digestable/digestable.js","digestable/clustering/clusterQuantiles.js","digestable/clustering/groupCategories.js","components/table-wrapper/table-wrapper.js","hooks/use-scroll-hook.js","components/controls/controlPanel.js","components/controls/simplifyControls.js","components/controls/visualizationControls.js","app.js","index.js"],"names":["methods","name","type","transform","initialState","apply","columnType","method","amount","transformBase","unique","rows","reducer","state","action","Math","min","Error","SimplifyContext","createContext","SimplifyProvider","children","useReducer","dispatch","Provider","value","modes","categoryScalingOptions","mode","showLinks","categoryScaling","VisualizationContext","VisualizationProvider","calcMeanCentroid","dataSet","start","end","features","length","n","mean","i","push","j","getRandomCentroidsNaiveSharding","dataset","k","numSamples","step","floor","centroids","getRandomCentroids","index","max","centroidsIndex","random","indexOf","centroid","compareCentroids","a","b","shouldStop","oldCentroids","iterations","sameCount","getDistanceSQ","diffs","reduce","r","e","getLabels","labels","c","points","indeces","closestCentroidIndex","prevDistance","distance","getPointsMean","pointList","totalPoints","means","point","val","recalculateCentroids","newCentroid","newCentroidList","centroidGroup","correlation","d1","d2","ss","isNaN","getUniqueValues","d","Array","from","values","add","Set","cramersV","dimension1","dimension2","categories1","categories2","chi2","categoryCounts","counts","counts1","counts2","c1","forEach","c2","v1","v2","observed","expected","map","o","pow","chiSquared","k1","k2","sqrt","categoricalRegression","categorical","numeric","nonNull","v","validCat","validNum","categories","cats","slice","x","category","lr","shaman","LinearRegression","algorithm","p","train","err","console","log","predict","digestable","table","d3","linkSvg","allData","data","columns","relations","clustering","applySimplification","simplificationMethod","simplificationAmount","simplificationRows","visualizationMode","missingValues","isMissing","includes","dispatcher","addMoreData","isFullData","selection","each","inputData","this","selectAll","join","enter","append","attr","column","uniqueValues","validValues","filter","numbers","sort","isId","extent","maxDigits","significantDigits","getCounts","count","clearSorting","clearClustering","initialIndex","isCluster","cluster","pinned","expanded","createData","processData","sortTable","drawTable","Object","entries","log10","String","split","n1","n2","abs","clusterColumn","find","sortData","maxCount","clusters","transformValues","base","valueScale","domain","range","removeNull","nullIndex","nullCluster","applyNull","concat","scale","clusterQuantiles","reverse","useNaiveSharding","converged","kmeans","numRows","gaps","gap","unshift","clusterGap","clusterNumeric","groupCategories","clusterCategorical","size","row","valid","median","q1","q2","warn","sortColumn","px","paddingX","py","paddingY","showSortButtons","info","th","select","div","nameDiv","text","on","evt","sortByColumn","style","clusterByColumn","call","html","classed","width","node","clientWidth","svg","xScale","rangeRound","bins","bin","yScale","rect","x0","x1","colorScale","bandwidth","drawHeader","top","others","s","topString","othersString","expandedData","insert","maxSize","td","valueDiv","w2","w1","height","source","target","drawBody","applyVisualizationMode","clientHeight","highlight","drawLinks","column1","column2","magnitude","offsetWidth","aspect","offset","getBoundingClientRect","nodes","left","right","pos","x2","y","xi","yi","line","curve","opacityScale","widthScale","_","arguments","updateLinks","loadMore","TableWrapper","useContext","simplifyDispatch","divRef","useRef","digestableRef","OuterDivRef","useState","setIsFullData","onScroll","callback","scrollType","ticking","current","scrollLeft","window","requestAnimationFrame","scrollTop","useScrollHook","useEffect","datum","Footer","Container","padding","display","justifyContent","position","Button","disabled","onClick","ref","overflow","Header","Card","Body","Subtitle","ControlPanel","title","subtitle","className","Stack","Group","Form","Label","Check","Select","Range","Control","SimplifyControls","label","id","checked","onChange","FloatingLabel","VisualizationControls","visualizationDispatch","option","Brand","Navbar","datasets","url","App","setDataset","setData","loading","setLoading","loadData","csvData","bg","variant","src","alt","as","Row","Col","sm","accept","file","files","URL","createObjectURL","fluid","xs","Spinner","animation","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9097bb35.chunk.js","sourcesContent":["import React, { createContext, useReducer } from 'react';\n\nconst methods = [\n  { name: 'quantiles', type: 'rows' },\n  { name: 'kmeans', type: 'rows' },\n  { name: 'gap', type: 'rows', transform: true }\n//  { name: 'threshold', type: 'amount' }\n];\n\nconst initialState = {\n  apply: false,\n  columnType: 'numeric',\n  methods: methods,\n  method: methods[0],\n  amount: 0.5,\n  transformBase: 1,\n  unique: 0,\n  rows: 10 \n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setApply': \n      return {\n        ...state,\n        apply: action.apply\n      };\n\n    case 'setMethod':\n      return {\n        ...state,\n        method: action.method\n      };\n\n    case 'setAmount':\n      return {\n        ...state,\n        amount: action.amount\n      };\n\n    case 'setTransformBase':\n      return {\n        ...state,\n        transformBase: action.transformBase\n      };\n\n    case 'setColumnInfo': \n      return {\n        ...state,\n        columnType: action.columnType,\n        unique: action.unique,\n        rows: Math.min(state.rows, action.unique)\n      }\n\n    case 'setRows':\n      return {\n        ...state,\n        rows: action.rows\n      }\n\n    default: \n      throw new Error('Invalid simplify context action: ' + action.type);\n  }\n}\n\nexport const SimplifyContext = createContext(initialState);\n\nexport const SimplifyProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n \n  return (\n    <SimplifyContext.Provider value={ [state, dispatch] }>\n      { children }\n    </SimplifyContext.Provider>\n  )\n} \n","import React, { createContext, useReducer } from 'react';\n\nconst modes = [\n  'text',\n  'visualizations',\n  'both',\n  'interactive'\n];\n\nconst categoryScalingOptions = [\n  'row',\n  'column'\n];\n\nconst initialState = {\n  modes: modes,\n  mode: modes[0],\n  showLinks: false,\n  categoryScalingOptions: categoryScalingOptions,\n  categoryScaling: categoryScalingOptions[0]\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setMode': \n      return {\n        ...state,\n        mode: action.mode\n      };\n\n    case 'setShowLinks':\n      return {\n        ...state,\n        showLinks: action.showLinks\n      }\n\n    case 'setCategoryScaling':\n      return {\n        ...state,\n        categoryScaling: action.categoryScaling\n      }\n\n    default: \n      throw new Error('Invalid visualization context action: ' + action.type);\n  }\n}\n\nexport const VisualizationContext = createContext(initialState);\n\nexport const VisualizationProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n \n  return (\n    <VisualizationContext.Provider value={ [state, dispatch] }>\n      { children }\n    </VisualizationContext.Provider>\n  )\n} \n","// Adapted from https://medium.com/geekculture/implementing-k-means-clustering-from-scratch-in-javascript-13d71fbcb31e\n\nconst MAX_ITERATIONS = 50;\n\nfunction randomBetween(min, max) {\n  return Math.floor(\n    Math.random() * (max - min) + min\n  );\n}\n\nfunction calcMeanCentroid(dataSet, start, end) {\n  const features = dataSet[0].length;\n  const n = end - start;\n  let mean = [];\n  for (let i = 0; i < features; i++) {\n    mean.push(0);\n  }\n  for (let i = start; i < end; i++) {\n    for (let j = 0; j < features; j++) {\n      mean[j] = mean[j] + dataSet[i][j] / n;\n    }\n  }\n  return mean;\n}\n\nfunction getRandomCentroidsNaiveSharding(dataset, k) {\n  // implementation of a variation of naive sharding centroid initialization method\n  // (not using sums or sorting, just dividing into k shards and calc mean)\n  // https://www.kdnuggets.com/2017/03/naive-sharding-centroid-initialization-method.html\n  const numSamples = dataset.length;\n  // Divide dataset into k shards:\n  const step = Math.floor(numSamples / k);\n  const centroids = [];\n  for (let i = 0; i < k; i++) {\n    const start = step * i;\n    let end = step * (i + 1);\n    if (i + 1 === k) {\n      end = numSamples;\n    }\n    centroids.push(calcMeanCentroid(dataset, start, end));\n  }\n  return centroids;\n}\n\nfunction getRandomCentroids(dataset, k) {\n  // selects random points as centroids from the dataset\n  const numSamples = dataset.length;\n  const centroidsIndex = [];\n  let index;\n  while (centroidsIndex.length < k) {\n    index = randomBetween(0, numSamples);\n    if (centroidsIndex.indexOf(index) === -1) {\n      centroidsIndex.push(index);\n    }\n  }\n  const centroids = [];\n  for (let i = 0; i < centroidsIndex.length; i++) {\n    const centroid = [...dataset[centroidsIndex[i]]];\n    centroids.push(centroid);\n  }\n  return centroids;\n}\n\nfunction compareCentroids(a, b) {\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction shouldStop(oldCentroids, centroids, iterations) {\n  if (iterations > MAX_ITERATIONS) {\n    return true;\n  }\n  if (!oldCentroids || !oldCentroids.length) {\n    return false;\n  }\n  let sameCount = true;\n  for (let i = 0; i < centroids.length; i++) {\n    if (!compareCentroids(centroids[i], oldCentroids[i])) {\n      sameCount = false;\n    }\n  }\n  return sameCount;\n}\n\n// Calculate Squared Euclidean Distance\nfunction getDistanceSQ(a, b) {\n  const diffs = [];\n  for (let i = 0; i < a.length; i++) {\n    diffs.push(a[i] - b[i]);\n  }\n  return diffs.reduce((r, e) => (r + (e * e)), 0);\n}\n\n// Returns a label for each piece of data in the dataset. \nfunction getLabels(dataSet, centroids) {\n  // prep data structure:\n  const labels = {};\n  for (let c = 0; c < centroids.length; c++) {\n    labels[c] = {\n      points: [],\n      indeces: [],\n      centroid: centroids[c],\n    };\n  }\n  // For each element in the dataset, choose the closest centroid. \n  // Make that centroid the element's label.\n  for (let i = 0; i < dataSet.length; i++) {\n    const a = dataSet[i];\n    let closestCentroid, closestCentroidIndex, prevDistance;\n    for (let j = 0; j < centroids.length; j++) {\n      let centroid = centroids[j];\n      if (j === 0) {\n        closestCentroid = centroid;\n        closestCentroidIndex = j;\n        prevDistance = getDistanceSQ(a, closestCentroid);\n      } else {\n        // get distance:\n        const distance = getDistanceSQ(a, centroid);\n        if (distance < prevDistance) {\n          prevDistance = distance;\n          closestCentroid = centroid;\n          closestCentroidIndex = j;\n        }\n      }\n    }\n\n    labels[closestCentroidIndex].points.push(a);\n    labels[closestCentroidIndex].indeces.push(i);\n  }\n  return labels;\n}\n\nfunction getPointsMean(pointList) {\n  const totalPoints = pointList.length;\n  const means = [];\n  for (let j = 0; j < pointList[0].length; j++) {\n    means.push(0);\n  }\n  for (let i = 0; i < pointList.length; i++) {\n    const point = pointList[i];\n    for (let j = 0; j < point.length; j++) {\n      const val = point[j];\n      means[j] = means[j] + val / totalPoints;\n    }\n  }\n  return means;\n}\n\nfunction recalculateCentroids(dataSet, labels, k) {\n  // Each centroid is the geometric mean of the points that\n  // have that centroid's label. Important: If a centroid is empty (no points have\n  // that centroid's label) you should randomly re-initialize it.\n  let newCentroid;\n  const newCentroidList = [];\n  for (const k in labels) {\n    const centroidGroup = labels[k];\n    if (centroidGroup.points.length > 0) {\n      // find mean:\n      newCentroid = getPointsMean(centroidGroup.points);\n    } else {\n      // get new random centroid\n      newCentroid = getRandomCentroids(dataSet, 1)[0];\n    }\n    newCentroidList.push(newCentroid);\n  }\n  return newCentroidList;\n}\n\nexport function kmeans(dataset, k, useNaiveSharding = true) {\n  if (dataset.length && dataset[0].length && dataset.length >= k) {\n    // Initialize book keeping variables\n    let iterations = 0;\n    let oldCentroids, labels, centroids;\n\n    // Initialize centroids randomly\n    if (useNaiveSharding) {\n      centroids = getRandomCentroidsNaiveSharding(dataset, k);\n    } else {\n      centroids = getRandomCentroids(dataset, k);\n    }\n\n    // Run the main k-means algorithm\n    while (!shouldStop(oldCentroids, centroids, iterations)) {\n      // Save old centroids for convergence test.\n      oldCentroids = [...centroids];\n      iterations++;\n\n      // Assign labels to each datapoint based on centroids\n      labels = getLabels(dataset, centroids);\n      centroids = recalculateCentroids(dataset, labels, k);\n    }\n\n    const clusters = [];\n    for (let i = 0; i < k; i++) {\n      clusters.push(labels[i]);\n    }\n    const results = {\n      clusters: clusters,\n      centroids: centroids,\n      iterations: iterations,\n      converged: iterations <= MAX_ITERATIONS,\n    };\n    return results;\n  } else {\n    throw new Error('Invalid dataset');\n  }\n}","import * as d3 from 'd3';\n\nexport const clusterGap = (values, numRows) => {\n  const gaps = d3.pairs(values).map((d, i) => ({ value: Math.abs(d[1] - d[0]), index: i }));\n\n  gaps.sort((a, b) => {\n    return a.value === b.value ? d3.ascending(a.index, b.index) : d3.descending(a.value, b.value);\n  });\n\n  const clusters = gaps.slice(0, numRows - 1).map(gap => gap.index);\n\n  clusters.sort(d3.ascending);\n  clusters.unshift(-1);\n  clusters.push(values.length - 1);\n  \n  return d3.pairs(clusters).map(d => d3.range(d[0] + 1, d[1] + 1));\n};","import * as ss from 'simple-statistics';\n\nexport const correlation = (d1, d2) => {\n  const r = ss.sampleCorrelation(d1, d2);\n\n  return isNaN(r) ? 0 : r;\n};","export const getUniqueValues = d => Array.from(d.reduce((values, value) => values.add(value), new Set()));","import * as ss from 'simple-statistics';\nimport { getUniqueValues } from './utils';\n\nconst chiSquared = (dimension1, categories1, dimension2, categories2) => {\n    const categoryCounts = values => {\n      return values.reduce((counts, value) => {\n        if (!counts[value]) counts[value] = 1;\n        else counts[value]++;\n        return counts;\n      }, {});\n    };\n  \n    // Get counts per dimension\n    const counts1 = categoryCounts(dimension1, categories1);\n    const counts2 = categoryCounts(dimension2, categories2);\n  \n    // Initialize object for value counts\n    const counts = categories1.reduce((counts, c1) => {\n      counts[c1] = {};\n  \n      categories2.forEach(c2 => {\n        counts[c1][c2] = 0;\n      });\n  \n      return counts;\n    }, {});\n  \n    // Get counts\n    dimension1.forEach((v1, i) => {\n      const v2 = dimension2[i];\n  \n      counts[v1][v2]++;\n    });\n  \n    // Get expected and observed values\n    const n = dimension1.length;\n    const observed = [];\n    const expected = [];\n  \n    categories1.forEach(c1 => {\n      categories2.forEach(c2 => {\n        observed.push(counts[c1][c2]);\n        expected.push(counts1[c1] * counts2[c2] /  n);\n      });\n    });\n  \n    // Compute chi squared\n    return ss.sumSimple(observed.map((o, i) => {\n      const e = expected[i];\n  \n      return Math.pow(o - e, 2) / e;\n    }));\n  }\n  \n  export const cramersV = (dimension1, dimension2) => {\n    const categories1 = getUniqueValues(dimension1);\n    const categories2 = getUniqueValues(dimension2);\n  \n    // XXX: What should be returned here?\n    if (categories1.length === 1 || categories2.length === 1) return 0;\n  \n    const chi2 = chiSquared(dimension1, categories1, dimension2, categories2);\n  \n    const n = dimension1.length;\n    const k1 = categories1.length;\n    const k2 = categories2.length;\n    const k = Math.min(k1, k2);\n  \n    if (k1 === 2 && k2 === 2) {\n      // Use phi\n  //    console.log(\"Phi: \", Math.sqrt(chi2 / n));\n      return Math.sqrt(chi2 / n);\n    }\n    else {\n      // Use Cramers V\n  //    console.log(\"V: \", Math.sqrt(chi2 / (n * (k - 1))));\n      return Math.sqrt(chi2 / (n * (k - 1)));\n    }\n  };","import shaman from 'shaman';\nimport { correlation } from './correlation';\nimport { getUniqueValues } from './utils';\n\nexport const categoricalRegression = (categorical, numeric) => {\n  // Remove nulls\n  const [validCat, validNum] = categorical.reduce((nonNull, v, i) => {\n    if (categorical[i] !== null && numeric[i] !== null) {\n      nonNull[0].push(categorical[i]);\n      nonNull[1].push(numeric[i]);\n    }\n\n    return nonNull;\n  }, [[], []]);\n\n  const categories = getUniqueValues(validCat);\n\n  // XXX: What should be returned here?\n  if (categories.length === 1) return 0;\n\n  // n - 1 dummy categories\n  const cats = categories.slice(0, -1);\n\n  // Setup multiple regression\n  const x = validCat.map(value => {\n    return [...cats.map(category => value === category ? 1 : 0)];\n  });\n\n  const lr = new shaman.LinearRegression(x, validNum, { algorithm: 'NormalEquation' });\n\n  const p = [];\n  lr.train(err => {\n    if (err) console.log(err);\n\n    x.forEach(x => p.push(lr.predict(x)));\n  });\n\n  return correlation(validNum, p);\n};","import * as d3 from 'd3';\nimport {\n  clusterQuantiles,\n  kmeans,\n  clusterGap,\n  groupCategories,\n} from './clustering';\nimport { correlation, cramersV, categoricalRegression } from './relations';\nimport './digestable.css';\n\nexport const digestable = () => {\n  // The table\n  let table = d3.select(),\n    linkSvg = d3.select(),\n    // Data\n    allData = [],\n    data = [],\n    columns = [],\n    relations = [],\n    clustering = false,\n    // Parameters\n    applySimplification = false,\n    simplificationMethod = 'threshold',\n    simplificationAmount = 0.9,\n    simplificationRows = 20,\n    transformBase = 1,\n    visualizationMode = 'text',\n    showLinks = false,\n    categoryScaling = 'row',\n    paddingX = 5,\n    paddingY = 0,\n    // Missing data\n    missingValues = ['', 'NA', 'na'],\n    isMissing = (d) => missingValues.includes(d),\n    // Event dispatcher\n    dispatcher = d3.dispatch('clusterByColumn'),\n    // load more data parameters\n    addMoreData = 40,\n    isFullData = false;\n\n  function digestable(selection) {\n    selection.each(function(d) {\n      // Create SVG for links\n      linkSvg = d3\n        .select(this)\n        .selectAll('.linkSvg')\n        .data([[]])\n        .join((enter) => enter.append('svg').attr('class', 'linkSvg'));\n\n      // Create skeletal table\n      table = d3\n        .select(this)\n        .selectAll('table')\n        .data([[]])\n        .join((enter) => {\n          const table = enter.append('table');\n\n          table.append('thead').append('tr');\n          table.append('tbody');\n\n          return table;\n        });\n\n      createColumns(d);\n      createData(d);\n      processData();\n      sortTable();\n      drawTable();\n    });\n  }\n\n  // Helper functions\n  const textVisibility = () =>\n    visualizationMode === 'text' || visualizationMode === 'both'\n      ? 'visible'\n      : 'hidden';\n  const visVisibility = () =>\n    visualizationMode !== 'text' ? 'visible' : 'hidden';\n\n  const getCounts = (uniqueValues, values) =>\n    Object.entries(\n      values.reduce(\n        (counts, value) => {\n          counts[value]++;\n          return counts;\n        },\n        uniqueValues.reduce((counts, value) => {\n          counts[value] = 0;\n          return counts;\n        }, {})\n      )\n    )\n      .map(([key, value]) => ({ value: key, count: value }))\n      .sort((a, b) => d3.descending(a.count, b.count));\n\n  const significantDigits = (n) => {\n    const log10 = Math.log(10);\n\n    // Split decimal\n    let [n1, n2] = String(n).split('.');\n\n    // Handle left of decimal\n    n1 = Math.abs(n1);\n    const d1 = Math.floor(Math.log(n) / log10) + 1;\n\n    // Handle right of decimal\n    const d2 = n2\n      ? n1 > 0\n        ? n2.length\n        : Math.floor(Math.log(+n) / log10) + 1\n      : 0;\n\n    return Math.max(d1 + d2, 1);\n  };\n\n  function clearSorting() {\n    columns.forEach((d) => (d.sort = null));\n  }\n\n  function clearClustering() {\n    columns.forEach((d) => (d.cluster = null));\n  }\n\n  function createColumns(inputData) {\n    columns = inputData.columns.map((d) => ({ name: d }));\n\n    // Determine column types and set column info\n    columns.forEach((column) => {\n      const { name } = column;\n      const values = inputData.map((d) => d[name]);\n      const uniqueValues = Array.from(\n        values.reduce((values, d) => values.add(d), new Set())\n      );\n      const validValues = uniqueValues.filter((value) => !isMissing(value));\n      const numeric = validValues.reduce(\n        (numeric, value) => numeric && !isNaN(value),\n        true\n      );\n      const numbers = numeric ? validValues.map((d) => +d) : null;\n\n      column.uniqueValues = uniqueValues;\n\n      if (numeric) {\n        if (numbers.length === inputData.length) {\n          // Heuristic to check for integer ID type\n          numbers.sort((a, b) => d3.ascending(a, b));\n\n          const isId = numbers.reduce(\n            (isId, d, i, a) => isId && (i === 0 || d === a[i - 1] + 1),\n            true\n          );\n\n          column.type = isId ? 'id' : 'numeric';\n        } else if (\n          numbers.length === 2 &&\n          numbers.includes(0) &&\n          numbers.includes(1)\n        ) {\n          // Treat binary as categorical\n          column.type = 'categorical';\n        } else {\n          column.type = 'numeric';\n        }\n      } else if (uniqueValues.length === inputData.length) {\n        column.type = 'id';\n      } else {\n        column.type = 'categorical';\n      }\n\n      if (column.type === 'numeric') {\n        column.values = values.filter((value) => !isMissing(value));\n        column.extent = d3.extent(numbers);\n        column.maxDigits = d3.max(numbers, significantDigits);\n      } else if (column.type === 'categorical') {\n        column.type = 'categorical';\n        column.counts = getCounts(uniqueValues, values).sort(\n          (a, b) => b.count - a.count\n        );\n        column.uniqueValues = column.counts.map(({ value }) => value);\n      }\n    });\n\n    clearSorting();\n    clearClustering();\n  }\n\n  function createData(inputData) {\n    allData = inputData.map((d, i) => {\n      const v = { ...d };\n\n      // Convert missing and numeric data\n      columns.forEach(({ type, name }) => {\n        const value = v[name];\n\n        if (isMissing(value)) {\n          v[name] = null;\n        } else if (type === 'numeric') {\n          v[name] = +value;\n        }\n      });\n\n      return {\n        initialIndex: i,\n        isCluster: false,\n        cluster: null,\n        pinned: false,\n        expanded: false,\n        values: v,\n      };\n    });\n  }\n\n  function computeRelations() {\n    // Compute relations\n    relations = columns.reduce((relations, column1, i, a) => {\n      const v1 = allData.map((d) => d.values[column1.name]);\n\n      for (let j = i + 1; j < a.length; j++) {\n        const column2 = a[j];\n        const v2 = allData.map((d) => d.values[column2.name]);\n\n        const value =\n          column1.type === 'id' || column2.type === 'id'\n            ? 0\n            : column1.type === 'categorical' && column2.type === 'categorical'\n            ? cramersV(v1, v2)\n            : column1.type === 'categorical' && column2.type === 'numeric'\n            ? categoricalRegression(v1, v2)\n            : column1.type === 'numeric' && column2.type === 'categorical'\n            ? categoricalRegression(v2, v1)\n            : correlation(v1, v2);\n\n        relations.push({\n          source: column1,\n          target: column2,\n          value: value,\n          magnitude: Math.abs(value),\n        });\n      }\n\n      return relations;\n    }, []);\n\n    relations.sort((a, b) => d3.ascending(a.magnitude, b.magnitude));\n  }\n\n  function sortByColumn(column) {\n    const sort = column.sort === 'descending' ? 'ascending' : 'descending';\n\n    clearSorting();\n\n    column.sort = sort;\n  }\n\n  function clusterByColumn(column) {\n    const cluster =\n      column.cluster === null\n        ? 'descending'\n        : column.cluster === 'descending'\n        ? 'ascending'\n        : null;\n\n    clearClustering();\n    clearSorting();\n\n    column.cluster = cluster;\n  }\n\n  function sortData() {\n    const clusterColumn = columns.find(({ cluster }) => cluster);\n\n    const sort = clusterColumn ? clusterColumn.cluster : 'ascending';\n\n    allData.sort((a, b) => {\n      const v1 = clusterColumn ? a.values[clusterColumn.name] : a.initialIndex;\n      const v2 = clusterColumn ? b.values[clusterColumn.name] : b.initialIndex;\n\n      return v1 === v2\n        ? 0\n        : v1 === null\n        ? 1\n        : v2 === null\n        ? -1\n        : d3[sort](v1, v2);\n    });\n  }\n\n  function processData() {\n    sortData();\n\n    // Clear expanded\n    allData.forEach((d) => (d.expanded = false));\n\n    const clusterColumn = columns.find(({ cluster }) => cluster);\n\n    // Initialize categorical and id column counts\n    columns\n      .filter(({ type }) => type !== 'numeric')\n      .forEach((column) => (column.maxCount = 1));\n\n    clustering =\n      applySimplification && clusterColumn && clusterColumn.type !== 'id';\n\n    if (clustering) {\n      const { name, type, cluster: sort } = clusterColumn;\n\n      const values = allData.map((d) => d.values[name]);\n\n      const clusters = (type === 'numeric'\n        ? clusterNumeric(values, sort)\n        : clusterCategorical(values)\n      ).filter((cluster) => cluster.length > 0);\n\n      data = clusters.map((cluster) => {\n        const size = cluster.length;\n\n        // No cluster if only 1\n        if (size === 1) {\n          allData[cluster[0]].cluster = null;\n\n          return allData[cluster[0]];\n        }\n\n        // Create row object\n        const row = {\n          isCluster: true,\n          indeces: cluster,\n          size: size,\n          values: {},\n        };\n\n        // Set cluster object for each item\n        cluster.forEach((i) => (allData[i].cluster = row));\n\n        // Compute info based on column type\n        columns.forEach((column) => {\n          const { name, type, uniqueValues } = column;\n\n          if (type === 'numeric') {\n            const values = cluster.map((i) => allData[i].values[name]);\n\n            if (values.length > 0) {\n              const validValues = values.filter((d) => d !== null);\n\n              row.values[name] =\n                validValues.length > 0\n                  ? {\n                      valid: true,\n                      values: values,\n                      validValues: validValues,\n                      min: d3.min(validValues),\n                      max: d3.max(validValues),\n                      median: d3.median(validValues),\n                      q1: d3.quantile(validValues, 0.25),\n                      q2: d3.quantile(validValues, 0.75),\n                    }\n                  : {\n                      valid: false,\n                      values: values,\n                    };\n            } else {\n              row.values[name] = null;\n            }\n          } else if (type === 'categorical') {\n            const values = cluster.map((i) => allData[i].values[name]);\n\n            if (values.length > 0) {\n              const counts = getCounts(uniqueValues, values);\n\n              column.maxCount = Math.max(column.maxCount, counts[0].count);\n\n              row.values[name] = {\n                counts: counts,\n              };\n            } else {\n              row.values[name] = null;\n            }\n          } else if (type === 'id') {\n            const values = cluster.map((i) => allData[i].values[name]);\n\n            if (values.length > 0) {\n              const counts = values.map((value) => ({\n                value: value,\n                count: 1,\n              }));\n\n              row.values[name] = {\n                counts: counts,\n              };\n            } else {\n              row.values[name] = null;\n            }\n          } else {\n            console.warn('Unknown column type: ' + type);\n          }\n        });\n\n        return row;\n      });\n    } else {\n      if (addMoreData < [...allData].length) {\n        data = [...allData].slice(0, addMoreData);\n      } else {\n        data = [...allData];\n        isFullData = true;\n      }\n    }\n\n    function clusterNumeric(values, sort) {\n      const transformValues = (values) => {\n        const base = sort === 'ascending' ? 1 / transformBase : transformBase;\n\n        const valueScale = d3\n          .scaleLinear()\n          .domain(d3.extent(values))\n          .range([0, 1]);\n\n        return values.map((d) => Math.pow(valueScale(d), base));\n      };\n\n      const removeNull = (values) => {\n        // Find first null. Always sorted to the end.\n        const nullIndex = values.indexOf(null);\n        const nullCluster =\n          nullIndex > -1 ? d3.range(nullIndex, values.length) : null;\n        const validValues =\n          nullIndex > -1 ? values.slice(0, nullIndex) : values;\n        const rows = nullCluster ? simplificationRows - 1 : simplificationRows;\n\n        return [validValues, nullCluster, rows];\n      };\n\n      const applyNull = (clusters, nullCluster) => {\n        return nullCluster ? clusters.concat([nullCluster]) : clusters;\n      };\n\n      switch (simplificationMethod) {\n        case 'quantiles': {\n          const [validValues, nullCluster, rows] = removeNull(values);\n          const clusters = clusterQuantiles(validValues, rows);\n          if (sort === 'descending') clusters.reverse();\n\n          return applyNull(clusters, nullCluster);\n        }\n\n        case 'kmeans': {\n          const [validValues, nullCluster, rows] = removeNull(values);\n          const { clusters } = kmeans(\n            validValues.map((d) => [d]),\n            rows\n          );\n          clusters.sort((a, b) => d3[sort](a.centroid[0], b.centroid[0]));\n\n          return applyNull(\n            clusters.map((cluster) => cluster.indeces),\n            nullCluster\n          );\n        }\n\n        case 'gap': {\n          const [validValues, nullCluster, rows] = removeNull(values);\n          const clusters = clusterGap(transformValues(validValues), rows);\n\n          return applyNull(clusters, nullCluster);\n        }\n\n        default:\n          console.log(`Unknown simplification method: ${simplificationMethod}`);\n      }\n    }\n\n    function clusterCategorical(values) {\n      return groupCategories(values);\n    }\n  }\n\n  function sortTable() {\n    const sortColumn = columns.find(({ sort }) => sort !== null);\n\n    if (!sortColumn) return;\n\n    const { name, type, sort, cluster } = sortColumn;\n\n    data.sort((a, b) => {\n      switch (type) {\n        case 'numeric': {\n          const v1 = a.isCluster ? a.values[name].median : a.values[name];\n          const v2 = b.isCluster ? b.values[name].median : b.values[name];\n\n          return v1 === v2\n            ? 0\n            : v1 === null\n            ? 1\n            : v2 === null\n            ? -1\n            : d3[sort](v1, v2);\n        }\n\n        case 'categorical': {\n          if (cluster) {\n            const v1 = a.isCluster\n              ? a.values[name].counts[0].count\n              : a.values[name]\n              ? 1\n              : null;\n            const v2 = b.isCluster\n              ? b.values[name].counts[0].count\n              : b.values[name]\n              ? 1\n              : null;\n\n            return v1 === v2\n              ? 0\n              : v1 === null\n              ? 1\n              : v2 === null\n              ? -1\n              : d3[sort](v1, v2);\n          } else {\n            const v1 = a.isCluster\n              ? a.values[name].counts[0].count / a.size\n              : a.values[name];\n            const v2 = b.isCluster\n              ? b.values[name].counts[0].count / b.size\n              : b.values[name];\n\n            return v1 === v2\n              ? 0\n              : v1 === null\n              ? 1\n              : v2 === null\n              ? -1\n              : d3[sort](v1, v2);\n          }\n        }\n\n        case 'id': {\n          const v1 = a.isCluster\n            ? a.values[name].counts[0].value\n            : a.values[name];\n          const v2 = b.isCluster\n            ? b.values[name].counts[0].value\n            : b.values[name];\n\n          return v1 === v2\n            ? 0\n            : v1 === null\n            ? 1\n            : v2 === null\n            ? -1\n            : d3[sort](v1, v2);\n        }\n\n        default:\n          console.log(`Unknown column type ${type}`);\n          return 0;\n      }\n    });\n  }\n\n  function drawTable() {\n    const px = paddingX + 'px';\n    const py = paddingY + 'px';\n\n    const clusterIcon = (cluster) =>\n      cluster === 'ascending' ? '⊻' : cluster === 'descending' ? '⊼' : '≡';\n    //cluster === 'ascending' ? '⇟' :\n    //cluster === 'descending' ? '⇞' :\n    //'≡'\n\n    const sortIcon = (sort) => (sort === 'ascending' ? '⇣' : '⇡');\n\n    const clusterColumn = columns.find(({ cluster }) => cluster);\n    const showSortButtons =\n      applySimplification &&\n      clusterColumn &&\n      clusterColumn.type === 'categorical';\n\n    // Reset svg widths for proper column width sizing\n    table.selectAll('svg').attr('width', 0);\n\n    drawHeader();\n    drawBody();\n    applyVisualizationMode();\n    highlight();\n    drawLinks();\n\n    function drawHeader() {\n      const info = (column) => {\n        switch (column.type) {\n          case 'numeric': {\n            // Display range and median for clusters\n            const min = column.extent[0];\n            const max = column.extent[1];\n\n            return min === max\n              ? min\n              : `<div class='range'><div>${min}</div><div class='dash'><hr /></div><div>${max}</div>`;\n          }\n\n          case 'categorical': {\n            return `<div>${column.uniqueValues.length} categories</div>`;\n          }\n\n          case 'id': {\n            return `<div>${column.uniqueValues.length} unique values<div>`;\n          }\n\n          default:\n            return null;\n        }\n      };\n\n      // Header elements\n      const th = table\n        .select('thead')\n        .select('tr')\n        .selectAll('th')\n        .data(columns, (d) => d.name)\n        .join((enter) => {\n          const th = enter.append('th');\n\n          const div = th.append('div').attr('class', 'headerDiv');\n\n          const nameDiv = div.append('div').attr('class', 'nameDiv');\n\n          nameDiv.append('div').text((d) => d.name);\n\n          nameDiv\n            .append('button')\n            .attr('class', 'headerButton sortButton')\n            .on('click', (evt, d) => {\n              sortByColumn(d);\n              sortTable();\n              drawTable();\n            });\n\n          nameDiv\n            .append('button')\n            .attr('class', 'headerButton clusterButton')\n            .style('font-weight', 'bold')\n            .on('click', (evt, d) => {\n              clusterByColumn(d);\n              processData();\n              sortTable();\n              drawTable();\n\n              dispatcher.call('clusterByColumn', this, d);\n            });\n\n          div\n            .append('div')\n            .attr('class', 'info')\n            .html(info);\n\n          div.each(function(column) {\n            d3.select(this)\n              .selectAll('.visDiv')\n              .data(column.type === 'id' ? [] : [column])\n              .join((enter) => {\n                const div = enter.append('div').attr('class', 'visDiv');\n\n                div.append('svg');\n\n                return div;\n              });\n          });\n\n          th.append('div').attr('class', 'highlight');\n\n          return th;\n        })\n        .classed('active', (d) => d.cluster !== null)\n        .style('padding-left', px)\n        .style('padding-right', px)\n        .style('padding-top', py)\n        .style('padding-bottom', py);\n\n      // Update buttons\n      th.select('.clusterButton')\n        .classed('active', (d) => d.cluster !== null)\n        .text((d) => clusterIcon(d.cluster));\n\n      th.select('.sortButton')\n        .classed('active', (d) => d.sort !== null)\n        .style('visibility', (d) => (showSortButtons ? null : 'hidden'))\n        .text((d) => sortIcon(d.sort));\n\n      // Separate out the visualization update so we have an accurate width after rendering textual elements\n      table\n        .select('thead')\n        .selectAll('tr')\n        .each(function() {\n          d3.select(this)\n            .selectAll('th')\n            .each(function(column) {\n              const width = d3\n                .select(this)\n                .select('.nameDiv')\n                .node().clientWidth;\n              const height = 10;\n\n              // Visualization\n              switch (column.type) {\n                case 'numeric': {\n                  const svg = d3\n                    .select(this)\n                    .select('.visDiv svg')\n                    .attr('width', width)\n                    .attr('height', height);\n\n                  const xScale = d3\n                    .scaleLinear()\n                    .domain(column.extent)\n                    .rangeRound([0, width]);\n\n                  const bin = d3.bin().domain(xScale.domain());\n\n                  const bins = bin(column.values);\n\n                  const yScale = d3\n                    .scaleLinear()\n                    .domain([0, d3.max(bins, (d) => d.length)])\n                    .range([height, 0]);\n\n                  // Histogram\n                  svg\n                    .selectAll('rect')\n                    .data(bins)\n                    .join((enter) => {\n                      const rect = enter.append('rect').style('fill', '#aaa');\n\n                      rect.append('title');\n\n                      return rect;\n                    })\n                    .attr('x', (d) => xScale(d.x0))\n                    .attr('y', (d) => yScale(d.length))\n                    .attr('width', (d) => xScale(d.x1) - xScale(d.x0) - 1)\n                    .attr('height', (d) => yScale(0) - yScale(d.length))\n                    .select('title')\n                    .text((d) => `${d.x0}-${d.x1}: ${d.length}`);\n\n                  break;\n                }\n\n                case 'categorical': {\n                  const svg = d3\n                    .select(this)\n                    .select('.visDiv svg')\n                    .attr('width', width)\n                    .attr('height', height);\n\n                  const colorScale = d3\n                    .scaleOrdinal()\n                    .domain(column.uniqueValues)\n                    .range(d3.schemeTableau10);\n\n                  const xScale = d3\n                    .scaleBand()\n                    .domain(column.uniqueValues)\n                    .range([0, width]);\n\n                  const yScale = d3\n                    .scaleLinear()\n                    .domain([0, d3.max(column.counts, (d) => d.count)])\n                    .range([height, 0]);\n\n                  // Bars\n                  svg\n                    .selectAll('rect')\n                    .data(column.counts)\n                    .join((enter) => {\n                      const rect = enter.append('rect');\n                      rect.append('title');\n                      return rect;\n                    })\n                    .attr('x', (d) => xScale(d.value))\n                    .attr('y', (d) => yScale(d.count))\n                    .attr('width', xScale.bandwidth())\n                    .attr('height', (d) => yScale(0) - yScale(d.count))\n                    .attr('fill', (d) => colorScale(d.value))\n                    .select('title')\n                    .text((d) => `${d.value}: ${d.count}`);\n\n                  break;\n                }\n\n                case 'id':\n                  d3.select(this)\n                    .select('.visDiv svg')\n                    .attr('width', width)\n                    .attr('height', height);\n\n                  break;\n\n                default:\n                  console.log(`Unknown column type ${column.type}`);\n              }\n            });\n        });\n    }\n\n    function drawBody() {\n      const text = (type, v, isCluster, maxDigits) => {\n        switch (type) {\n          case 'numeric': {\n            if (v !== null && isCluster && v.valid) {\n              // Display range and median for clusters\n              const median = d3.format(`.${maxDigits}r`)(v.median);\n\n              return v.min === v.max\n                ? median\n                : `<div class='range'><div class='extrema'>${v.min}</div><div>${median}</div><div class='extrema'>${v.max}<div>`;\n            } else {\n              return v === null || isCluster ? '' : v;\n            }\n          }\n\n          case 'categorical': {\n            if (v !== null && isCluster) {\n              // Display top category and number of other categories\n              const top = v.counts[0];\n              const others = v.counts.slice(1).filter((d) => d.count > 0);\n              const s = others.map((d) => `${d.value} (${d.count})`).join(', ');\n\n              const topString =\n                `<div>${top.value}` +\n                (top.count > 1 ? ` (${top.count})</div>` : '<div>');\n\n              const othersString =\n                others.length === 1\n                  ? `<div class='others' title=\"${s}\">and 1 other category</div>`\n                  : others.length > 1\n                  ? `<div class='others' title=\"${s}\">and ${others.length} other categories</div>`\n                  : `<div class='others none'>dummy text</div>`;\n\n              return `<div class='categories'>${topString}${othersString}</div>`;\n            } else {\n              return v === null ? '' : v;\n            }\n          }\n\n          case 'id': {\n            if (v !== null && isCluster) {\n              // Display first id and number of other ids\n              const top = v.counts[0];\n              const others = v.counts.slice(1).filter((d) => d.count > 0);\n              const s = others.map((d) => d.value).join(', ');\n\n              const topString = `<div>${top.value}<div>`;\n\n              const othersString =\n                others.length === 1\n                  ? `<div class='others' title=\"${s}\">and 1 other</div>`\n                  : others.length > 1\n                  ? `<div class='others' title=\"${s}\">and ${others.length} others</div>`\n                  : '';\n\n              return `<div class='categories'>${topString}${othersString}</div>`;\n            } else {\n              return v === null ? '' : v;\n            }\n          }\n\n          case 'cluster': {\n            return `<div class='clusterSize'>n = ${v}</div>`;\n          }\n\n          default:\n            return null;\n        }\n      };\n\n      // Insert pinned and expanded rows\n      const expandedData = [];\n\n      const sortColumn = columns.find(({ sort }) => sort !== null);\n      const clusterColumn = columns.find(({ cluster }) => cluster !== null);\n\n      data.forEach((row) => {\n        expandedData.push(row);\n\n        if (row.isCluster) {\n          const insert = row.indeces\n            .map((i) => allData[i])\n            .filter((d) => d.pinned || d.expanded);\n\n          const name = sortColumn ? sortColumn.name : clusterColumn.name;\n          const sort = sortColumn ? sortColumn.sort : clusterColumn.cluster;\n\n          insert.sort((a, b) => {\n            const v1 = a.values[name];\n            const v2 = b.values[name];\n\n            return v1 === null && v2 === null\n              ? 0\n              : v1 === null\n              ? 1\n              : v2 === null\n              ? -1\n              : d3[sort](v1, v2);\n          });\n\n          expandedData.push(...insert);\n        }\n      });\n\n      const maxSize = d3.max(data, (d) => (d.isCluster ? d.size : 1));\n\n      table\n        .select('tbody')\n        .selectAll('tr')\n        .data(expandedData)\n        .join('tr')\n        //.style('cursor', d => d.isCluster ? allData[d.indeces[0]].expanded ? 'zoom-out' : 'zoom-in': 'pointer')\n        .style('cursor', 'pointer')\n        .each(function(d) {\n          d3.select(this)\n            .selectAll('td')\n            .data(columns, (d) => d.name)\n            .join((enter) => {\n              const td = enter.append('td');\n\n              const div = td.append('div').attr('class', 'cellDiv');\n\n              const valueDiv = div.append('div').attr('class', 'valueDiv');\n\n              valueDiv\n                .append('div')\n                .attr('class', 'textDiv')\n                .classed('notId', (d) => d.type !== 'id')\n                .style('text-align', (d) =>\n                  d.type === 'numeric' ? 'center' : 'left'\n                );\n\n              valueDiv.append('div').attr('class', 'visDiv');\n\n              return td;\n            })\n            .classed('active', (d) => d.cluster !== null)\n            .style('padding-left', px)\n            .style('padding-right', px)\n            .style('padding-top', py)\n            .style('padding-bottom', py)\n            .each(function(column) {\n              // Text\n              const v = d.values[column.name];\n\n              const td = d3\n                .select(this)\n                .classed('expanded', d.expanded)\n                .classed('pinned', d.pinned);\n\n              td.select('.valueDiv .textDiv').html(\n                text(column.type, v, d.isCluster, column.maxDigits)\n              );\n\n              td.select('.cellDiv')\n                .selectAll('.clusterDiv')\n                .data(clustering && column.cluster !== null ? [v] : [])\n                .join((enter) => {\n                  const div = enter.append('div').attr('class', 'clusterDiv');\n\n                  div.append('div').attr('class', 'textDiv notId');\n\n                  div.append('div').attr('class', 'visDiv');\n\n                  return div;\n                })\n                .select('.textDiv')\n                .html(\n                  d.expanded ? '' : text('cluster', d.isCluster ? d.size : 1)\n                );\n            });\n        });\n\n      // Separate out the visualization update so we have an accurate width after rendering textual elements\n      table\n        .select('tbody')\n        .selectAll('tr')\n        .each(function(d, i) {\n          d3.select(this)\n            .selectAll('td')\n            .each(function(column) {\n              // Get column width\n              if (i === 0) {\n                column.width = d3\n                  .select(this)\n                  .select('.valueDiv')\n                  .node().clientWidth;\n              }\n\n              const v = d.values[column.name];\n\n              const height = 10;\n\n              // Visualization\n              switch (column.type) {\n                case 'numeric':\n                  d3.select(this)\n                    .select('.valueDiv .visDiv')\n                    .selectAll('svg')\n                    .data(v === null || (d.isCluster && !v.valid) ? [] : [v])\n                    .join('svg')\n                    .attr('width', column.width)\n                    .attr('height', height)\n                    .each(function(v) {\n                      const svg = d3.select(this);\n\n                      const height = 6;\n                      const y = height / 2;\n                      const r = height / 2;\n                      const w1 = r;\n                      const w2 = Math.max(Math.floor(w1 / 2), 1);\n\n                      const colorScale = d3\n                        .scaleLinear()\n                        .domain([\n                          column.extent[0],\n                          (column.extent[0] + column.extent[1]) / 2,\n                          column.extent[1],\n                        ])\n                        .range(['#2171b5', '#999', '#cb181d']);\n\n                      const xScale = d3\n                        .scaleLinear()\n                        .domain(column.extent)\n                        .range([r, column.width - r]);\n\n                      // Quartile line\n                      svg\n                        .selectAll('line')\n                        .data(\n                          d.isCluster\n                            ? [\n                                [v.min, v.max, v.median],\n                                [v.q1, v.q2, v.median],\n                              ]\n                            : []\n                        )\n                        .join((enter) =>\n                          enter\n                            .append('line')\n                            .style('margin', 0)\n                            .style('padding', 0)\n                            .style('stroke-linecap', 'round')\n                        )\n                        .attr('x1', (d) => xScale(d[0]))\n                        .attr('y1', y)\n                        .attr('x2', (d) => xScale(d[1]))\n                        .attr('y2', y)\n                        .style('stroke', (d) => colorScale(d[2]))\n                        .style('stroke-width', (d, i) => (i === 0 ? w2 : w1));\n\n                      // Median\n                      svg\n                        .selectAll('circle')\n                        .data(d.isCluster ? [v.median] : [v])\n                        .join('circle')\n                        .attr('cx', (d) => xScale(d))\n                        .attr('cy', y)\n                        .attr('r', r)\n                        .style('fill', (d) => colorScale(d));\n                    });\n\n                  break;\n\n                case 'categorical':\n                  d3.select(this)\n                    .select('.valueDiv .visDiv')\n                    .selectAll('svg')\n                    .data(v === null ? [] : [v])\n                    .join('svg')\n                    .attr('width', column.width)\n                    .attr('height', height)\n                    .each(function(v) {\n                      const svg = d3.select(this);\n\n                      const height = 10;\n\n                      const counts = v.counts\n                        ? v.counts\n                        : [{ value: v, count: 1 }];\n\n                      const colorScale = d3\n                        .scaleOrdinal()\n                        .domain(column.uniqueValues)\n                        .range(d3.schemeTableau10);\n\n                      const xScale = d3\n                        .scaleBand()\n                        .domain(column.uniqueValues)\n                        .range([0, column.width]);\n\n                      const yScale = d3\n                        .scaleLinear()\n                        .domain(\n                          categoryScaling === 'row'\n                            ? [0, d3.max(counts, (d) => d.count)]\n                            : [0, column.maxCount]\n                        )\n                        .range([height, 0]);\n\n                      // Bars\n                      svg\n                        .selectAll('rect')\n                        .data(counts)\n                        .join((enter) => {\n                          const rect = enter.append('rect');\n                          rect.append('title');\n                          return rect;\n                        })\n                        .attr('x', (d) => xScale(d.value))\n                        .attr('y', (d) => yScale(d.count))\n                        .attr('width', xScale.bandwidth())\n                        .attr('height', (d) => yScale(0) - yScale(d.count))\n                        .attr('fill', (d) => colorScale(d.value))\n                        .select('title')\n                        .text((d) => `${d.value}: ${d.count}`);\n                    });\n\n                  break;\n\n                case 'id':\n                  break;\n\n                default:\n                  console.log(`Unknown column type ${column.type}`);\n              }\n\n              // Cluster size\n              const clusterWidth = 30;\n\n              d3.select(this)\n                .select('.clusterDiv .visDiv')\n                .selectAll('svg')\n                .data([d])\n                .join('svg')\n                .attr('width', clusterWidth)\n                .attr('height', height)\n                .each(function(d) {\n                  const svg = d3.select(this);\n\n                  const height = 5;\n\n                  const size = d.isCluster ? d.size : 1;\n\n                  const xScale = d3\n                    .scaleLinear()\n                    .domain([0, maxSize])\n                    .range([0, clusterWidth]);\n\n                  // Bar\n                  svg\n                    .selectAll('rect')\n                    .data(d.expanded ? [] : [d])\n                    .join('rect')\n                    .attr('width', xScale(size))\n                    .attr('height', height)\n                    .attr('fill', '#bbb');\n                });\n            })\n            .on('mouseover', function(evt, column) {\n              table\n                .selectAll('th')\n                .filter((d) => d === column)\n                .select('.highlight')\n                .style('visibility', null);\n\n              if (visualizationMode === 'interactive') {\n                table\n                  .selectAll('td')\n                  .filter((d) => d === column || d.cluster !== null)\n                  .selectAll('.textDiv.notId')\n                  .style('visibility', null);\n              }\n\n              linkSvg\n                .selectAll('path')\n                .style('visibility', (d) =>\n                  d.source === column || d.target === column ? null : 'hidden'\n                );\n            })\n            .on('mouseout', function(evt, column) {\n              table\n                .selectAll('th')\n                .filter((d) => d === column)\n                .select('.highlight')\n                .style('visibility', (d) =>\n                  d.cluster !== null ? null : 'hidden'\n                );\n\n              if (visualizationMode === 'interactive') {\n                table\n                  .selectAll('td')\n                  .filter((d) => d === column || d.cluster !== null)\n                  .selectAll('.textDiv.notId')\n                  .style('visibility', 'hidden');\n              }\n\n              linkSvg.selectAll('path').style('visibility', null);\n            });\n        })\n        .on('mouseover', function(evt, row) {\n          table\n            .select('tbody')\n            .selectAll('tr')\n            .filter((d) => d === row)\n            .selectAll('td')\n            .classed('mouseOver', true);\n        })\n        .on('mouseout', function(evt, row) {\n          table\n            .select('tbody')\n            .selectAll('tr')\n            .filter((d) => d === row)\n            .selectAll('td')\n            .classed('mouseOver', false);\n        })\n        .on('click', function(evt, row) {\n          if (row.isCluster) {\n            row.indeces.forEach((i) => {\n              allData[i].expanded = !allData[i].expanded;\n            });\n\n            drawTable();\n          } else {\n            row.pinned = !row.pinned;\n\n            if (row.pinned) {\n              // Already shown\n              d3.select(this)\n                .selectAll('td')\n                .classed('pinned', true);\n            } else {\n              // Need to hide\n              drawTable();\n            }\n          }\n        });\n    }\n\n    function highlight() {\n      // Update border\n      const height = table.node() ? table.node().clientHeight - 4 : 0;\n\n      table\n        .selectAll('th')\n        .select('.highlight')\n        .style('height', `${height}px`)\n        .style('visibility', (d) => (d.cluster !== null ? null : 'hidden'));\n    }\n  }\n\n  function drawLinks() {\n    if (!table.node()) return;\n\n    if (relations.length === 0) {\n      computeRelations();\n    }\n\n    linkSvg.style('display', showLinks ? null : 'none');\n    if (!showLinks) return;\n\n    const width = table.node().offsetWidth;\n    const height = 200;\n    const aspect = width / height;\n\n    const offset = table.node().getBoundingClientRect().x;\n\n    table\n      .selectAll('th')\n      .nodes()\n      .forEach((d, i) => {\n        const { left, right } = d.getBoundingClientRect();\n\n        columns[i].pos = left + (right - left) / 2 - offset;\n      });\n\n    relations.forEach((d) => {\n      const x1 = d.source.pos;\n      const x2 = d.target.pos;\n\n      const y = height - (x2 - x1) / aspect;\n\n      const xi = d3.interpolateNumber(x1, x2);\n      const yi = d3.interpolateNumber(height, y);\n\n      d.points = [\n        { x: xi(0), y: yi(0) },\n        { x: xi(0.1), y: yi(0.5) },\n        { x: xi(0.5), y: yi(1) },\n        { x: xi(0.9), y: yi(0.5) },\n        { x: xi(1), y: yi(0) },\n      ];\n    });\n\n    const line = d3\n      .line()\n      .x((d) => d.x)\n      .y((d) => d.y)\n      .curve(d3.curveBasis);\n\n    const colorScale = d3.scaleSequential(d3.interpolateRdBu).domain([1, -1]);\n\n    const opacityScale = d3\n      .scaleLinear()\n      .domain([0, 1])\n      .range([0, 1]);\n\n    const widthScale = d3\n      .scaleLinear()\n      .domain([0, 1])\n      .range([0, 5]);\n\n    linkSvg\n      .attr('width', width)\n      .attr('height', height)\n      .selectAll('path')\n      .data(relations)\n      .join('path')\n      .attr('d', (d) => line(d.points))\n      .style('fill', 'none')\n      .style('stroke', (d) => colorScale(d.value))\n      .style('stroke-opacity', (d) => opacityScale(d.magnitude))\n      .style('stroke-width', (d) => widthScale(d.magnitude))\n      .style('stroke-linecap', 'round')\n      .append('title')\n      .text((d) => d.value);\n  }\n\n  function applyVisualizationMode() {\n    const td = table.selectAll('td');\n    td.selectAll('.textDiv.notId').style('visibility', textVisibility());\n    td.selectAll('svg').style('visibility', visVisibility());\n  }\n\n  digestable.applySimplification = function(_) {\n    if (!arguments.length) return applySimplification;\n    applySimplification = _;\n    const clusterColumn = columns.find(({ cluster }) => cluster !== null);\n    if (clusterColumn && clusterColumn.type !== 'id') {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  digestable.simplificationMethod = function(_) {\n    if (!arguments.length) return simplificationMethod;\n    simplificationMethod = _;\n    if (clustering) {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  digestable.simplificationAmount = function(_) {\n    if (!arguments.length) return simplificationAmount;\n    simplificationAmount = _;\n    if (clustering) {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  digestable.simplificationRows = function(_) {\n    if (!arguments.length) return simplificationRows;\n    simplificationRows = _;\n    if (clustering) {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  digestable.transformBase = function(_) {\n    if (!arguments.length) return transformBase;\n    transformBase = _;\n    if (clustering) {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  digestable.visualizationMode = function(_) {\n    if (!arguments.length) return visualizationMode;\n    visualizationMode = _;\n    applyVisualizationMode();\n    return digestable;\n  };\n\n  digestable.showLinks = function(_) {\n    if (!arguments.length) return showLinks;\n    showLinks = _;\n    drawTable();\n    return digestable;\n  };\n\n  digestable.categoryScaling = function(_) {\n    if (!arguments.length) return categoryScaling;\n    categoryScaling = _;\n    drawTable();\n    return digestable;\n  };\n\n  digestable.updateLinks = function() {\n    drawLinks();\n    return digestable;\n  };\n\n  // For registering event callbacks\n  digestable.on = function() {\n    const value = dispatcher.on.apply(dispatcher, arguments);\n    return value === dispatcher ? digestable : value;\n  };\n\n  function loadMoreData() {\n    addMoreData += 40;\n    if (addMoreData < [...allData].length) {\n      data = [...allData].slice(0, addMoreData);\n    } else {\n      isFullData = true;\n      data = [...allData];\n    }\n    drawTable();\n  }\n\n  digestable.loadMore = function() {\n    loadMoreData();\n    //console.log('digestable test');\n    return digestable;\n  };\n\n  digestable.isFullData = function() {\n    return isFullData;\n  };\n\n  return digestable;\n};\n","import * as d3 from 'd3';\n\nexport const clusterQuantiles = (values, n) => {\n  const range = d3.range(n);\n\n  const scale = d3.scaleQuantile()\n    .domain(values)\n    .range(range);\n\n  return values.reduce((clusters, value, i) => {\n    clusters[scale(value)].push(i);\n    return clusters;\n  }, range.map(() => []));\n};","export const groupCategories = values => {\n  return values.reduce((clusters, value, i, a) => {\n    if (i === 0) {\n      clusters.push([i]);\n    }\n    else {\n      if (value === a[i - 1]) {\n        clusters[clusters.length -1].push(i);\n      }\n      else {\n        clusters.push([i]);\n      }\n    }\n\n    return clusters;\n  }, []);\n}","import { useContext, useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { SimplifyContext, VisualizationContext } from '../../contexts';\nimport { useScrollHook } from '../../hooks';\nimport { digestable } from '../../digestable';\nimport { Container, Button } from 'react-bootstrap';\n\nexport const TableWrapper = ({ data }) => {\n  const [\n    { apply, method, amount, rows, transformBase },\n    simplifyDispatch,\n  ] = useContext(SimplifyContext);\n  const [{ mode, showLinks, categoryScaling }] = useContext(\n    VisualizationContext\n  );\n  const divRef = useRef();\n  const digestableRef = useRef();\n  const OuterDivRef = useRef();\n\n  const [isFullData, setIsFullData] = useState(false);\n\n  // Scroll callback\n  const onScroll = useScrollHook(\n    () => {\n      if (digestableRef.current) {\n        digestableRef.current.updateLinks();\n      }\n    },\n    OuterDivRef,\n    'horizontal'\n  );\n\n  // Create visualization\n  useEffect(() => {\n    if (!digestableRef.current) {\n      digestableRef.current = digestable()\n        .applySimplification(apply)\n        .simplificationMethod(method.name)\n        .simplificationAmount(amount)\n        .simplificationRows(rows)\n        .transformBase(transformBase)\n        .visualizationMode(mode)\n        .categoryScaling(categoryScaling)\n        .on('clusterByColumn', (column) => {\n          simplifyDispatch({\n            type: 'setColumnInfo',\n            columnType: column.type,\n            unique: column.uniqueValues.length,\n          });\n        });\n    }\n  }, []);\n\n  // Update data\n  useEffect(() => {\n    d3.select(divRef.current)\n      .datum(data)\n      .call(digestableRef.current);\n  }, [data]);\n\n  // Simplify parameters\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.applySimplification(apply);\n    }\n  }, [apply]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.simplificationMethod(method.name);\n    }\n  }, [method]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.simplificationAmount(amount);\n    }\n  }, [amount]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.simplificationRows(rows);\n    }\n  }, [rows]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.transformBase(transformBase);\n    }\n  }, [transformBase]);\n\n  // Visualization parameters\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.visualizationMode(mode);\n    }\n  }, [mode]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.showLinks(showLinks);\n    }\n  }, [showLinks]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.categoryScaling(categoryScaling);\n    }\n  }, [categoryScaling]);\n\n  //load-more parameter\n\n  // initial check\n  useEffect(() => {\n    if (digestableRef.current && digestableRef.current.isFullData()) {\n      setIsFullData(true);\n    }\n  }, []);\n\n  // click event\n  const loadMore = () => {\n    if (digestableRef.current) {\n      digestableRef.current.loadMore();\n      if (digestableRef.current.isFullData()) {\n        setIsFullData(true);\n      }\n    }\n  };\n\n  const Footer = ({ loadMore, isFullData }) => {\n    return (\n      <Container\n        style={{\n          padding: '2rem',\n          display: 'flex',\n          justifyContent: 'center',\n          position: 'relative',\n        }}\n      >\n        <Button disabled={isFullData} onClick={loadMore}>\n          {isFullData ? 'End of Data' : 'Load More'}\n        </Button>\n      </Container>\n    );\n  };\n  return (\n    <div\n      ref={OuterDivRef}\n      onScroll={onScroll}\n      style={{\n        height: '100%',\n        overflow: 'auto',\n      }}\n    >\n      <div ref={divRef}></div>\n      {apply ? (\n        <div></div>\n      ) : (\n        <Footer loadMore={loadMore} isFullData={isFullData} />\n      )}\n    </div>\n  );\n};\n","import { useRef } from 'react';\n\nexport const useScrollHook = (callback, divRef, scrollType) => {\n  const x = useRef(0);\n  const y = useRef(0);\n  const ticking = useRef(false);\n\n  return () => {\n    if (!divRef.current) return;\n\n    switch (scrollType) {\n      case 'horizontal':\n        {\n          const left = divRef.current.scrollLeft;\n\n          if (left !== x.current) {\n            x.current = left;\n\n            if (!ticking.current) {\n              window.requestAnimationFrame(() => {\n                callback(left);\n\n                ticking.current = false;\n              });\n\n              ticking.current = true;\n            }\n          }\n        }\n        break;\n\n      case 'vertical':\n        {\n          const top = divRef.current.scrollTop;\n\n          if (top !== y.current) {\n            y.current = top;\n\n            if (!ticking.current) {\n              window.requestAnimationFrame(() => {\n                callback(top);\n\n                ticking.current = false;\n              });\n\n              ticking.current = true;\n            }\n          }\n        }\n        break;\n\n      case 'both':\n        {\n          const left = divRef.current.scrollLeft;\n          const top = divRef.current.scrollTop;\n\n          if (left !== x.current || top !== y.current) {\n            x.current = left;\n            y.current = top;\n\n            if (!ticking.current) {\n              window.requestAnimationFrame(() => {\n                callback(left, top);\n\n                ticking.current = false;\n              });\n\n              ticking.current = true;\n            }\n          }\n        }\n        break;\n\n      default:\n        console.log('Invalid scroll type');\n    }\n  };\n};\n","import { Card, Stack } from 'react-bootstrap';\n\nconst { Header, Body, Subtitle } = Card;\n\nexport const ControlPanel = ({ title, subtitle, children }) => {\n  return (\n    <Card>\n      <Header>{ title }</Header>\n      <Body>\n        { subtitle && \n          <Subtitle className='mb-2 text-muted'>\n            { subtitle}\n          </Subtitle>\n        }\n        <Stack gap={ 3 }>\n          { children }\n        </Stack>\n      </Body>\n    </Card>\n  );\n};\n","import { useContext } from 'react';\nimport { Form, FloatingLabel } from 'react-bootstrap';\nimport { SimplifyContext } from '../../contexts';\nimport { ControlPanel } from './controlPanel';\n\nconst { Group, Label, Check, Select, Range, Control } = Form;\n\nexport const SimplifyControls = () => {\n  const [\n    { apply, columnType, methods, method, amount, transformBase, unique, rows }, \n    simplifyDispatch\n  ] = useContext(SimplifyContext);\n\n  const onApplyChange = evt => {\n    simplifyDispatch({ type: 'setApply', apply: evt.target.checked });\n  };\n\n  const onMethodChange = evt => {\n    simplifyDispatch({ type: 'setMethod', method: methods.find(({ name }) => name === evt.target.value) });\n  };\n\n  const onAmountChange = evt => {\n    simplifyDispatch({ type: 'setAmount', amount: +evt.target.value / 100 });\n  };\n\n  const onRowsChange = evt => {\n    simplifyDispatch({ type: 'setRows', rows: +evt.target.value });\n  };\n\n  const onTransformBaseChange = evt => {\n    simplifyDispatch({ type: 'setTransformBase', transformBase: +evt.target.value / 100 });\n  };\n\n  return (\n    <ControlPanel title='Simplification' subtitle={ `${ columnType } column` }>\n      <Group>\n        <Check \n          type='checkbox' \n          label='Apply'\n          id='apply-simplification-checkbox'              \n          size='sm'\n          checked={ apply }\n          disabled={ columnType === 'id' }\n          onChange={ onApplyChange }\n        />\n      </Group>\n      { columnType === 'numeric' &&\n        <>\n          <Group>\n            <Label>numeric column:</Label>\n            <FloatingLabel label='Method'>\n              <Select \n                value={ method.name }\n                onChange={ onMethodChange }\n              >\n                { methods.map(({ name }, i) => (\n                    <option \n                      key={ i } \n                      value={ name }\n                    >\n                      { name }\n                    </option>\n                  ))\n                }\n              </Select>\n            </FloatingLabel>\n          </Group>\n          { method.type === 'amount' ?\n            <Group>\n              <Label>Amount</Label>\n              <Range \n                min={ 0 }\n                max={ 100 }\n                step={ 1 }\n                value={ amount * 100 }\n                onChange={ onAmountChange }\n              />        \n            </Group>\n          :\n            <Group>\n              <Label >Number of rows</Label>\n              <Control\n                type='number'\n                min={ 1 }\n                max={ unique }\n                step={ 1 }\n                value={ rows }\n                onChange={ onRowsChange }\n              />        \n            </Group>\n          }\n          { method.transform && \n            <Group>\n              <Label>Depth weight</Label>\n              <Range \n                min={ 100 }\n                max={ 400 }\n                step={ 1 }\n                value={ transformBase * 100 }\n                onChange={ onTransformBaseChange }\n              />        \n            </Group>\n          }\n        </>\n      }\n    </ControlPanel>\n  );\n};\n","import { useContext } from 'react';\nimport { Form, FloatingLabel } from 'react-bootstrap';\nimport { VisualizationContext } from '../../contexts';\nimport { ControlPanel } from './controlPanel';\n\nconst { Group, Select, Check } = Form;\n\nexport const VisualizationControls = () => {\n  const [\n    { modes, mode, showLinks, categoryScalingOptions, categoryScaling }, \n    visualizationDispatch\n  ] = useContext(VisualizationContext);\n\n  const onModeChange = evt => {\n    visualizationDispatch({ type: 'setMode', mode: evt.target.value });\n  };\n\n  const onShowLinksChange = evt => {\n    visualizationDispatch({ type: 'setShowLinks', showLinks: evt.target.checked });\n  };\n\n  const onCategoryScalingChange = evt => {\n    visualizationDispatch({ type: 'setCategoryScaling', categoryScaling: evt.target.value });\n  };\n\n  return (\n    <ControlPanel title='Visualization'>\n      <Group>\n        <FloatingLabel label=\"Mode\">\n          <Select \n            value={ mode }\n            onChange={ onModeChange }\n          >\n            { modes.map((mode, i) => (\n                <option \n                  key={ i } \n                  value={ mode }\n                >\n                  { mode }\n                </option>\n              ))\n            }\n          </Select>\n        </FloatingLabel>\n      </Group>\n      <Group>\n        <Check \n          type='checkbox' \n          label='Show links'\n          id='show-links-checkbox'              \n          size='sm'\n          checked={ showLinks }\n          onChange={ onShowLinksChange }\n        />\n      </Group>\n      <Group>\n        <FloatingLabel label=\"Category scaling\">\n          <Select \n            value={ categoryScaling }\n            onChange={ onCategoryScalingChange }\n          >\n            { categoryScalingOptions.map((option, i) => (\n                <option \n                  key={ i } \n                  value={ option }\n                >\n                  { option }\n                </option>\n              ))\n            }\n          </Select>\n        </FloatingLabel>\n      </Group>\n    </ControlPanel>\n  );\n};\n","import { useState } from 'react';\nimport {\n  Container,\n  Navbar,\n  Row,\n  Col,\n  Form,\n  Spinner,\n  Stack,\n} from 'react-bootstrap';\nimport * as d3 from 'd3';\nimport { SimplifyProvider, VisualizationProvider } from './contexts';\nimport { TableWrapper } from './components/table-wrapper';\nimport { SimplifyControls, VisualizationControls } from './components/controls';\n\nconst { Brand } = Navbar;\nconst { Group, Control, Select } = Form;\n\nconst datasets = [\n  { name: 'MT Cars', url: '/digestable/data/mtcars.csv' },\n  { name: 'NFL Combine 2017', url: '/digestable/data/NFL Combine 2017.csv' },\n];\n\nexport const App = () => {\n  const [dataset, setDataset] = useState('');\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  // XXX: Add loading spinner\n  const loadData = async (url) => {\n    setData(null);\n    setLoading(true);\n\n    try {\n      const csvData = await d3.csv(url);\n\n      setData(csvData);\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onSelectChange = (evt) => {\n    const url = evt.target.value;\n\n    setDataset(url);\n    loadData(url);\n  };\n\n  const onFileSelect = (evt) => {\n    const file = evt.target.files.length === 1 ? evt.target.files[0] : null;\n\n    if (file) {\n      setDataset('');\n      loadData(URL.createObjectURL(file));\n    }\n  };\n\n  // const Footer = ({ context: { loadMore, loading } }) => {\n  //   return (\n  //     <Container\n  //       style={{\n  //         padding: '2rem',\n  //         display: 'flex',\n  //         justifyContent: 'center',\n  //       }}\n  //     >\n  //       <Button disabled={loading} onClick={loadMore}>\n  //         {loading ? 'Loading...' : 'Press to load more'}\n  //       </Button>\n  //     </Container>\n  //   );\n  // };\n  // const loadMore = useCallback(() => {\n  //   setLoading(true);\n  //   return setTimeout(() => {\n  //     setUsers((users) => [...users, ...generateUsers(100, users.length)]);\n  //     setLoading(() => false);\n  //   }, 500);\n  // }, [setUsers, setLoading]);\n\n  return (\n    <SimplifyProvider>\n      <VisualizationProvider>\n        <Navbar bg='dark' variant='dark'>\n          <Brand className='ms-2'>\n            <img\n              src='/digestable/digestable_512.png'\n              alt='digestable logo'\n              height='32px'\n              className='me-1'\n            />\n            <span className='text-align-bottom'>\n              diges<b>table</b>\n            </span>\n          </Brand>\n          <Form>\n            <Group as={Row} className='align-items-center'>\n              <Col>\n                <Select value={dataset} onChange={onSelectChange}>\n                  <option value='' disabled>\n                    Choose dataset\n                  </option>\n                  {datasets.map((dataset, i) => (\n                    <option key={i} value={dataset.url}>\n                      {dataset.name}\n                    </option>\n                  ))}\n                </Select>\n              </Col>\n              <Col sm='auto' className='text-center'>\n                <span className='text-light'>or</span>\n              </Col>\n              <Col>\n                <Control type='file' accept='.csv' onChange={onFileSelect} />\n              </Col>\n            </Group>\n          </Form>\n        </Navbar>\n        {data ? (\n          <Container fluid style={{ height: 'calc(100% - 100px)' }}>\n            <Row style={{ height: '100%' }}>\n              <Col xs={10} className='mt-3' style={{ height: '100%' }}>\n                <TableWrapper data={data} />\n              </Col>\n              <Col className='bg-dark'>\n                <Stack gap={3}>\n                  <SimplifyControls />\n                  <VisualizationControls />\n                </Stack>\n              </Col>\n            </Row>\n          </Container>\n        ) : (\n          <Container>\n            <div className='m-4 text-center'>\n              {loading ? (\n                <>\n                  <h5>Loading...</h5>\n                  <Spinner animation='border' />\n                </>\n              ) : (\n                <h3>No data</h3>\n              )}\n            </div>\n          </Container>\n        )}\n      </VisualizationProvider>\n    </SimplifyProvider>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './app';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}