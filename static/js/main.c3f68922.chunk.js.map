{"version":3,"sources":["contexts/simplify-context.js","contexts/visualization-context.js","digestable/clustering/kmeans.js","digestable/compute-relation-web-worker.js","digestable/digestable.js","digestable/clustering/clusterQuantiles.js","digestable/clustering/clusterGap.js","digestable/clustering/groupCategories.js","components/table-wrapper/Footer.js","components/table-wrapper/table-wrapper.js","hooks/use-scroll-hook.js","components/controls/controlPanel.js","components/controls/simplifyControls.js","components/controls/visualizationControls.js","search-modal.js","app.js","index.js"],"names":["methods","name","type","initialState","apply","columnType","method","amount","transformBase","unique","rows","unselect","reducer","state","action","Math","min","Error","SimplifyContext","createContext","SimplifyProvider","children","useReducer","dispatch","Provider","value","modes","categoryScalingOptions","mode","showLinks","categoryScaling","calculatingRelations","mainIndices","prepareIndices","showSearch","VisualizationContext","VisualizationProvider","calcMeanCentroid","dataSet","start","end","features","length","n","mean","i","push","j","getRandomCentroidsNaiveSharding","dataset","k","numSamples","step","floor","centroids","getRandomCentroids","index","max","centroidsIndex","random","indexOf","centroid","compareCentroids","a","b","shouldStop","oldCentroids","iterations","sameCount","getDistanceSQ","diffs","reduce","r","e","getLabels","labels","c","points","indeces","closestCentroidIndex","prevDistance","distance","getPointsMean","pointList","totalPoints","means","point","val","recalculateCentroids","newCentroid","newCentroidList","centroidGroup","Worker_fn","Worker","digestable","table","d3","linkSvg","allData","data","columns","relations","clustering","applyClusterColumn","NaN","applySortColumn","cluster_order","sort_order","applySimplification","simplificationMethod","simplificationAmount","simplificationRows","visualizationMode","isCalculating","missingValues","isMissing","d","includes","dispatcher","dispatcher_calcRel","dispatcher_select","displayRowNum","isFullData","selectIndices","selection","each","this","selectAll","join","enter","append","attr","inputData","map","group","unshift","filter","column","forEach","values","uniqueValues","Array","from","add","Set","validValues","numeric","isNaN","numbers","sort","isId","extent","maxDigits","significantDigits","counts","getCounts","count","clearSorting","clearClustering","createColumns","v","initialIndex","isCluster","cluster","pinned","expanded","cluster_col","find","clusterByColumn","sort_col","sortByColumn","processData","sortTable","drawTable","Object","entries","log10","log","String","split","n1","n2","abs","d1","d2","clusterColumn","v1","v2","sortData","maxCount","clusters","transformValues","base","valueScale","domain","range","pow","removeNull","nullIndex","nullCluster","slice","applyNull","concat","scale","clusterQuantiles","reverse","useNaiveSharding","converged","kmeans","numRows","gaps","gap","clusterGap","console","clusterNumeric","groupCategories","clusterCategorical","size","row","valid","median","q1","q2","warn","sortColumn","px","paddingX","py","paddingY","showSortButtons","info","th","select","div","nameDiv","text","style","on","evt","call","html","classed","width","node","clientWidth","height","svg","xScale","rangeRound","bins","bin","yScale","rect","x0","x1","s","tippy","nodes","colorScale","bandwidth","drawHeader","top","others","topString","othersString","expandedData","insert","maxSize","td","valueDiv","idx","isPinned","isExpanded","isExpanded_target","w2","w1","source","target","drawBody","applyVisualizationMode","clientHeight","highlight","drawLinks","window","computeRelationWorker","postMessage","onmessage","re","cols","offsetWidth","aspect","offset","getBoundingClientRect","x","left","right","pos","x2","y","xi","yi","line","curve","opacityScale","widthScale","magnitude","applyClusterColumnLink","clusterCol","ascending","arguments","applySortColumnLink","sortCol","_","r1","r2","selectInitialIndices","updateLinks","onCalcRel","onSelectIndices","loadMore","rowNum","parseInt","loadMoreData","fullDataLength","Footer","addrowNum","setAddRowNum","refreshDisplayRowNum","useState","displayRowNumAct","setDisplayRowNumAct","padding","display","justifyContent","position","zIndex","backgroundColor","Form","onSubmit","preventDefault","Row","Col","xs","Text","fontSize","Button","disabled","Control","onChange","TableWrapper","clusterAscending","sortAscending","mainPage","useContext","simplifyDispatch","visualizationDispatch","divRef","useRef","digestableRef","OuterDivRef","setIsFullData","onScroll","callback","scrollType","ticking","current","scrollLeft","requestAnimationFrame","scrollTop","useScrollHook","useEffect","datum","displayIndices","ref","overflow","Header","Card","Body","Subtitle","ControlPanel","title","subtitle","className","Stack","Group","Label","Check","Select","Range","SimplifyControls","simplification","label","id","checked","FloatingLabel","transform","variant","onClick","VisualizationControls","visual","Search_model","dataDisplayed","setDataDisplayed","handleSave","setValue","Modal","show","onHide","backdrop","keyboard","closeButton","Title","final_result","col","local_result","toLowerCase","InputGroup","placeholder","Brand","Navbar","datasets","url","App","setDataset","setData","loading","setLoading","loadData","csvData","queryParams","URLSearchParams","location","search","get","targetDataset","ds","loadwithPresetData","bg","src","alt","as","sm","accept","file","files","URL","createObjectURL","Container","fluid","Spinner","animation","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3f68922.chunk.js","sourcesContent":["import React, { createContext, useReducer } from 'react';\n\nconst methods = [\n  { name: 'quantiles', type: 'rows' },\n  //{ name: 'kmeans', type: 'rows' },\n  //{ name: 'gap', type: 'rows', transform: true },\n  //  { name: 'threshold', type: 'amount' }\n];\n\nconst initialState = {\n  apply: false,\n  columnType: 'numeric',\n  methods: methods,\n  method: methods[0],\n  amount: 0.5,\n  transformBase: 1,\n  unique: 0,\n  rows: 10,\n  unselect: false,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setApply':\n      return {\n        ...state,\n        apply: action.apply,\n      };\n\n    case 'setMethod':\n      return {\n        ...state,\n        method: action.method,\n      };\n\n    case 'setAmount':\n      return {\n        ...state,\n        amount: action.amount,\n      };\n\n    case 'setTransformBase':\n      return {\n        ...state,\n        transformBase: action.transformBase,\n      };\n\n    case 'setColumnInfo':\n      return {\n        ...state,\n        columnType: action.columnType,\n        unique: action.unique,\n        rows: Math.min(state.rows, action.unique),\n      };\n\n    case 'setRows':\n      return {\n        ...state,\n        rows: action.rows,\n      };\n\n    case 'setUnselect':\n      return {\n        ...state,\n        unselect: action.unselect,\n      };\n\n    default:\n      throw new Error('Invalid simplify context action: ' + action.type);\n  }\n};\n\nexport const SimplifyContext = createContext(initialState);\n\nexport const SimplifyProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <SimplifyContext.Provider value={[state, dispatch]}>\n      {children}\n    </SimplifyContext.Provider>\n  );\n};\n","import React, { createContext, useReducer } from 'react';\n\n// const modes = ['text', 'visualizations', 'both', 'interactive'];\nconst modes = ['text', 'visualizations', 'both'];\n// const categoryScalingOptions = ['row', 'column'];\nconst categoryScalingOptions = ['row'];\n\nconst initialState = {\n  modes: modes,\n  mode: modes[0],\n  showLinks: false,\n  categoryScalingOptions: categoryScalingOptions,\n  categoryScaling: categoryScalingOptions[0],\n  calculatingRelations: true,\n  mainIndices: [],\n  prepareIndices: [],\n  showSearch: false,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setMode':\n      return {\n        ...state,\n        mode: action.mode,\n      };\n\n    case 'setShowLinks':\n      return {\n        ...state,\n        showLinks: action.showLinks,\n      };\n\n    case 'setCategoryScaling':\n      return {\n        ...state,\n        categoryScaling: action.categoryScaling,\n      };\n\n    case 'setCalculatingRelations':\n      return {\n        ...state,\n        calculatingRelations: action.calculatingRelations,\n      };\n\n    case 'setMainIndices':\n      return {\n        ...state,\n        mainIndices: action.mainIndices,\n      };\n\n    case 'setPrepareIndices':\n      return {\n        ...state,\n        prepareIndices: action.prepareIndices,\n      };\n\n    case 'setShowSearch':\n      return {\n        ...state,\n        showSearch: action.showSearch,\n      };\n\n    default:\n      throw new Error('Invalid visualization context action: ' + action.type);\n  }\n};\n\nexport const VisualizationContext = createContext(initialState);\n\nexport const VisualizationProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <VisualizationContext.Provider value={[state, dispatch]}>\n      {children}\n    </VisualizationContext.Provider>\n  );\n};\n","// Adapted from https://medium.com/geekculture/implementing-k-means-clustering-from-scratch-in-javascript-13d71fbcb31e\n\nconst MAX_ITERATIONS = 50;\n\nfunction randomBetween(min, max) {\n  return Math.floor(\n    Math.random() * (max - min) + min\n  );\n}\n\nfunction calcMeanCentroid(dataSet, start, end) {\n  const features = dataSet[0].length;\n  const n = end - start;\n  let mean = [];\n  for (let i = 0; i < features; i++) {\n    mean.push(0);\n  }\n  for (let i = start; i < end; i++) {\n    for (let j = 0; j < features; j++) {\n      mean[j] = mean[j] + dataSet[i][j] / n;\n    }\n  }\n  return mean;\n}\n\nfunction getRandomCentroidsNaiveSharding(dataset, k) {\n  // implementation of a variation of naive sharding centroid initialization method\n  // (not using sums or sorting, just dividing into k shards and calc mean)\n  // https://www.kdnuggets.com/2017/03/naive-sharding-centroid-initialization-method.html\n  const numSamples = dataset.length;\n  // Divide dataset into k shards:\n  const step = Math.floor(numSamples / k);\n  const centroids = [];\n  for (let i = 0; i < k; i++) {\n    const start = step * i;\n    let end = step * (i + 1);\n    if (i + 1 === k) {\n      end = numSamples;\n    }\n    centroids.push(calcMeanCentroid(dataset, start, end));\n  }\n  return centroids;\n}\n\nfunction getRandomCentroids(dataset, k) {\n  // selects random points as centroids from the dataset\n  const numSamples = dataset.length;\n  const centroidsIndex = [];\n  let index;\n  while (centroidsIndex.length < k) {\n    index = randomBetween(0, numSamples);\n    if (centroidsIndex.indexOf(index) === -1) {\n      centroidsIndex.push(index);\n    }\n  }\n  const centroids = [];\n  for (let i = 0; i < centroidsIndex.length; i++) {\n    const centroid = [...dataset[centroidsIndex[i]]];\n    centroids.push(centroid);\n  }\n  return centroids;\n}\n\nfunction compareCentroids(a, b) {\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction shouldStop(oldCentroids, centroids, iterations) {\n  if (iterations > MAX_ITERATIONS) {\n    return true;\n  }\n  if (!oldCentroids || !oldCentroids.length) {\n    return false;\n  }\n  let sameCount = true;\n  for (let i = 0; i < centroids.length; i++) {\n    if (!compareCentroids(centroids[i], oldCentroids[i])) {\n      sameCount = false;\n    }\n  }\n  return sameCount;\n}\n\n// Calculate Squared Euclidean Distance\nfunction getDistanceSQ(a, b) {\n  const diffs = [];\n  for (let i = 0; i < a.length; i++) {\n    diffs.push(a[i] - b[i]);\n  }\n  return diffs.reduce((r, e) => (r + (e * e)), 0);\n}\n\n// Returns a label for each piece of data in the dataset. \nfunction getLabels(dataSet, centroids) {\n  // prep data structure:\n  const labels = {};\n  for (let c = 0; c < centroids.length; c++) {\n    labels[c] = {\n      points: [],\n      indeces: [],\n      centroid: centroids[c],\n    };\n  }\n  // For each element in the dataset, choose the closest centroid. \n  // Make that centroid the element's label.\n  for (let i = 0; i < dataSet.length; i++) {\n    const a = dataSet[i];\n    let closestCentroid, closestCentroidIndex, prevDistance;\n    for (let j = 0; j < centroids.length; j++) {\n      let centroid = centroids[j];\n      if (j === 0) {\n        closestCentroid = centroid;\n        closestCentroidIndex = j;\n        prevDistance = getDistanceSQ(a, closestCentroid);\n      } else {\n        // get distance:\n        const distance = getDistanceSQ(a, centroid);\n        if (distance < prevDistance) {\n          prevDistance = distance;\n          closestCentroid = centroid;\n          closestCentroidIndex = j;\n        }\n      }\n    }\n\n    labels[closestCentroidIndex].points.push(a);\n    labels[closestCentroidIndex].indeces.push(i);\n  }\n  return labels;\n}\n\nfunction getPointsMean(pointList) {\n  const totalPoints = pointList.length;\n  const means = [];\n  for (let j = 0; j < pointList[0].length; j++) {\n    means.push(0);\n  }\n  for (let i = 0; i < pointList.length; i++) {\n    const point = pointList[i];\n    for (let j = 0; j < point.length; j++) {\n      const val = point[j];\n      means[j] = means[j] + val / totalPoints;\n    }\n  }\n  return means;\n}\n\nfunction recalculateCentroids(dataSet, labels, k) {\n  // Each centroid is the geometric mean of the points that\n  // have that centroid's label. Important: If a centroid is empty (no points have\n  // that centroid's label) you should randomly re-initialize it.\n  let newCentroid;\n  const newCentroidList = [];\n  for (const k in labels) {\n    const centroidGroup = labels[k];\n    if (centroidGroup.points.length > 0) {\n      // find mean:\n      newCentroid = getPointsMean(centroidGroup.points);\n    } else {\n      // get new random centroid\n      newCentroid = getRandomCentroids(dataSet, 1)[0];\n    }\n    newCentroidList.push(newCentroid);\n  }\n  return newCentroidList;\n}\n\nexport function kmeans(dataset, k, useNaiveSharding = true) {\n  if (dataset.length && dataset[0].length && dataset.length >= k) {\n    // Initialize book keeping variables\n    let iterations = 0;\n    let oldCentroids, labels, centroids;\n\n    // Initialize centroids randomly\n    if (useNaiveSharding) {\n      centroids = getRandomCentroidsNaiveSharding(dataset, k);\n    } else {\n      centroids = getRandomCentroids(dataset, k);\n    }\n\n    // Run the main k-means algorithm\n    while (!shouldStop(oldCentroids, centroids, iterations)) {\n      // Save old centroids for convergence test.\n      oldCentroids = [...centroids];\n      iterations++;\n\n      // Assign labels to each datapoint based on centroids\n      labels = getLabels(dataset, centroids);\n      centroids = recalculateCentroids(dataset, labels, k);\n    }\n\n    const clusters = [];\n    for (let i = 0; i < k; i++) {\n      clusters.push(labels[i]);\n    }\n    const results = {\n      clusters: clusters,\n      centroids: centroids,\n      iterations: iterations,\n      converged: iterations <= MAX_ITERATIONS,\n    };\n    return results;\n  } else {\n    throw new Error('Invalid dataset');\n  }\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/compute-relation-web-worker.dc856299.worker.js\");\n}\n","import * as d3 from 'd3';\nimport {\n  clusterQuantiles,\n  kmeans,\n  clusterGap,\n  groupCategories,\n} from './clustering';\nimport './digestable.css';\n// import worker for relation calculation\n/* eslint-disable import/no-webpack-loader-syntax */\nimport Worker from 'worker-loader!./compute-relation-web-worker.js';\n\n// import tippy for nicer tooltip\nimport tippy from 'tippy.js';\nimport 'tippy.js/dist/tippy.css';\n\nexport const digestable = () => {\n  // The table\n  let table = d3.select(),\n    linkSvg = d3.select(),\n    // Data\n    allData = [],\n    data = [],\n    columns = [],\n    relations = [],\n    clustering = false,\n    // Parameters\n    applyClusterColumn = NaN,\n    applySortColumn = NaN,\n    cluster_order = 'ascending',\n    sort_order = 'ascending',\n    applySimplification = false,\n    simplificationMethod = 'threshold',\n    simplificationAmount = 0.9,\n    simplificationRows = 20,\n    transformBase = 1,\n    visualizationMode = 'text',\n    showLinks = false,\n    // web-worker para\n    isCalculating = false,\n    categoryScaling = 'row',\n    paddingX = 5,\n    paddingY = 0,\n    // Missing data\n    missingValues = ['', 'NA', 'na'],\n    isMissing = (d) => missingValues.includes(d),\n    // Event dispatcher\n    dispatcher = d3.dispatch('clusterByColumn'),\n    dispatcher_calcRel = d3.dispatch('CalculateRelations'),\n    dispatcher_select = d3.dispatch('selectIndices'),\n    // load more data parameters\n    displayRowNum = 100,\n    isFullData = false,\n    selectIndices = [];\n\n  function digestable(selection) {\n    selection.each(function(d) {\n      // Create SVG for links\n      linkSvg = d3\n        .select(this)\n        .selectAll('.linkSvg')\n        .data([[]])\n        .join((enter) => enter.append('svg').attr('class', 'linkSvg'));\n\n      // Create skeletal table\n      table = d3\n        .select(this)\n        .selectAll('table')\n        .data([[]])\n        .join((enter) => {\n          const table = enter.append('table');\n\n          table.append('thead').append('tr');\n          table.append('tbody');\n\n          return table;\n        });\n      createColumns(d);\n      createData(d);\n\n      // if have query string, change initial loading state\n      if (applyClusterColumn) {\n        const cluster_col = columns.find(\n          ({ name }) => name === applyClusterColumn\n        );\n        if (cluster_col) {\n          clusterByColumn(cluster_col);\n          if (cluster_order === 'ascending') {\n            clusterByColumn(cluster_col);\n          }\n        }\n      }\n      if (applySortColumn) {\n        const sort_col = columns.find(({ name }) => name === applySortColumn);\n        if (sort_col) {\n          sortByColumn(sort_col);\n          if (sort_order === 'ascending') {\n            sortByColumn(sort_col);\n          }\n        }\n      }\n      processData();\n      sortTable();\n      drawTable();\n    });\n\n    // // if have query string, change initial loading state\n\n    // // cluster by col\n    // if (applyClusterColumn) {\n    //   columns.forEach((d) => {\n    //     if (d.name === applyClusterColumn) {\n    //       clusterByColumn(d);\n    //       processData();\n    //       sortTable();\n    //       drawTable();\n    //       if (cluster_order === 'ascending') {\n    //         clusterByColumn(d);\n    //         processData();\n    //         sortTable();\n    //         drawTable();\n    //       }\n    //       dispatcher.call('clusterByColumn', this, d);\n    //     }\n    //   });\n    // }\n\n    // // if cluster by a categorical col then can sort\n    // if (applySortColumn) {\n    //   columns.forEach((d) => {\n    //     if (d.name === applySortColumn) {\n    //       sortByColumn(d);\n    //       sortTable();\n    //       drawTable();\n    //       if (sort_order === 'ascending') {\n    //         sortByColumn(d);\n    //         sortTable();\n    //         drawTable();\n    //       }\n    //     }\n    //   });\n    // }\n  }\n\n  // Helper functions\n  const textVisibility = () =>\n    visualizationMode === 'text' || visualizationMode === 'both'\n      ? 'visible'\n      : 'hidden';\n  const visVisibility = () =>\n    visualizationMode !== 'text' ? 'visible' : 'hidden';\n\n  const getCounts = (uniqueValues, values) =>\n    Object.entries(\n      values.reduce(\n        (counts, value) => {\n          counts[value]++;\n          return counts;\n        },\n        uniqueValues.reduce((counts, value) => {\n          counts[value] = 0;\n          return counts;\n        }, {})\n      )\n    )\n      .map(([key, value]) => ({\n        value: key,\n        count: value,\n      }))\n      .sort((a, b) => d3.descending(a.count, b.count));\n\n  const significantDigits = (n) => {\n    const log10 = Math.log(10);\n\n    // Split decimal\n    let [n1, n2] = String(n).split('.');\n\n    // Handle left of decimal\n    n1 = Math.abs(n1);\n    const d1 = Math.floor(Math.log(n) / log10) + 1;\n\n    // Handle right of decimal\n    const d2 = n2\n      ? n1 > 0\n        ? n2.length\n        : Math.floor(Math.log(+n) / log10) + 1\n      : 0;\n\n    return Math.max(d1 + d2, 1);\n  };\n\n  function clearSorting() {\n    columns.forEach((d) => (d.sort = null));\n  }\n\n  function clearClustering() {\n    columns.forEach((d) => (d.cluster = null));\n  }\n\n  function createColumns(inputData) {\n    columns = inputData.columns.map((d) => ({\n      name: d,\n    }));\n    const group = {\n      name: 'group',\n      type: 'group',\n    };\n    columns.unshift(group);\n    //console.log(columns);\n    // Determine column types and set column info\n    columns\n      .filter((column) => column.type !== 'group')\n      .forEach((column) => {\n        const { name } = column;\n        const values = inputData.map((d) => d[name]);\n        const uniqueValues = Array.from(\n          values.reduce((values, d) => values.add(d), new Set())\n        );\n        const validValues = uniqueValues.filter((value) => !isMissing(value));\n        const numeric = validValues.reduce(\n          (numeric, value) => numeric && !isNaN(value),\n          true\n        );\n        const numbers = numeric ? validValues.map((d) => +d) : null;\n\n        column.uniqueValues = uniqueValues;\n\n        if (numeric) {\n          if (numbers.length === inputData.length) {\n            // Heuristic to check for integer ID type\n            numbers.sort((a, b) => d3.ascending(a, b));\n\n            const isId = numbers.reduce(\n              (isId, d, i, a) => isId && (i === 0 || d === a[i - 1] + 1),\n              true\n            );\n\n            column.type = isId ? 'id' : 'numeric';\n          } else if (\n            numbers.length === 2 &&\n            numbers.includes(0) &&\n            numbers.includes(1)\n          ) {\n            // Treat binary as categorical\n            column.type = 'categorical';\n          } else {\n            column.type = 'numeric';\n          }\n        } else if (uniqueValues.length === inputData.length) {\n          column.type = 'id';\n        } else {\n          column.type = 'categorical';\n        }\n\n        if (column.type === 'numeric') {\n          column.values = values.filter((value) => !isMissing(value));\n          column.extent = d3.extent(numbers);\n          column.maxDigits = d3.max(numbers, significantDigits);\n        } else if (column.type === 'categorical') {\n          column.type = 'categorical';\n          column.counts = getCounts(uniqueValues, values).sort(\n            (a, b) => b.count - a.count\n          );\n          column.uniqueValues = column.counts.map(({ value }) => value);\n        }\n      });\n\n    clearSorting();\n    clearClustering();\n  }\n\n  function createData(inputData) {\n    allData = inputData.map((d, i) => {\n      const v = { ...d };\n\n      // Convert missing and numeric data\n      columns.forEach(({ type, name }) => {\n        const value = v[name];\n\n        if (isMissing(value)) {\n          v[name] = null;\n        } else if (type === 'numeric') {\n          v[name] = +value;\n        }\n      });\n\n      return {\n        initialIndex: i,\n        isCluster: false,\n        cluster: null,\n        pinned: false,\n        expanded: false,\n        values: v,\n      };\n    });\n  }\n\n  // function computeRelations() {\n  //   // Compute relations\n  //   relations = columns.reduce((relations, column1, i, a) => {\n  //     const v1 = allData.map((d) => d.values[column1.name]);\n\n  //     for (let j = i + 1; j < a.length; j++) {\n  //       const column2 = a[j];\n  //       const v2 = allData.map((d) => d.values[column2.name]);\n\n  //       const value =\n  //         column1.type === 'id' || column2.type === 'id'\n  //           ? 0\n  //           : column1.type === 'categorical' && column2.type === 'categorical'\n  //           ? cramersV(v1, v2)\n  //           : column1.type === 'categorical' && column2.type === 'numeric'\n  //           ? categoricalRegression(v1, v2)\n  //           : column1.type === 'numeric' && column2.type === 'categorical'\n  //           ? categoricalRegression(v2, v1)\n  //           : correlation(v1, v2);\n\n  //       relations.push({\n  //         source: column1,\n  //         target: column2,\n  //         value: value,\n  //         magnitude: Math.abs(value),\n  //       });\n  //     }\n\n  //     return relations;\n  //   }, []);\n\n  //   relations.sort((a, b) => d3.ascending(a.magnitude, b.magnitude));\n  // }\n\n  function sortByColumn(column) {\n    const sort = column.sort === 'descending' ? 'ascending' : 'descending';\n\n    clearSorting();\n\n    column.sort = sort;\n  }\n\n  function clusterByColumn(column) {\n    const cluster =\n      column.cluster === null\n        ? 'descending'\n        : column.cluster === 'descending'\n        ? 'ascending'\n        : null;\n\n    clearClustering();\n    clearSorting();\n\n    column.cluster = cluster;\n  }\n\n  function sortData() {\n    const clusterColumn = columns.find(({ cluster }) => cluster);\n\n    const sort = clusterColumn ? clusterColumn.cluster : 'ascending';\n\n    allData.sort((a, b) => {\n      const v1 = clusterColumn ? a.values[clusterColumn.name] : a.initialIndex;\n      const v2 = clusterColumn ? b.values[clusterColumn.name] : b.initialIndex;\n\n      return v1 === v2\n        ? 0\n        : v1 === null\n        ? 1\n        : v2 === null\n        ? -1\n        : d3[sort](v1, v2);\n    });\n  }\n\n  function processData() {\n    sortData();\n\n    // Clear expanded\n    allData.forEach((d) => (d.expanded = false));\n\n    const clusterColumn = columns.find(({ cluster }) => cluster);\n\n    // Initialize categorical and id column counts\n    columns\n      .filter(({ type }) => type !== 'numeric')\n      .forEach((column) => (column.maxCount = 1));\n\n    clustering =\n      applySimplification && clusterColumn && clusterColumn.type !== 'id';\n\n    if (clustering) {\n      const { name, type, cluster: sort } = clusterColumn;\n\n      const values = allData.map((d) => d.values[name]);\n\n      const clusters = (type === 'numeric'\n        ? clusterNumeric(values, sort)\n        : clusterCategorical(values)\n      ).filter((cluster) => cluster.length > 0);\n\n      data = clusters.map((cluster) => {\n        const size = cluster.length;\n\n        // No cluster if only 1\n        if (size === 1) {\n          allData[cluster[0]].cluster = null;\n\n          return allData[cluster[0]];\n        }\n\n        // Create row object\n        const row = {\n          isCluster: true,\n          indeces: cluster,\n          size: size,\n          values: {},\n        };\n\n        // Set cluster object for each item\n        cluster.forEach((i) => (allData[i].cluster = row));\n\n        // Compute info based on column type\n        columns.forEach((column) => {\n          const { name, type, uniqueValues } = column;\n\n          if (type === 'numeric') {\n            const values = cluster.map((i) => allData[i].values[name]);\n\n            if (values.length > 0) {\n              const validValues = values.filter((d) => d !== null);\n\n              row.values[name] =\n                validValues.length > 0\n                  ? {\n                      valid: true,\n                      values: values,\n                      validValues: validValues,\n                      min: d3.min(validValues),\n                      max: d3.max(validValues),\n                      median: d3.median(validValues),\n                      q1: d3.quantile(validValues, 0.25),\n                      q2: d3.quantile(validValues, 0.75),\n                    }\n                  : {\n                      valid: false,\n                      values: values,\n                    };\n            } else {\n              row.values[name] = null;\n            }\n          } else if (type === 'categorical') {\n            const values = cluster.map((i) => allData[i].values[name]);\n\n            if (values.length > 0) {\n              const counts = getCounts(uniqueValues, values);\n\n              column.maxCount = Math.max(column.maxCount, counts[0].count);\n\n              row.values[name] = {\n                counts: counts,\n              };\n            } else {\n              row.values[name] = null;\n            }\n          } else if (type === 'id') {\n            const values = cluster.map((i) => allData[i].values[name]);\n\n            if (values.length > 0) {\n              const counts = values.map((value) => ({\n                value: value,\n                count: 1,\n              }));\n\n              row.values[name] = {\n                counts: counts,\n              };\n            } else {\n              row.values[name] = null;\n            }\n          } else if (type === 'group') {\n            //console.log('group');\n          } else {\n            console.warn('Unknown column type: ' + type);\n          }\n        });\n\n        return row;\n      });\n    } else {\n      if (displayRowNum < [...allData].length) {\n        data = [...allData].slice(0, displayRowNum);\n      } else {\n        data = [...allData];\n        isFullData = true;\n      }\n    }\n\n    function clusterNumeric(values, sort) {\n      const transformValues = (values) => {\n        const base = sort === 'ascending' ? 1 / transformBase : transformBase;\n\n        const valueScale = d3\n          .scaleLinear()\n          .domain(d3.extent(values))\n          .range([0, 1]);\n\n        return values.map((d) => Math.pow(valueScale(d), base));\n      };\n\n      const removeNull = (values) => {\n        // Find first null. Always sorted to the end.\n        const nullIndex = values.indexOf(null);\n        const nullCluster =\n          nullIndex > -1 ? d3.range(nullIndex, values.length) : null;\n        const validValues =\n          nullIndex > -1 ? values.slice(0, nullIndex) : values;\n        const rows = nullCluster ? simplificationRows - 1 : simplificationRows;\n\n        return [validValues, nullCluster, rows];\n      };\n\n      const applyNull = (clusters, nullCluster) => {\n        return nullCluster ? clusters.concat([nullCluster]) : clusters;\n      };\n\n      switch (simplificationMethod) {\n        case 'quantiles': {\n          const [validValues, nullCluster, rows] = removeNull(values);\n          const clusters = clusterQuantiles(validValues, rows);\n          if (sort === 'descending') clusters.reverse();\n\n          return applyNull(clusters, nullCluster);\n        }\n\n        case 'kmeans': {\n          const [validValues, nullCluster, rows] = removeNull(values);\n          const { clusters } = kmeans(\n            validValues.map((d) => [d]),\n            rows\n          );\n          clusters.sort((a, b) => d3[sort](a.centroid[0], b.centroid[0]));\n\n          return applyNull(\n            clusters.map((cluster) => cluster.indeces),\n            nullCluster\n          );\n        }\n\n        case 'gap': {\n          const [validValues, nullCluster, rows] = removeNull(values);\n          const clusters = clusterGap(transformValues(validValues), rows);\n\n          return applyNull(clusters, nullCluster);\n        }\n\n        default:\n          console.log(`Unknown simplification method: ${simplificationMethod}`);\n      }\n    }\n\n    function clusterCategorical(values) {\n      return groupCategories(values);\n    }\n  }\n\n  function sortTable() {\n    const sortColumn = columns.find(({ sort }) => sort !== null);\n\n    if (!sortColumn) return;\n\n    const { name, type, sort, cluster } = sortColumn;\n\n    data.sort((a, b) => {\n      switch (type) {\n        case 'numeric': {\n          const v1 = a.isCluster ? a.values[name].median : a.values[name];\n          const v2 = b.isCluster ? b.values[name].median : b.values[name];\n\n          return v1 === v2\n            ? 0\n            : v1 === null\n            ? 1\n            : v2 === null\n            ? -1\n            : d3[sort](v1, v2);\n        }\n\n        case 'categorical': {\n          if (cluster) {\n            const v1 = a.isCluster\n              ? a.values[name].counts[0].count\n              : a.values[name]\n              ? 1\n              : null;\n            const v2 = b.isCluster\n              ? b.values[name].counts[0].count\n              : b.values[name]\n              ? 1\n              : null;\n\n            return v1 === v2\n              ? 0\n              : v1 === null\n              ? 1\n              : v2 === null\n              ? -1\n              : d3[sort](v1, v2);\n          } else {\n            const v1 = a.isCluster\n              ? a.values[name].counts[0].count / a.size\n              : a.values[name];\n            const v2 = b.isCluster\n              ? b.values[name].counts[0].count / b.size\n              : b.values[name];\n\n            return v1 === v2\n              ? 0\n              : v1 === null\n              ? 1\n              : v2 === null\n              ? -1\n              : d3[sort](v1, v2);\n          }\n        }\n\n        case 'id': {\n          const v1 = a.isCluster\n            ? a.values[name].counts[0].value\n            : a.values[name];\n          const v2 = b.isCluster\n            ? b.values[name].counts[0].value\n            : b.values[name];\n\n          return v1 === v2\n            ? 0\n            : v1 === null\n            ? 1\n            : v2 === null\n            ? -1\n            : d3[sort](v1, v2);\n        }\n\n        default:\n          console.log(`Unknown column type ${type}`);\n          return 0;\n      }\n    });\n  }\n\n  function drawTable() {\n    const px = paddingX + 'px';\n    const py = paddingY + 'px';\n\n    const clusterIcon = (cluster) =>\n      cluster === 'ascending' ? '⊻' : cluster === 'descending' ? '⊼' : '≡';\n    //cluster === 'ascending' ? '⇟' :\n    //cluster === 'descending' ? '⇞' :\n    //'≡'\n\n    const sortIcon = (sort) => (sort === 'ascending' ? '⇣' : '⇡');\n\n    const clusterColumn = columns.find(({ cluster }) => cluster);\n    const showSortButtons =\n      applySimplification &&\n      clusterColumn &&\n      clusterColumn.type === 'categorical';\n\n    // Reset svg widths for proper column width sizing\n    table.selectAll('svg').attr('width', 0);\n\n    drawHeader();\n    drawBody();\n    applyVisualizationMode();\n    highlight();\n    drawLinks();\n\n    function drawHeader() {\n      const info = (column) => {\n        switch (column.type) {\n          case 'numeric': {\n            // Display range and median for clusters\n            const min = column.extent[0];\n            const max = column.extent[1];\n\n            return min === max\n              ? min\n              : `<div class='range'><div>${min}</div><div class='dash'><hr /></div><div>${max}</div>`;\n          }\n\n          case 'categorical': {\n            return `<div>${column.uniqueValues.length} categories</div>`;\n          }\n\n          case 'id': {\n            return `<div>${column.uniqueValues.length} unique values<div>`;\n          }\n\n          default:\n            return null;\n        }\n      };\n\n      // Header elements\n      const th = table\n        .select('thead')\n        .select('tr')\n        .selectAll('th')\n        .data(columns, (d) => d.name)\n        .join((enter) => {\n          const th = enter.append('th');\n          // enter.each(function(column) {\n          //   if (column.type === 'group') {\n          //     d3.select(this)\n          //       .select('th')\n          //       .style('visibility', 'hidden');\n          //   }\n          // });\n          const div = th.each(function(column) {\n            d3.select(this)\n              .selectAll('.headerDiv')\n              //.data(column.type === 'group' ? [] : [column])\n              .data([column])\n              .join((enter) => {\n                const div = enter.append('div').attr('class', 'headerDiv');\n                //console.log(div);\n                const nameDiv = div.append('div').attr('class', 'nameDiv');\n                if (column.type === 'group') {\n                  nameDiv\n                    .append('div')\n                    .text('\\u25C6\\uFE0E')\n                    .style('margin', 'auto');\n                } else {\n                  nameDiv.append('div').text((d) => d.name);\n                  nameDiv\n                    .append('button')\n                    .attr('class', 'headerButton sortButton')\n                    .on('click', (evt, d) => {\n                      sortByColumn(d);\n                      sortTable();\n                      drawTable();\n                    });\n\n                  nameDiv\n                    .append('button')\n                    .attr('class', 'headerButton clusterButton')\n                    .style('font-weight', 'bold')\n                    .on('click', (evt, d) => {\n                      clusterByColumn(d);\n                      processData();\n                      sortTable();\n                      drawTable();\n\n                      dispatcher.call('clusterByColumn', this, d);\n                    });\n                }\n\n                div\n                  .append('div')\n                  .attr('class', 'info')\n                  .html(info);\n\n                div.each(function(column) {\n                  d3.select(this)\n                    .selectAll('.visDiv')\n                    .data(column.type === 'id' ? [] : [column])\n                    .join((enter) => {\n                      const div = enter.append('div').attr('class', 'visDiv');\n\n                      div.append('svg');\n\n                      return div;\n                    });\n                });\n\n                th.append('div').attr('class', 'highlight');\n\n                return div;\n              });\n          });\n\n          //   const div = th.append('div').attr('class', 'headerDiv');\n          //   const nameDiv = div.append('div').attr('class', 'nameDiv');\n          //   nameDiv.append('div').text((d) => d.name);\n          //   nameDiv\n          //     .append('button')\n          //     .attr('class', 'headerButton sortButton')\n          //     .on('click', (evt, d) => {\n          //       sortByColumn(d);\n          //       sortTable();\n          //       drawTable();\n          //     });\n          //   nameDiv\n          //     .append('button')\n          //     .attr('class', 'headerButton clusterButton')\n          //     .style('font-weight', 'bold')\n          //     .on('click', (evt, d) => {\n          //       clusterByColumn(d);\n          //       processData();\n          //       sortTable();\n          //       drawTable();\n          //       dispatcher.call('clusterByColumn', this, d);\n          //     });\n          //   div\n          //     .append('div')\n          //     .attr('class', 'info')\n          //     .html(info);\n          //   div.each(function(column) {\n          //     d3.select(this)\n          //       .selectAll('.visDiv')\n          //       .data(column.type === 'id' ? [] : [column])\n          //       .join((enter) => {\n          //         const div = enter.append('div').attr('class', 'visDiv');\n          //         div.append('svg');\n          //         return div;\n          //       });\n          //   });\n          //   th.append('div').attr('class', 'highlight');\n\n          return th;\n        })\n        .classed('active', (d) => d.cluster !== null)\n        .style('padding-left', px)\n        .style('padding-right', px)\n        .style('padding-top', py)\n        .style('padding-bottom', py);\n\n      // Update buttons\n      th.select('.clusterButton')\n        .classed('active', (d) => d.cluster !== null)\n        .text((d) => clusterIcon(d.cluster));\n\n      th.select('.sortButton')\n        .classed('active', (d) => d.sort !== null)\n        .style('visibility', (d) => (showSortButtons ? null : 'hidden'))\n        .text((d) => sortIcon(d.sort));\n\n      // Separate out the visualization update so we have an accurate width after rendering textual elements\n      table\n        .select('thead')\n        .selectAll('tr')\n        .each(function() {\n          d3.select(this)\n            .selectAll('th')\n            .each(function(column) {\n              if (column.type === 'group') {\n                var width = 5;\n              } else {\n                width = d3\n                  .select(this)\n                  .select('.nameDiv')\n                  .node().clientWidth;\n              }\n              const height = 10;\n\n              // Visualization\n              switch (column.type) {\n                case 'numeric': {\n                  const svg = d3\n                    .select(this)\n                    .select('.visDiv svg')\n                    .attr('width', width)\n                    .attr('height', height);\n\n                  const xScale = d3\n                    .scaleLinear()\n                    .domain(column.extent)\n                    .rangeRound([0, width]);\n\n                  const bin = d3.bin().domain(xScale.domain());\n\n                  const bins = bin(column.values);\n\n                  const yScale = d3\n                    .scaleLinear()\n                    .domain([0, d3.max(bins, (d) => d.length)])\n                    .range([height, 0]);\n\n                  // Histogram\n                  svg\n                    .selectAll('rect')\n                    .data(bins)\n                    .join((enter) => {\n                      const rect = enter.append('rect').style('fill', '#aaa');\n\n                      rect.append('title');\n\n                      return rect;\n                    })\n                    .attr('x', (d) => xScale(d.x0))\n                    .attr('y', (d) => yScale(d.length))\n                    .attr('width', (d) => xScale(d.x1) - xScale(d.x0) - 1)\n                    .attr('height', (d) => yScale(0) - yScale(d.length))\n                    //.select('title')\n                    //.text((d) => `${d.x0}-${d.x1}: ${d.length}`);\n                    .attr(\n                      'data-tippy-content',\n                      (d) => `${d.x0}-${d.x1}: ${d.length}`\n                    )\n                    .call((s) => tippy(s.nodes()));\n\n                  break;\n                }\n\n                case 'categorical': {\n                  const svg = d3\n                    .select(this)\n                    .select('.visDiv svg')\n                    .attr('width', width)\n                    .attr('height', height);\n\n                  const colorScale = d3\n                    .scaleOrdinal()\n                    .domain(column.uniqueValues)\n                    .range(d3.schemeTableau10);\n\n                  const xScale = d3\n                    .scaleBand()\n                    .domain(column.uniqueValues)\n                    .range([0, width]);\n\n                  const yScale = d3\n                    .scaleLinear()\n                    .domain([0, d3.max(column.counts, (d) => d.count)])\n                    .range([height, 0]);\n\n                  // Bars\n                  svg\n                    .selectAll('rect')\n                    .data(column.counts)\n                    .join((enter) => {\n                      const rect = enter.append('rect');\n                      rect.append('title');\n                      return rect;\n                    })\n                    .attr('x', (d) => xScale(d.value))\n                    .attr('y', (d) => yScale(d.count))\n                    .attr('width', xScale.bandwidth())\n                    .attr('height', (d) => yScale(0) - yScale(d.count))\n                    .attr('fill', (d) => colorScale(d.value))\n                    //.select('title')\n                    //.text((d) => `${d.value}: ${d.count}`);\n                    .attr('data-tippy-content', (d) => `${d.value}: ${d.count}`)\n                    .call((s) => tippy(s.nodes()));\n\n                  break;\n                }\n\n                case 'id':\n                  d3.select(this)\n                    .select('.visDiv svg')\n                    .attr('width', width)\n                    .attr('height', height);\n\n                  break;\n\n                case 'group': {\n                  d3.select(this)\n                    .select('.visDiv svg')\n                    .attr('width', width)\n                    .attr('height', height);\n\n                  break;\n                }\n                default:\n                  console.log(`Unknown column type ${column.type}`);\n              }\n            });\n        });\n    }\n\n    function drawBody() {\n      const text = (type, v, isCluster, maxDigits) => {\n        switch (type) {\n          case 'numeric': {\n            if (v !== null && isCluster && v.valid) {\n              // Display range and median for clusters\n              const median = d3.format(`.${maxDigits}r`)(v.median);\n\n              return v.min === v.max\n                ? median\n                : `<div class='range'><div class='extrema'>${v.min}</div><div>${median}</div><div class='extrema'>${v.max}<div>`;\n            } else {\n              return v === null || isCluster ? '' : v;\n            }\n          }\n\n          case 'categorical': {\n            if (v !== null && isCluster) {\n              // Display top category and number of other categories\n              const top = v.counts[0];\n              const others = v.counts.slice(1).filter((d) => d.count > 0);\n              const s = others.map((d) => `${d.value} (${d.count})`).join(', ');\n\n              const topString =\n                `<div>${top.value}` +\n                (top.count > 1 ? ` (${top.count})</div>` : '<div>');\n\n              const othersString =\n                others.length === 1\n                  ? `<div class='others' title=\"${s}\">and 1 other category</div>`\n                  : others.length > 1\n                  ? `<div class='others' title=\"${s}\">and ${others.length} other categories</div>`\n                  : `<div class='others none'>dummy text</div>`;\n\n              return `<div class='categories'>${topString}${othersString}</div>`;\n            } else {\n              return v === null ? '' : v;\n            }\n          }\n\n          case 'id': {\n            if (v !== null && isCluster) {\n              // Display first id and number of other ids\n              const top = v.counts[0];\n              const others = v.counts.slice(1).filter((d) => d.count > 0);\n              const s = others.map((d) => d.value).join(', ');\n\n              const topString = `<div>${top.value}<div>`;\n\n              const othersString =\n                others.length === 1\n                  ? `<div class='others' title=\"${s}\">and 1 other</div>`\n                  : others.length > 1\n                  ? `<div class='others' title=\"${s}\">and ${others.length} others</div>`\n                  : '';\n\n              return `<div class='categories'>${topString}${othersString}</div>`;\n            } else {\n              return v === null ? '' : v;\n            }\n          }\n\n          case 'cluster': {\n            return `<div class='clusterSize'>n = ${v}</div>`;\n          }\n\n          case 'group': {\n            return `<div class='group' align=\"center\">${v}</div>`;\n          }\n\n          case 'Diamond': {\n            return `<div class='group' align=\"center\", style=\"opacity:0.5;\" >${v}</div>`;\n          }\n\n          default:\n            return null;\n        }\n      };\n\n      // Insert pinned and expanded rows\n      const expandedData = [];\n\n      const sortColumn = columns.find(({ sort }) => sort !== null);\n      const clusterColumn = columns.find(({ cluster }) => cluster !== null);\n      // console.log(sortColumn);\n      // console.log(clusterColumn);\n\n      data.forEach((row) => {\n        expandedData.push(row);\n\n        if (row.isCluster) {\n          const insert = row.indeces\n            .map((i) => allData[i])\n            .filter((d) => d.pinned || d.expanded);\n\n          const name = sortColumn ? sortColumn.name : clusterColumn.name;\n          const sort = sortColumn ? sortColumn.sort : clusterColumn.cluster;\n\n          insert.sort((a, b) => {\n            const v1 = a.values[name];\n            const v2 = b.values[name];\n\n            return v1 === null && v2 === null\n              ? 0\n              : v1 === null\n              ? 1\n              : v2 === null\n              ? -1\n              : d3[sort](v1, v2);\n          });\n\n          expandedData.push(...insert);\n        }\n      });\n\n      const maxSize = d3.max(data, (d) => (d.isCluster ? d.size : 1));\n\n      table\n        .select('tbody')\n        .selectAll('tr')\n        .data(expandedData)\n        .join('tr')\n        //.style('cursor', d => d.isCluster ? allData[d.indeces[0]].expanded ? 'zoom-out' : 'zoom-in': 'pointer')\n        .style('cursor', 'pointer')\n        .each(function(d, row) {\n          d3.select(this)\n            .selectAll('td')\n            .data(columns, (d) => d.name)\n            .join((enter) => {\n              const td = enter.append('td');\n\n              const div = td.append('div').attr('class', 'cellDiv');\n\n              const valueDiv = div.append('div').attr('class', 'valueDiv');\n\n              valueDiv\n                .append('div')\n                .attr('class', 'textDiv')\n                .classed('notId', (d) => d.type !== 'id')\n                .style('text-align', (d) =>\n                  d.type === 'numeric' ? 'center' : 'left'\n                );\n\n              valueDiv.append('div').attr('class', 'visDiv');\n\n              return td;\n            })\n            .classed('active', (d) => d.cluster !== null)\n            .style('padding-left', px)\n            .style('padding-right', px)\n            .style('padding-top', py)\n            .style('padding-bottom', py)\n            .each(function(column, idx) {\n              // Text\n              //console.log(d);\n              const v = d.values[column.name];\n\n              const td = d3\n                .select(this)\n                .classed('expanded', d.expanded)\n                .classed('pinned', d.pinned);\n\n              // clearer grouping indication for pinned rows\n              const isPinned = d3.select(this).classed('pinned');\n              const isExpanded = d3.select(this).classed('expanded');\n              if (idx === 0) {\n                if (d.isCluster) {\n                  var isExpanded_target = false;\n                  d.indeces.forEach((i) => {\n                    isExpanded_target = allData[i].expanded;\n                  });\n                  if (isExpanded_target) {\n                    td.select('.valueDiv').html(\n                      text(\n                        column.type,\n                        '\\u25BC\\uFE0E',\n                        d.isCluster,\n                        column.maxDigits\n                      ) // BLACK DOWN-POINTING TRIANGLE\n                    );\n                  } else {\n                    td.select('.valueDiv').html(\n                      text(\n                        column.type,\n                        '\\u25B6\\uFE0E',\n                        d.isCluster,\n                        column.maxDigits\n                      ) //BLACK RIGHT-POINTING TRIANGLE\n                    );\n                  }\n                } else if (isPinned) {\n                  td.select('.valueDiv').html(\n                    text(\n                      'Diamond',\n                      '\\u25C6\\uFE0E',\n                      d.isCluster,\n                      column.maxDigits\n                    ) // BLACK DIAMOND\n                  );\n                } else if (isExpanded) {\n                  td.select('.valueDiv').html(\n                    text(\n                      'Diamond',\n                      '\\u25C7\\uFE0E',\n                      d.isCluster,\n                      column.maxDigits\n                    ) // WHITE DIAMOND\n                  );\n                } else {\n                  td.select('.valueDiv').html(\n                    text(column.type, '', d.isCluster, column.maxDigits)\n                  );\n                }\n              } else if (idx === 1) {\n                if (isExpanded || (isPinned && clustering)) {\n                  td.select('.valueDiv .textDiv').html(\n                    text(\n                      column.type,\n                      '&emsp;' + v,\n                      d.isCluster,\n                      column.maxDigits\n                    )\n                  );\n                } else {\n                  td.select('.valueDiv .textDiv').html(\n                    text(column.type, v, d.isCluster, column.maxDigits)\n                  );\n                }\n              } else {\n                td.select('.valueDiv .textDiv').html(\n                  text(column.type, v, d.isCluster, column.maxDigits)\n                );\n              }\n\n              td.select('.cellDiv')\n                .selectAll('.clusterDiv')\n                .data(clustering && column.cluster !== null ? [v] : [])\n                .join((enter) => {\n                  const div = enter.append('div').attr('class', 'clusterDiv');\n\n                  div.append('div').attr('class', 'textDiv notId');\n\n                  div.append('div').attr('class', 'visDiv');\n\n                  return div;\n                })\n                .select('.textDiv')\n                .html(\n                  d.expanded ? '' : text('cluster', d.isCluster ? d.size : 1)\n                );\n            });\n        });\n\n      // Separate out the visualization update so we have an accurate width after rendering textual elements\n      table\n        .select('tbody')\n        .selectAll('tr')\n        .each(function(d, i) {\n          d3.select(this)\n            .selectAll('td')\n            .each(function(column) {\n              // Get column width\n              if (i === 0) {\n                column.width = d3\n                  .select(this)\n                  .select('.valueDiv')\n                  .node().clientWidth;\n              }\n\n              const v = d.values[column.name];\n\n              const height = 10;\n\n              // Visualization\n              switch (column.type) {\n                case 'numeric':\n                  d3.select(this)\n                    .select('.valueDiv .visDiv')\n                    .selectAll('svg')\n                    .data(v === null || (d.isCluster && !v.valid) ? [] : [v])\n                    .join('svg')\n                    .attr('width', column.width)\n                    .attr('height', height)\n                    .each(function(v) {\n                      const svg = d3.select(this);\n\n                      const height = 6;\n                      const y = height / 2;\n                      const r = height / 2;\n                      const w1 = r;\n                      const w2 = Math.max(Math.floor(w1 / 2), 1);\n\n                      const colorScale = d3\n                        .scaleLinear()\n                        .domain([\n                          column.extent[0],\n                          (column.extent[0] + column.extent[1]) / 2,\n                          column.extent[1],\n                        ])\n                        .range(['#2171b5', '#999', '#cb181d']);\n\n                      const xScale = d3\n                        .scaleLinear()\n                        .domain(column.extent)\n                        .range([r, column.width - r]);\n\n                      // Quartile line\n                      svg\n                        .selectAll('line')\n                        .data(\n                          d.isCluster\n                            ? [\n                                [v.min, v.max, v.median],\n                                [v.q1, v.q2, v.median],\n                              ]\n                            : []\n                        )\n                        .join((enter) =>\n                          enter\n                            .append('line')\n                            .style('margin', 0)\n                            .style('padding', 0)\n                            .style('stroke-linecap', 'round')\n                        )\n                        .attr('x1', (d) => xScale(d[0]))\n                        .attr('y1', y)\n                        .attr('x2', (d) => xScale(d[1]))\n                        .attr('y2', y)\n                        .style('stroke', (d) => colorScale(d[2]))\n                        .style('stroke-width', (d, i) => (i === 0 ? w2 : w1));\n\n                      // Median\n                      svg\n                        .selectAll('circle')\n                        .data(d.isCluster ? [v.median] : [v])\n                        .join('circle')\n                        .attr('cx', (d) => xScale(d))\n                        .attr('cy', y)\n                        .attr('r', r)\n                        .style('fill', (d) => colorScale(d));\n                    });\n\n                  break;\n\n                case 'categorical':\n                  d3.select(this)\n                    .select('.valueDiv .visDiv')\n                    .selectAll('svg')\n                    .data(v === null ? [] : [v])\n                    .join('svg')\n                    .attr('width', column.width)\n                    .attr('height', height)\n                    .each(function(v) {\n                      const svg = d3.select(this);\n\n                      const height = 10;\n\n                      const counts = v.counts\n                        ? v.counts\n                        : [\n                            {\n                              value: v,\n                              count: 1,\n                            },\n                          ];\n\n                      const colorScale = d3\n                        .scaleOrdinal()\n                        .domain(column.uniqueValues)\n                        .range(d3.schemeTableau10);\n\n                      const xScale = d3\n                        .scaleBand()\n                        .domain(column.uniqueValues)\n                        .range([0, column.width]);\n\n                      const yScale = d3\n                        .scaleLinear()\n                        .domain(\n                          categoryScaling === 'row'\n                            ? [0, d3.max(counts, (d) => d.count)]\n                            : [0, column.maxCount]\n                        )\n                        .range([height, 0]);\n\n                      // Bars\n                      svg\n                        .selectAll('rect')\n                        .data(counts)\n                        .join((enter) => {\n                          const rect = enter.append('rect');\n                          rect.append('title');\n                          return rect;\n                        })\n                        .attr('x', (d) => xScale(d.value))\n                        .attr('y', (d) => yScale(d.count))\n                        .attr('width', xScale.bandwidth())\n                        .attr('height', (d) => yScale(0) - yScale(d.count))\n                        .attr('fill', (d) => colorScale(d.value))\n                        // .select('title')\n                        // .text((d) => `${d.value}: ${d.count}`);\n                        .attr(\n                          'data-tippy-content',\n                          (d) => `${d.value}: ${d.count}`\n                        )\n                        .call((s) => tippy(s.nodes()));\n                    });\n\n                  break;\n\n                case 'id':\n                  break;\n\n                case 'group':\n                  break;\n\n                default:\n                  console.log(`Unknown column type ${column.type}`);\n              }\n\n              // Cluster size\n              const clusterWidth = 30;\n\n              d3.select(this)\n                .select('.clusterDiv .visDiv')\n                .selectAll('svg')\n                .data([d])\n                .join('svg')\n                .attr('width', clusterWidth)\n                .attr('height', height)\n                .each(function(d) {\n                  const svg = d3.select(this);\n\n                  const height = 5;\n\n                  const size = d.isCluster ? d.size : 1;\n\n                  const xScale = d3\n                    .scaleLinear()\n                    .domain([0, maxSize])\n                    .range([0, clusterWidth]);\n\n                  // Bar\n                  svg\n                    .selectAll('rect')\n                    .data(d.expanded ? [] : [d])\n                    .join('rect')\n                    .attr('width', xScale(size))\n                    .attr('height', height)\n                    .attr('fill', '#bbb');\n                });\n            })\n            .on('mouseover', function(evt, column) {\n              table\n                .selectAll('th')\n                .filter((d) => d === column)\n                .select('.highlight')\n                .style('visibility', null);\n\n              if (visualizationMode === 'interactive') {\n                table\n                  .selectAll('td')\n                  .filter((d) => d === column || d.cluster !== null)\n                  .selectAll('.textDiv.notId')\n                  .style('visibility', null);\n              }\n\n              linkSvg\n                .selectAll('path')\n                .style('visibility', (d) =>\n                  d.source === column || d.target === column ? null : 'hidden'\n                );\n            })\n            .on('mouseout', function(evt, column) {\n              table\n                .selectAll('th')\n                .filter((d) => d === column)\n                .select('.highlight')\n                .style('visibility', (d) =>\n                  d.cluster !== null ? null : 'hidden'\n                );\n\n              if (visualizationMode === 'interactive') {\n                table\n                  .selectAll('td')\n                  .filter((d) => d === column || d.cluster !== null)\n                  .selectAll('.textDiv.notId')\n                  .style('visibility', 'hidden');\n              }\n\n              linkSvg.selectAll('path').style('visibility', null);\n            });\n        })\n        .on('mouseover', function(evt, row) {\n          table\n            .select('tbody')\n            .selectAll('tr')\n            .filter((d) => d === row)\n            .selectAll('td')\n            .classed('mouseOver', true);\n        })\n        .on('mouseout', function(evt, row) {\n          table\n            .select('tbody')\n            .selectAll('tr')\n            .filter((d) => d === row)\n            .selectAll('td')\n            .classed('mouseOver', false);\n        })\n        .on('click', function(evt, row) {\n          //var isExpanded = false;\n          if (row.isCluster) {\n            row.indeces.forEach((i) => {\n              allData[i].expanded = !allData[i].expanded;\n            });\n            //console.log(row);\n            //row.isExpanded = allData[i].expanded;\n            //isExpanded = allData[row].expanded;\n            drawTable();\n            // for the triangle indicators\n            // if (isExpanded) {\n            //   table\n            //     .select('tbody')\n            //     .selectAll('tr')\n            //     .filter((d) => d === row)\n            //     .select('.valueDiv .group')\n            //     .text('▼');\n            // } else {\n            //   table\n            //     .select('tbody')\n            //     .selectAll('tr')\n            //     .filter((d) => d === row)\n            //     .select('.valueDiv .group')\n            //     .text('▶');\n            // }\n          } else {\n            row.pinned = !row.pinned;\n            selectIndices = allData.filter((d) => d.pinned);\n            dispatcher_select.call('selectIndices', this, selectIndices);\n\n            if (row.pinned) {\n              // Already shown\n              d3.select(this)\n                .selectAll('td')\n                .classed('pinned', true);\n              drawTable();\n            } else {\n              // Need to hide\n              drawTable();\n            }\n          }\n        });\n    }\n\n    function highlight() {\n      // Update border\n      const height = table.node() ? table.node().clientHeight - 4 : 0;\n\n      table\n        .selectAll('th')\n        .select('.highlight')\n        .style('height', `${height}px`)\n        .style('visibility', (d) => (d.cluster !== null ? null : 'hidden'));\n    }\n  }\n\n  function drawLinks() {\n    if (!table.node()) return;\n\n    // linkSvg.style('display', showLinks ? null : 'none');\n    // if (!showLinks) return;\n\n    // computeRelations();\n\n    if (relations.length === 0 && !isCalculating) {\n      if (window.Worker) {\n        // instantiate worker\n        isCalculating = true;\n        const computeRelationWorker = new Worker();\n\n        // post data to worker\n        computeRelationWorker.postMessage({\n          relations,\n          columns,\n          allData,\n        });\n        // if received data from worker\n        computeRelationWorker.onmessage = function(e) {\n          if (e && e.data) {\n            const { relations: re, columns: cols } = e.data;\n            relations = re;\n            columns = cols;\n            //console.log('Message received from worker');\n            isCalculating = false;\n            dispatcher_calcRel.call('CalculateRelations', this, isCalculating);\n          }\n        };\n      } else {\n        console.log(\"Your browser doesn't support web worker\");\n      }\n    }\n\n    linkSvg.style('display', showLinks ? null : 'none');\n    if (!showLinks) return;\n\n    const width = table.node().offsetWidth;\n    const height = 200;\n    const aspect = width / height;\n\n    const offset = table.node().getBoundingClientRect().x;\n\n    table\n      .selectAll('th')\n      .nodes()\n      .forEach((d, i) => {\n        const { left, right } = d.getBoundingClientRect();\n\n        columns[i].pos = left + (right - left) / 2 - offset;\n      });\n\n    relations.forEach((d) => {\n      const x1 = d.source.pos;\n      const x2 = d.target.pos;\n\n      const y = height - (x2 - x1) / aspect;\n\n      const xi = d3.interpolateNumber(x1, x2);\n      const yi = d3.interpolateNumber(height, y);\n\n      d.points = [\n        { x: xi(0), y: yi(0) },\n        { x: xi(0.1), y: yi(0.5) },\n        { x: xi(0.5), y: yi(1) },\n        { x: xi(0.9), y: yi(0.5) },\n        { x: xi(1), y: yi(0) },\n      ];\n    });\n\n    const line = d3\n      .line()\n      .x((d) => d.x)\n      .y((d) => d.y)\n      .curve(d3.curveBasis);\n\n    const colorScale = d3.scaleSequential(d3.interpolateRdBu).domain([1, -1]);\n\n    const opacityScale = d3\n      .scaleLinear()\n      .domain([0, 1])\n      .range([0, 1]);\n\n    const widthScale = d3\n      .scaleLinear()\n      .domain([0, 1])\n      .range([0, 5]);\n\n    linkSvg\n      .attr('width', width)\n      .attr('height', height)\n      .selectAll('path')\n      .data(relations)\n      .join('path')\n      .attr('d', (d) => line(d.points))\n      .style('fill', 'none')\n      .style('stroke', (d) => colorScale(d.value))\n      .style('stroke-opacity', (d) => opacityScale(d.magnitude))\n      .style('stroke-width', (d) => widthScale(d.magnitude))\n      .style('stroke-linecap', 'round')\n      .append('title')\n      .text((d) => d.value);\n  }\n\n  function applyVisualizationMode() {\n    const td = table.selectAll('td');\n    td.selectAll('.textDiv.notId').style('visibility', textVisibility());\n    td.selectAll('svg').style('visibility', visVisibility());\n  }\n\n  // for task link\n\n  // cluster\n  digestable.applyClusterColumnLink = function(clusterCol, ascending) {\n    if (!arguments.length) return applyClusterColumn;\n    if (!ascending || ascending === 'true') {\n      cluster_order = 'ascending';\n    } else {\n      cluster_order = 'descending';\n    }\n    applyClusterColumn = clusterCol;\n    return digestable;\n  };\n\n  //sort\n  digestable.applySortColumnLink = function(sortCol, ascending) {\n    if (!arguments.length) return applySortColumn;\n    if (!ascending || ascending === 'true') {\n      sort_order = 'ascending';\n    } else {\n      sort_order = 'descending';\n    }\n    applySortColumn = sortCol;\n    return digestable;\n  };\n\n  // digestable.applySimpleLink = function(simplification) {\n  //   if (!arguments.length) return simplification;\n  //   if (!simplification) return simplification;\n  //   if (simplification === 'true') {\n  //     applySimplification = true;\n  //   }\n  //   return digestable;\n  // };\n\n  digestable.applySimplification = function(_) {\n    if (!arguments.length) return applySimplification;\n    applySimplification = _;\n    const clusterColumn = columns.find(({ cluster }) => cluster !== null);\n    if (clusterColumn && clusterColumn.type !== 'id') {\n      processData();\n      sortTable();\n    }\n    drawTable();\n    return digestable;\n  };\n\n  digestable.simplificationMethod = function(_) {\n    if (!arguments.length) return simplificationMethod;\n    simplificationMethod = _;\n    if (clustering) {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  digestable.simplificationAmount = function(_) {\n    if (!arguments.length) return simplificationAmount;\n    simplificationAmount = _;\n    if (clustering) {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  digestable.simplificationRows = function(_) {\n    if (!arguments.length) return simplificationRows;\n    simplificationRows = _;\n    if (clustering) {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  digestable.transformBase = function(_) {\n    if (!arguments.length) return transformBase;\n    transformBase = _;\n    if (clustering) {\n      processData();\n      sortTable();\n      drawTable();\n    }\n    return digestable;\n  };\n\n  // unselect function\n  digestable.unselect = function() {\n    allData.forEach((row) => {\n      row.pinned = false;\n    });\n    drawTable();\n    return digestable;\n  };\n\n  // selectIndices function\n  digestable.selectIndices = function(selectIndices) {\n    allData.forEach((row) => {\n      row.pinned = false;\n    });\n    selectIndices.forEach((r1) => {\n      allData.forEach((r2) => {\n        if (r1.values.index === r2.values.index) {\n          r2.pinned = true;\n        }\n      });\n    });\n    drawTable();\n    return digestable;\n  };\n\n  digestable.selectInitialIndices = function(_) {\n    if (!arguments.length) return selectIndices;\n    selectIndices = _;\n    return digestable;\n  };\n\n  digestable.visualizationMode = function(_) {\n    if (!arguments.length) return visualizationMode;\n    visualizationMode = _;\n    applyVisualizationMode();\n    return digestable;\n  };\n\n  digestable.showLinks = function(_) {\n    if (!arguments.length) return showLinks;\n    showLinks = _;\n    drawTable();\n    return digestable;\n  };\n\n  digestable.categoryScaling = function(_) {\n    if (!arguments.length) return categoryScaling;\n    categoryScaling = _;\n    drawTable();\n    return digestable;\n  };\n\n  digestable.updateLinks = function() {\n    drawLinks();\n    return digestable;\n  };\n\n  // For registering cluster by column callbacks\n  digestable.on = function() {\n    const value = dispatcher.on.apply(dispatcher, arguments);\n    return value === dispatcher ? digestable : value;\n  };\n\n  // For registering calculation relation callbacks\n  digestable.onCalcRel = function() {\n    const value = dispatcher_calcRel.on.apply(dispatcher_calcRel, arguments);\n    return value === dispatcher_calcRel ? digestable : value;\n  };\n\n  // For registering selection event callbacks\n  digestable.onSelectIndices = function() {\n    const value = dispatcher_select.on.apply(dispatcher_select, arguments);\n    return value === dispatcher_select ? digestable : value;\n  };\n\n  function loadMoreData(rowNum) {\n    displayRowNum += parseInt(rowNum);\n    //console.log(displayRowNum);\n    if (displayRowNum < [...allData].length) {\n      data = [...allData].slice(0, displayRowNum);\n    } else {\n      isFullData = true;\n      data = [...allData];\n    }\n    drawTable();\n  }\n\n  digestable.loadMore = function(rowNum) {\n    loadMoreData(rowNum);\n    //console.log('digestable test');\n    return digestable;\n  };\n\n  digestable.isFullData = function() {\n    return isFullData;\n  };\n\n  digestable.fullDataLength = function() {\n    return [...allData].length;\n  };\n\n  digestable.displayRowNum = function() {\n    return displayRowNum;\n  };\n\n  return digestable;\n};\n","import * as d3 from 'd3';\n\nexport const clusterQuantiles = (values, n) => {\n  const range = d3.range(n);\n\n  const scale = d3.scaleQuantile()\n    .domain(values)\n    .range(range);\n\n  return values.reduce((clusters, value, i) => {\n    clusters[scale(value)].push(i);\n    return clusters;\n  }, range.map(() => []));\n};","import * as d3 from 'd3';\n\nexport const clusterGap = (values, numRows) => {\n  const gaps = d3.pairs(values).map((d, i) => ({ value: Math.abs(d[1] - d[0]), index: i }));\n\n  gaps.sort((a, b) => {\n    return a.value === b.value ? d3.ascending(a.index, b.index) : d3.descending(a.value, b.value);\n  });\n\n  const clusters = gaps.slice(0, numRows - 1).map(gap => gap.index);\n\n  clusters.sort(d3.ascending);\n  clusters.unshift(-1);\n  clusters.push(values.length - 1);\n  \n  return d3.pairs(clusters).map(d => d3.range(d[0] + 1, d[1] + 1));\n};","export const groupCategories = values => {\n  return values.reduce((clusters, value, i, a) => {\n    if (i === 0) {\n      clusters.push([i]);\n    }\n    else {\n      if (value === a[i - 1]) {\n        clusters[clusters.length -1].push(i);\n      }\n      else {\n        clusters.push([i]);\n      }\n    }\n\n    return clusters;\n  }, []);\n}","import { Button, Form, Row, Col } from 'react-bootstrap';\nimport { useState } from 'react';\nconst Footer = ({\n  loadMore,\n  isFullData,\n  addrowNum,\n  setAddRowNum,\n  max,\n  displayRowNum,\n  refreshDisplayRowNum,\n}) => {\n  // handle form submit\n  const [displayRowNumAct, setDisplayRowNumAct] = useState(\n    displayRowNum || 100\n  );\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n    loadMore(addrowNum);\n    if (refreshDisplayRowNum() > max) {\n      setDisplayRowNumAct(max);\n    } else {\n      setDisplayRowNumAct(refreshDisplayRowNum());\n    }\n    setAddRowNum(100);\n  };\n  return (\n    <div\n      style={{\n        padding: '2rem',\n        display: 'flex',\n        justifyContent: 'center',\n        position: 'sticky',\n        left: '0',\n        zIndex: '3',\n        backgroundColor: 'white',\n      }}\n    >\n      <Form onSubmit={onFormSubmit}>\n        <Row>\n          <Col xs='auto'>\n            <Form.Text\n              style={{ position: 'relative', top: '.5rem', fontSize: '1rem' }}\n            >\n              Showing {displayRowNumAct} of {max} rows\n            </Form.Text>\n          </Col>\n          <Col xs='auto'>\n            <Button\n              disabled={isFullData}\n              // style={{\n              //   marginLeft: '1rem',\n              // }}\n              type='submit'\n            >\n              {isFullData ? 'End of Data' : `Load ${addrowNum} more rows`}\n            </Button>\n          </Col>\n          <Col xs='auto'>\n            <Form.Control\n              //style={{ width: '8rem' }}\n              type='number'\n              //placeholder='more rows'\n              min='1'\n              max={max}\n              value={addrowNum}\n              onChange={(e) => setAddRowNum(e.target.value)}\n              disabled={isFullData}\n            />\n          </Col>\n        </Row>\n      </Form>\n    </div>\n  );\n};\nexport default Footer;\n","import { useContext, useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { SimplifyContext, VisualizationContext } from '../../contexts';\nimport { useScrollHook } from '../../hooks';\nimport { digestable } from '../../digestable';\nimport Footer from './Footer';\n//import { index } from 'd3';\n\nexport const TableWrapper = ({\n  data,\n  clusterCol,\n  clusterAscending,\n  sortCol,\n  sortAscending,\n  mainPage,\n}) => {\n  const [\n    { apply, method, amount, rows, transformBase, unselect },\n    simplifyDispatch,\n  ] = useContext(SimplifyContext);\n  const [\n    {\n      mode,\n      showLinks,\n      categoryScaling,\n      mainIndices,\n      prepareIndices,\n      showSearch,\n    },\n    visualizationDispatch,\n  ] = useContext(VisualizationContext);\n  const divRef = useRef();\n  const digestableRef = useRef();\n  const OuterDivRef = useRef();\n\n  // parameters for load more\n  const [isFullData, setIsFullData] = useState(false);\n  const [addrowNum, setAddRowNum] = useState(100);\n  // Scroll callback\n  const onScroll = useScrollHook(\n    () => {\n      if (digestableRef.current) {\n        digestableRef.current.updateLinks();\n      }\n    },\n    OuterDivRef,\n    'horizontal'\n  );\n\n  // Create visualization\n  useEffect(() => {\n    if (!digestableRef.current) {\n      if (mainPage) {\n        digestableRef.current = digestable()\n          .applySimplification(apply)\n          // .applySimpleLink(simplification)\n          .selectInitialIndices(mainIndices)\n          .simplificationMethod(method.name)\n          .simplificationAmount(amount)\n          .simplificationRows(rows)\n          .transformBase(transformBase)\n          .visualizationMode(mode)\n          .categoryScaling(categoryScaling)\n          .on('clusterByColumn', (column) => {\n            simplifyDispatch({\n              type: 'setColumnInfo',\n              columnType: column.type,\n              unique: column.uniqueValues.length,\n            });\n          })\n          .onCalcRel('CalculateRelations', (isCalculating) => {\n            //console.log(isCalculating);\n            visualizationDispatch({\n              type: 'setCalculatingRelations',\n              calculatingRelations: isCalculating,\n            });\n          })\n          .onSelectIndices('selectIndices', (selectIndices) => {\n            visualizationDispatch({\n              type: 'setMainIndices',\n              mainIndices: selectIndices,\n            });\n          })\n          .applyClusterColumnLink(clusterCol, clusterAscending)\n          .applySortColumnLink(sortCol, sortAscending);\n      } else {\n        digestableRef.current = digestable()\n          .applySimplification(apply)\n          // .applySimpleLink(simplification)\n          .selectInitialIndices(prepareIndices)\n          .simplificationMethod(method.name)\n          .simplificationAmount(amount)\n          .simplificationRows(rows)\n          .transformBase(transformBase)\n          .visualizationMode(mode)\n          .categoryScaling(categoryScaling)\n          .on('clusterByColumn', (column) => {\n            simplifyDispatch({\n              type: 'setColumnInfo',\n              columnType: column.type,\n              unique: column.uniqueValues.length,\n            });\n          })\n          .onCalcRel('CalculateRelations', (isCalculating) => {\n            //console.log(isCalculating);\n            visualizationDispatch({\n              type: 'setCalculatingRelations',\n              calculatingRelations: isCalculating,\n            });\n          })\n          .onSelectIndices('selectIndices', (selectIndices) => {\n            visualizationDispatch({\n              type: 'setPrepareIndices',\n              prepareIndices: selectIndices,\n            });\n          })\n          .applyClusterColumnLink(clusterCol, clusterAscending)\n          .applySortColumnLink(sortCol, sortAscending);\n      }\n    }\n  }, []);\n\n  // Update data\n  useEffect(() => {\n    d3.select(divRef.current)\n      .datum(data)\n      .call(digestableRef.current);\n    visualizationDispatch({\n      type: 'setCalculatingRelations',\n      calculatingRelations: true,\n    });\n  }, [data]);\n\n  // Simplify parameters\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.applySimplification(apply);\n    }\n  }, [apply]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.simplificationMethod(method.name);\n    }\n  }, [method]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.simplificationAmount(amount);\n    }\n  }, [amount]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.simplificationRows(rows);\n    }\n  }, [rows]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.transformBase(transformBase);\n    }\n  }, [transformBase]);\n\n  // unselect parameters\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.unselect();\n    }\n  }, [unselect]);\n\n  // Visualization parameters\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.visualizationMode(mode);\n    }\n  }, [mode]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.showLinks(showLinks);\n    }\n  }, [showLinks]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      digestableRef.current.categoryScaling(categoryScaling);\n    }\n  }, [categoryScaling]);\n\n  useEffect(() => {\n    if (digestableRef.current) {\n      if (!showSearch) {\n        const displayIndices = [\n          ...new Set([...mainIndices, ...prepareIndices]),\n        ];\n        digestableRef.current.selectIndices(displayIndices);\n        visualizationDispatch({\n          type: 'setMainIndices',\n          mainIndices: displayIndices,\n        });\n      }\n    }\n  }, [showSearch]);\n\n  // if still calculate relations\n  // useEffect(() => {\n  //   if (digestableRef.current) {\n  //     visualizationDispatch({\n  //       type: 'setCalculatingRelations',\n  //       calculatingRelations: false,\n  //     });\n  //   }\n  // }, [calculatingRelations]);\n\n  //load-more parameter\n\n  // initial check\n  useEffect(() => {\n    if (digestableRef.current && digestableRef.current.isFullData()) {\n      setIsFullData(true);\n    }\n  }, []);\n\n  // click event\n  const loadMore = (addrowNum) => {\n    if (digestableRef.current) {\n      digestableRef.current.loadMore(addrowNum);\n      if (digestableRef.current.isFullData()) {\n        setIsFullData(true);\n      }\n    }\n  };\n\n  const max = digestableRef.current && digestableRef.current.fullDataLength();\n  const displayRowNum =\n    digestableRef.current && digestableRef.current.displayRowNum();\n\n  const refreshDisplayRowNum = () => {\n    if (digestableRef.current) {\n      return digestableRef.current.displayRowNum();\n    }\n  };\n\n  return (\n    <div\n      ref={OuterDivRef}\n      onScroll={onScroll}\n      style={{\n        height: '100%',\n        overflow: 'auto',\n      }}\n    >\n      <div ref={divRef}></div>\n      {apply || isFullData ? (\n        <div></div>\n      ) : (\n        <Footer\n          loadMore={loadMore}\n          isFullData={isFullData}\n          addrowNum={addrowNum}\n          setAddRowNum={setAddRowNum}\n          max={max}\n          displayRowNum={displayRowNum}\n          refreshDisplayRowNum={refreshDisplayRowNum}\n        />\n      )}\n    </div>\n  );\n};\n","import { useRef } from 'react';\n\nexport const useScrollHook = (callback, divRef, scrollType) => {\n  const x = useRef(0);\n  const y = useRef(0);\n  const ticking = useRef(false);\n\n  return () => {\n    if (!divRef.current) return;\n\n    switch (scrollType) {\n      case 'horizontal':\n        {\n          const left = divRef.current.scrollLeft;\n\n          if (left !== x.current) {\n            x.current = left;\n\n            if (!ticking.current) {\n              window.requestAnimationFrame(() => {\n                callback(left);\n\n                ticking.current = false;\n              });\n\n              ticking.current = true;\n            }\n          }\n        }\n        break;\n\n      case 'vertical':\n        {\n          const top = divRef.current.scrollTop;\n\n          if (top !== y.current) {\n            y.current = top;\n\n            if (!ticking.current) {\n              window.requestAnimationFrame(() => {\n                callback(top);\n\n                ticking.current = false;\n              });\n\n              ticking.current = true;\n            }\n          }\n        }\n        break;\n\n      case 'both':\n        {\n          const left = divRef.current.scrollLeft;\n          const top = divRef.current.scrollTop;\n\n          if (left !== x.current || top !== y.current) {\n            x.current = left;\n            y.current = top;\n\n            if (!ticking.current) {\n              window.requestAnimationFrame(() => {\n                callback(left, top);\n\n                ticking.current = false;\n              });\n\n              ticking.current = true;\n            }\n          }\n        }\n        break;\n\n      default:\n        console.log('Invalid scroll type');\n    }\n  };\n};\n","import { Card, Stack } from 'react-bootstrap';\n\nconst { Header, Body, Subtitle } = Card;\n\nexport const ControlPanel = ({ title, subtitle, children }) => {\n  return (\n    <Card>\n      <Header>{ title }</Header>\n      <Body>\n        { subtitle && \n          <Subtitle className='mb-2 text-muted'>\n            { subtitle}\n          </Subtitle>\n        }\n        <Stack gap={ 3 }>\n          { children }\n        </Stack>\n      </Body>\n    </Card>\n  );\n};\n","import { useEffect } from 'react';\nimport { useContext } from 'react';\nimport { Form, FloatingLabel, Button } from 'react-bootstrap';\nimport { SimplifyContext, VisualizationContext } from '../../contexts';\nimport { ControlPanel } from './controlPanel';\n\nconst { Group, Label, Check, Select, Range, Control } = Form;\n\nexport const SimplifyControls = ({ simplification }) => {\n  const [\n    {\n      apply,\n      columnType,\n      methods,\n      method,\n      amount,\n      transformBase,\n      unique,\n      rows,\n      unselect,\n    },\n    simplifyDispatch,\n  ] = useContext(SimplifyContext);\n  const [{}, visualizationDispatch] = useContext(VisualizationContext);\n\n  useEffect(() => {\n    if (simplification === 'true') {\n      simplifyDispatch({ type: 'setApply', apply: true });\n      //simplification = 'false';\n    }\n  }, []);\n\n  const onApplyChange = (evt) => {\n    simplifyDispatch({ type: 'setApply', apply: evt.target.checked });\n  };\n\n  const onMethodChange = (evt) => {\n    simplifyDispatch({\n      type: 'setMethod',\n      method: methods.find(({ name }) => name === evt.target.value),\n    });\n  };\n\n  const onAmountChange = (evt) => {\n    simplifyDispatch({\n      type: 'setAmount',\n      amount: +evt.target.value / 100,\n    });\n  };\n\n  const onRowsChange = (evt) => {\n    if (evt.target.value === '') {\n      simplifyDispatch({ type: 'setRows', rows: 1 });\n    } else {\n      simplifyDispatch({ type: 'setRows', rows: +evt.target.value });\n    }\n  };\n\n  const onTransformBaseChange = (evt) => {\n    simplifyDispatch({\n      type: 'setTransformBase',\n      transformBase: +evt.target.value / 100,\n    });\n  };\n\n  const onUnselectChange = (evt) => {\n    simplifyDispatch({\n      type: 'setUnselect',\n      unselect: evt.target.value === 'true',\n    });\n    visualizationDispatch({\n      type: 'setMainIndices',\n      mainIndices: [],\n    });\n  };\n\n  return (\n    <ControlPanel title='Simplification' subtitle={`${columnType} column`}>\n      <Group>\n        <Check\n          type='checkbox'\n          label='Apply'\n          id='apply-simplification-checkbox'\n          size='sm'\n          checked={apply}\n          disabled={columnType === 'id'}\n          onChange={onApplyChange}\n        />\n      </Group>\n      {columnType === 'numeric' && (\n        <>\n          <Group>\n            <Label>numeric column:</Label>\n            <FloatingLabel label='Method'>\n              <Select value={method.name} onChange={onMethodChange}>\n                {methods.map(({ name }, i) => (\n                  <option key={i} value={name}>\n                    {name}\n                  </option>\n                ))}\n              </Select>\n            </FloatingLabel>\n          </Group>\n          {method.type === 'amount' ? (\n            <Group>\n              <Label>Amount</Label>\n              <Range\n                min={0}\n                max={100}\n                step={1}\n                value={amount * 100}\n                onChange={onAmountChange}\n              />\n            </Group>\n          ) : (\n            <Group>\n              <Label>Number of groups</Label>\n              <Control\n                type='number'\n                min={1}\n                max={unique}\n                step={1}\n                value={rows}\n                onChange={onRowsChange}\n              />\n            </Group>\n          )}\n          {method.transform && (\n            <Group>\n              <Label>Depth weight</Label>\n              <Range\n                min={100}\n                max={400}\n                step={1}\n                value={transformBase * 100}\n                onChange={onTransformBaseChange}\n              />\n            </Group>\n          )}\n        </>\n      )}\n      <Group>\n        <Button\n          variant='outline-secondary'\n          size='sm'\n          value={!unselect}\n          onClick={onUnselectChange}\n        >\n          Unselect all rows\n        </Button>\n      </Group>\n    </ControlPanel>\n  );\n};\n","import { useContext, useEffect } from 'react';\nimport { Form, FloatingLabel, Spinner, Row, Col } from 'react-bootstrap';\nimport { VisualizationContext } from '../../contexts';\nimport { ControlPanel } from './controlPanel';\n\nconst { Group, Select, Check } = Form;\n\nexport const VisualizationControls = ({ visual }) => {\n  const [\n    {\n      modes,\n      mode,\n      showLinks,\n      categoryScalingOptions,\n      categoryScaling,\n      calculatingRelations,\n    },\n    visualizationDispatch,\n  ] = useContext(VisualizationContext);\n\n  useEffect(() => {\n    if (visual === 'both') {\n      visualizationDispatch({ type: 'setMode', mode: 'both' });\n      //simplification = 'false';\n    } else if (visual === 'visualizations') {\n      visualizationDispatch({ type: 'setMode', mode: 'visualizations' });\n    } else if (visual === 'interactive') {\n      visualizationDispatch({\n        type: 'setMode',\n        mode: 'interactive',\n      });\n    }\n  }, []);\n\n  const onModeChange = (evt) => {\n    visualizationDispatch({ type: 'setMode', mode: evt.target.value });\n  };\n\n  const onShowLinksChange = (evt) => {\n    visualizationDispatch({\n      type: 'setShowLinks',\n      showLinks: evt.target.checked,\n    });\n  };\n\n  const onCategoryScalingChange = (evt) => {\n    visualizationDispatch({\n      type: 'setCategoryScaling',\n      categoryScaling: evt.target.value,\n    });\n  };\n\n  return (\n    <ControlPanel title='Visualization'>\n      <Group>\n        <FloatingLabel label='Mode'>\n          <Select value={mode} onChange={onModeChange}>\n            {modes.map((mode, i) => (\n              <option key={i} value={mode}>\n                {mode}\n              </option>\n            ))}\n          </Select>\n        </FloatingLabel>\n      </Group>\n      {/* <Group>\n        <FloatingLabel label='Category scaling'>\n          <Select value={categoryScaling} onChange={onCategoryScalingChange}>\n            {categoryScalingOptions.map((option, i) => (\n              <option key={i} value={option}>\n                {option}\n              </option>\n            ))}\n          </Select>\n        </FloatingLabel>\n      </Group> */}\n    </ControlPanel>\n  );\n};\n","import React, { useState, useContext } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport { TableWrapper } from './components/table-wrapper';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { VisualizationContext } from './contexts';\n\nexport const Search_model = ({ data }) => {\n  // const [{ unselect }, simplifyDispatch] = useContext(SimplifyContext);\n  const [{ showSearch }, visualizationDispatch] = useContext(\n    VisualizationContext\n  );\n  // make variable \"show\" global\n  //const [show, setShow] = useState(false);\n  const [dataDisplayed, setDataDisplayed] = useState(data);\n  const handleSave = () => {\n    //setShow(false);\n    visualizationDispatch({\n      type: 'setShowSearch',\n      showSearch: false,\n    });\n  };\n  const handleShow = () => {\n    visualizationDispatch({\n      type: 'setPrepareIndices',\n      prepareIndices: [],\n    });\n    setDataDisplayed(data);\n    visualizationDispatch({\n      type: 'setShowSearch',\n      showSearch: true,\n    });\n  };\n  const [value, setValue] = useState('');\n\n  const handleCancel = () => {\n    visualizationDispatch({\n      type: 'setPrepareIndices',\n      prepareIndices: [],\n    });\n    visualizationDispatch({\n      type: 'setShowSearch',\n      showSearch: false,\n    });\n  };\n  const handleSearch = (e) => {\n    e.preventDefault();\n    const columns = data.columns;\n    let final_result = [];\n    for (let i = 0; i < columns.length; i++) {\n      const col = columns[i];\n      const local_result = data.filter((d) =>\n        d[col].toLowerCase().includes(value.toLowerCase())\n      );\n      final_result = [...new Set([...local_result, ...final_result])];\n    }\n    final_result['columns'] = columns;\n    setDataDisplayed(final_result);\n    setValue('');\n  };\n  return (\n    <>\n      <Button variant='light' onClick={handleShow}>\n        Search Rows\n      </Button>\n\n      <Modal\n        size='lg'\n        show={showSearch}\n        onHide={handleSave}\n        backdrop='static'\n        keyboard={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Search Box</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form onSubmit={handleSearch}>\n            <InputGroup className='mb-3'>\n              <Form.Control\n                placeholder='Type any relavant information to search'\n                // aria-label='Search'\n                // aria-describedby='basic-addon2'\n                type='text'\n                onChange={(e) => setValue(e.target.value)}\n                value={value}\n              />\n              <Button\n                variant='outline-secondary'\n                id='button-addon2'\n                type='submit'\n              >\n                Search\n              </Button>\n            </InputGroup>\n          </Form>\n          <TableWrapper data={dataDisplayed} />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant='secondary' onClick={handleCancel}>\n            Cancel\n          </Button>\n          <Button variant='primary' onClick={handleSave}>\n            Save Selections\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport {\n  Container,\n  Navbar,\n  Row,\n  Col,\n  Form,\n  Spinner,\n  Stack,\n} from 'react-bootstrap';\nimport * as d3 from 'd3';\nimport { SimplifyProvider, VisualizationProvider } from './contexts';\nimport { TableWrapper } from './components/table-wrapper';\nimport { SimplifyControls, VisualizationControls } from './components/controls';\nimport { useEffect } from 'react';\nimport { Search_model } from './search-modal';\n\nconst { Brand } = Navbar;\nconst { Group, Control, Select } = Form;\n\nconst datasets = [\n  { name: 'MT Cars', url: '/digestable/data/mtcars.csv' },\n  { name: 'NFL Combine 2017', url: '/digestable/data/NFL Combine 2017.csv' },\n  { name: 'Starbucks', url: '/digestable/data/starbucks.csv' },\n  { name: 'Electric Cars', url: '/digestable/data/ElectricCars.csv' },\n  { name: 'Stars', url: '/digestable/data/Stars.csv' },\n];\n\nexport const App = () => {\n  const [dataset, setDataset] = useState('');\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  // XXX: Add loading spinner\n  const loadData = async (url) => {\n    setData(null);\n    setLoading(true);\n\n    try {\n      const csvData = await d3.csv(url);\n      // create idx col for later use\n      csvData.forEach((d, i) => (d['index'] = i));\n      setData(csvData);\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onSelectChange = (evt) => {\n    const url = evt.target.value;\n    setDataset(url);\n    loadData(url);\n  };\n\n  const onFileSelect = (evt) => {\n    const file = evt.target.files.length === 1 ? evt.target.files[0] : null;\n\n    if (file) {\n      setDataset('');\n      loadData(URL.createObjectURL(file));\n    }\n  };\n\n  // Get the query string\n  const queryParams = new URLSearchParams(window.location.search);\n  const mode = queryParams.get('mode');\n  // const target_dataset = queryParams.get('dataset');\n  const clusterCol = queryParams.get('clusterCol');\n  const clusterAscending = queryParams.get('clusterAscending');\n  const sortCol = queryParams.get('sortCol');\n  const sortAscending = queryParams.get('sortAscending');\n  const simplification = queryParams.get('simplification');\n  const visual = queryParams.get('visual');\n  const targetDataset = queryParams.get('dataset');\n\n  const loadwithPresetData = (targetDataset) => {\n    const d = datasets.find((ds) => ds.name === targetDataset);\n    if (d) {\n      const url = d.url;\n      setDataset(url);\n      loadData(url);\n    }\n  };\n\n  useEffect(() => {\n    loadwithPresetData(targetDataset);\n  }, []);\n\n  return (\n    <SimplifyProvider>\n      <VisualizationProvider>\n        <Navbar bg='dark' variant='dark'>\n          <Brand className='ms-2'>\n            <img\n              src='/digestable/digestable_512.png'\n              alt='digestable logo'\n              height='32px'\n              className='me-1'\n            />\n            <span className='text-align-bottom'>\n              diges<b>table</b>\n            </span>\n          </Brand>\n          <Form>\n            <Group as={Row} className='align-items-center'>\n              <Col>\n                <Select value={dataset} onChange={onSelectChange}>\n                  <option value='' disabled>\n                    Choose dataset\n                  </option>\n                  {datasets.map((dataset, i) => (\n                    <option key={i} value={dataset.url}>\n                      {dataset.name}\n                    </option>\n                  ))}\n                </Select>\n              </Col>\n              <Col sm='auto' className='text-center'>\n                <span className='text-light'>or</span>\n              </Col>\n              <Col sm='auto'>\n                <Control type='file' accept='.csv' onChange={onFileSelect} />\n              </Col>\n              {data && (\n                <Col>\n                  <Search_model data={data} />\n                </Col>\n              )}\n            </Group>\n          </Form>\n        </Navbar>\n        {data ? (\n          <Container fluid style={{ height: 'calc(100% - 100px)' }}>\n            <Row style={{ height: '100%' }}>\n              <Col xs={10} className='mt-3' style={{ height: '100%' }}>\n                <TableWrapper\n                  data={data}\n                  clusterCol={clusterCol}\n                  clusterAscending={clusterAscending}\n                  sortCol={sortCol}\n                  sortAscending={sortAscending}\n                  mainPage={true}\n                />\n              </Col>\n              <Col className='bg-dark'>\n                {mode === 'simple' ? (\n                  <Stack gap={3}></Stack>\n                ) : (\n                  <Stack gap={3}>\n                    <SimplifyControls simplification={simplification} />\n                    <VisualizationControls visual={visual} />\n                  </Stack>\n                )}\n              </Col>\n            </Row>\n          </Container>\n        ) : (\n          <Container>\n            <div className='m-4 text-center'>\n              {loading ? (\n                <>\n                  <h5>Loading...</h5>\n                  <Spinner animation='border' />\n                </>\n              ) : (\n                <h3>No data</h3>\n              )}\n            </div>\n          </Container>\n        )}\n      </VisualizationProvider>\n    </SimplifyProvider>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './app';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}